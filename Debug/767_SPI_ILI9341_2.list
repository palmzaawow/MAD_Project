
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095ac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  080097b0  080097b0  000197b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e64  08009e64  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  08009e64  08009e64  00019e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e6c  08009e6c  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e6c  08009e6c  00019e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e70  08009e70  00019e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08009e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  2000022c  0800a0a0  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  0800a0a0  000206dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002025a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a8d2  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ed2  00000000  00000000  0003ab6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001718  00000000  00000000  0003ea48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011e1  00000000  00000000  00040160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b647  00000000  00000000  00041341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e457  00000000  00000000  0006c988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001025f8  00000000  00000000  0008addf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f14  00000000  00000000  0018d3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001942ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000022c 	.word	0x2000022c
 800021c:	00000000 	.word	0x00000000
 8000220:	08009794 	.word	0x08009794

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000230 	.word	0x20000230
 800023c:	08009794 	.word	0x08009794

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	460b      	mov	r3, r1
 80005f8:	71bb      	strb	r3, [r7, #6]
 80005fa:	4613      	mov	r3, r2
 80005fc:	717b      	strb	r3, [r7, #5]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	b29a      	uxth	r2, r3
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	b29b      	uxth	r3, r3
 8000606:	4413      	add	r3, r2
 8000608:	b29a      	uxth	r2, r3
 800060a:	797b      	ldrb	r3, [r7, #5]
 800060c:	b29b      	uxth	r3, r3
 800060e:	4413      	add	r3, r2
 8000610:	b29b      	uxth	r3, r3
 8000612:	f203 1305 	addw	r3, r3, #261	; 0x105
 8000616:	82fb      	strh	r3, [r7, #22]
	Checksum = 0-Checksum;
 8000618:	8afb      	ldrh	r3, [r7, #22]
 800061a:	425b      	negs	r3, r3
 800061c:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 800061e:	237e      	movs	r3, #126	; 0x7e
 8000620:	733b      	strb	r3, [r7, #12]
 8000622:	23ff      	movs	r3, #255	; 0xff
 8000624:	737b      	strb	r3, [r7, #13]
 8000626:	2306      	movs	r3, #6
 8000628:	73bb      	strb	r3, [r7, #14]
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	2300      	movs	r3, #0
 8000630:	743b      	strb	r3, [r7, #16]
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	747b      	strb	r3, [r7, #17]
 8000636:	797b      	ldrb	r3, [r7, #5]
 8000638:	74bb      	strb	r3, [r7, #18]
 800063a:	8afb      	ldrh	r3, [r7, #22]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	b29b      	uxth	r3, r3
 8000640:	b2db      	uxtb	r3, r3
 8000642:	74fb      	strb	r3, [r7, #19]
 8000644:	8afb      	ldrh	r3, [r7, #22]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	753b      	strb	r3, [r7, #20]
 800064a:	23ef      	movs	r3, #239	; 0xef
 800064c:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 800064e:	f107 010c 	add.w	r1, r7, #12
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	220a      	movs	r2, #10
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <Send_cmd+0x7c>)
 800065a:	f005 fe09 	bl	8006270 <HAL_UART_Transmit>
}
 800065e:	bf00      	nop
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000504 	.word	0x20000504

0800066c <DF_PlayFromStart>:

void DF_PlayFromStart(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  Send_cmd(0x03,0x00,0x01);
 8000670:	2201      	movs	r2, #1
 8000672:	2100      	movs	r1, #0
 8000674:	2003      	movs	r0, #3
 8000676:	f7ff ffb9 	bl	80005ec <Send_cmd>
  HAL_Delay(200);
 800067a:	20c8      	movs	r0, #200	; 0xc8
 800067c:	f002 fafa 	bl	8002c74 <HAL_Delay>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}

08000684 <DF_SetEQ>:

void DF_SetEQ(uint8_t mode)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
  Send_cmd(0x07,0x00, mode);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	461a      	mov	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	2007      	movs	r0, #7
 8000696:	f7ff ffa9 	bl	80005ec <Send_cmd>
  HAL_Delay(200);
 800069a:	20c8      	movs	r0, #200	; 0xc8
 800069c:	f002 faea 	bl	8002c74 <HAL_Delay>
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <DF_Init>:
  HAL_Delay(200);
}


void DF_Init (uint8_t volume)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x3F, 0x00, Source);
 80006b2:	2202      	movs	r2, #2
 80006b4:	2100      	movs	r1, #0
 80006b6:	203f      	movs	r0, #63	; 0x3f
 80006b8:	f7ff ff98 	bl	80005ec <Send_cmd>
	HAL_Delay(200);
 80006bc:	20c8      	movs	r0, #200	; 0xc8
 80006be:	f002 fad9 	bl	8002c74 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	461a      	mov	r2, r3
 80006c6:	2100      	movs	r1, #0
 80006c8:	2006      	movs	r0, #6
 80006ca:	f7ff ff8f 	bl	80005ec <Send_cmd>
	HAL_Delay(500);
 80006ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d2:	f002 facf 	bl	8002c74 <HAL_Delay>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <DF_Next>:

void DF_Next (void)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	af00      	add	r7, sp, #0
	Send_cmd(0x01, 0x00, 0x00);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	2001      	movs	r0, #1
 80006e8:	f7ff ff80 	bl	80005ec <Send_cmd>
	HAL_Delay(200);
 80006ec:	20c8      	movs	r0, #200	; 0xc8
 80006ee:	f002 fac1 	bl	8002c74 <HAL_Delay>
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <DF_Pause>:

void DF_Pause (void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
	Send_cmd(0x0E, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	200e      	movs	r0, #14
 8000700:	f7ff ff74 	bl	80005ec <Send_cmd>
	HAL_Delay(200);
 8000704:	20c8      	movs	r0, #200	; 0xc8
 8000706:	f002 fab5 	bl	8002c74 <HAL_Delay>
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}

0800070e <DF_Previous>:

void DF_Previous (void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0
	Send_cmd(0x02, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	2002      	movs	r0, #2
 8000718:	f7ff ff68 	bl	80005ec <Send_cmd>
	HAL_Delay(200);
 800071c:	20c8      	movs	r0, #200	; 0xc8
 800071e:	f002 faa9 	bl	8002c74 <HAL_Delay>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}

08000726 <DF_Playback>:

void DF_Playback (void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
	Send_cmd(0x0D, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	200d      	movs	r0, #13
 8000730:	f7ff ff5c 	bl	80005ec <Send_cmd>
	HAL_Delay(200);
 8000734:	20c8      	movs	r0, #200	; 0xc8
 8000736:	f002 fa9d 	bl	8002c74 <HAL_Delay>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <Check_Key>:

void Check_Key (void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(Pause_Port, Pause_Key))
 8000744:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000748:	4827      	ldr	r0, [pc, #156]	; (80007e8 <Check_Key+0xa8>)
 800074a:	f002 fd75 	bl	8003238 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d121      	bne.n	8000798 <Check_Key+0x58>
	{
		while (!HAL_GPIO_ReadPin(Pause_Port, Pause_Key));
 8000754:	bf00      	nop
 8000756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075a:	4823      	ldr	r0, [pc, #140]	; (80007e8 <Check_Key+0xa8>)
 800075c:	f002 fd6c 	bl	8003238 <HAL_GPIO_ReadPin>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0f7      	beq.n	8000756 <Check_Key+0x16>
		if (isplaying)
 8000766:	4b21      	ldr	r3, [pc, #132]	; (80007ec <Check_Key+0xac>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d008      	beq.n	8000780 <Check_Key+0x40>
		{
			ispause = 1;
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <Check_Key+0xb0>)
 8000770:	2201      	movs	r2, #1
 8000772:	601a      	str	r2, [r3, #0]
			isplaying = 0;
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <Check_Key+0xac>)
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
			DF_Pause();
 800077a:	f7ff ffbc 	bl	80006f6 <DF_Pause>
 800077e:	e00b      	b.n	8000798 <Check_Key+0x58>
		}

		else if (ispause)
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <Check_Key+0xb0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d007      	beq.n	8000798 <Check_Key+0x58>
		{
			isplaying = 1;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <Check_Key+0xac>)
 800078a:	2201      	movs	r2, #1
 800078c:	601a      	str	r2, [r3, #0]
			ispause = 0;
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <Check_Key+0xb0>)
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
			DF_Playback();
 8000794:	f7ff ffc7 	bl	8000726 <DF_Playback>
		}
	}

	if (!HAL_GPIO_ReadPin(Previous_Port, Previous_Key))
 8000798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800079c:	4812      	ldr	r0, [pc, #72]	; (80007e8 <Check_Key+0xa8>)
 800079e:	f002 fd4b 	bl	8003238 <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d10a      	bne.n	80007be <Check_Key+0x7e>
	{
		while (!HAL_GPIO_ReadPin(Previous_Port, Previous_Key));
 80007a8:	bf00      	nop
 80007aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ae:	480e      	ldr	r0, [pc, #56]	; (80007e8 <Check_Key+0xa8>)
 80007b0:	f002 fd42 	bl	8003238 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d0f7      	beq.n	80007aa <Check_Key+0x6a>
		DF_Previous();
 80007ba:	f7ff ffa8 	bl	800070e <DF_Previous>
	}

	if (!HAL_GPIO_ReadPin(Next_Port, Next_Key))
 80007be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <Check_Key+0xa8>)
 80007c4:	f002 fd38 	bl	8003238 <HAL_GPIO_ReadPin>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d10a      	bne.n	80007e4 <Check_Key+0xa4>
	{
		while (!HAL_GPIO_ReadPin(Next_Port, Next_Key));
 80007ce:	bf00      	nop
 80007d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <Check_Key+0xa8>)
 80007d6:	f002 fd2f 	bl	8003238 <HAL_GPIO_ReadPin>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0f7      	beq.n	80007d0 <Check_Key+0x90>
		DF_Next();
 80007e0:	f7ff ff7d 	bl	80006de <DF_Next>
	}
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40020400 	.word	0x40020400
 80007ec:	20000000 	.word	0x20000000
 80007f0:	20000248 	.word	0x20000248

080007f4 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 80007fc:	4a09      	ldr	r2, [pc, #36]	; (8000824 <DS3231_Init+0x30>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8000802:	2000      	movs	r0, #0
 8000804:	f000 f8c9 	bl	800099a <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8000808:	2000      	movs	r0, #0
 800080a:	f000 f88d 	bl	8000928 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 800080e:	f000 f8e6 	bl	80009de <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8000812:	f000 f8ac 	bl	800096e <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000816:	2001      	movs	r0, #1
 8000818:	f000 f846 	bl	80008a8 <DS3231_SetInterruptMode>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	2000024c 	.word	0x2000024c

08000828 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af02      	add	r7, sp, #8
 800082e:	4603      	mov	r3, r0
 8000830:	460a      	mov	r2, r1
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	4613      	mov	r3, r2
 8000836:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	733b      	strb	r3, [r7, #12]
 800083c:	79bb      	ldrb	r3, [r7, #6]
 800083e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <DS3231_SetRegByte+0x38>)
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	f107 020c 	add.w	r2, r7, #12
 8000848:	f04f 33ff 	mov.w	r3, #4294967295
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2302      	movs	r3, #2
 8000850:	21d0      	movs	r1, #208	; 0xd0
 8000852:	f002 fdd7 	bl	8003404 <HAL_I2C_Master_Transmit>
}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000024c 	.word	0x2000024c

08000864 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af02      	add	r7, sp, #8
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <DS3231_GetRegByte+0x40>)
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	1dfa      	adds	r2, r7, #7
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2301      	movs	r3, #1
 800087c:	21d0      	movs	r1, #208	; 0xd0
 800087e:	f002 fdc1 	bl	8003404 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <DS3231_GetRegByte+0x40>)
 8000884:	6818      	ldr	r0, [r3, #0]
 8000886:	f107 020f 	add.w	r2, r7, #15
 800088a:	f04f 33ff 	mov.w	r3, #4294967295
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	21d0      	movs	r1, #208	; 0xd0
 8000894:	f002 feaa 	bl	80035ec <HAL_I2C_Master_Receive>
	return val;
 8000898:	7bfb      	ldrb	r3, [r7, #15]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2000024c 	.word	0x2000024c

080008a8 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80008b2:	200e      	movs	r0, #14
 80008b4:	f7ff ffd6 	bl	8000864 <DS3231_GetRegByte>
 80008b8:	4603      	mov	r3, r0
 80008ba:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 80008bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c0:	f023 0304 	bic.w	r3, r3, #4
 80008c4:	b25a      	sxtb	r2, r3
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	4619      	mov	r1, r3
 80008da:	200e      	movs	r0, #14
 80008dc:	f7ff ffa4 	bl	8000828 <DS3231_SetRegByte>
}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <DS3231_SetRateSelect>:

/**
 * @brief Set frequency of the square wave output
 * @param rate Frequency to set, DS3231_1HZ, DS3231_1024HZ, DS3231_4096HZ or DS3231_8192HZ.
 */
void DS3231_SetRateSelect(DS3231_Rate rate){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80008f2:	200e      	movs	r0, #14
 80008f4:	f7ff ffb6 	bl	8000864 <DS3231_GetRegByte>
 80008f8:	4603      	mov	r3, r0
 80008fa:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xe7) | ((rate & 0x03) << DS3231_RS1));
 80008fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000900:	f023 0318 	bic.w	r3, r3, #24
 8000904:	b25a      	sxtb	r2, r3
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	b25b      	sxtb	r3, r3
 800090c:	f003 0318 	and.w	r3, r3, #24
 8000910:	b25b      	sxtb	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b25b      	sxtb	r3, r3
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4619      	mov	r1, r3
 800091a:	200e      	movs	r0, #14
 800091c:	f7ff ff84 	bl	8000828 <DS3231_SetRegByte>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000932:	200e      	movs	r0, #14
 8000934:	f7ff ff96 	bl	8000864 <DS3231_GetRegByte>
 8000938:	4603      	mov	r3, r0
 800093a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 800093c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000940:	f023 0302 	bic.w	r3, r3, #2
 8000944:	b25a      	sxtb	r2, r3
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	b25b      	sxtb	r3, r3
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	b25b      	sxtb	r3, r3
 8000952:	4313      	orrs	r3, r2
 8000954:	b25b      	sxtb	r3, r3
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4619      	mov	r1, r3
 800095a:	200e      	movs	r0, #14
 800095c:	f7ff ff64 	bl	8000828 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000960:	2001      	movs	r0, #1
 8000962:	f7ff ffa1 	bl	80008a8 <DS3231_SetInterruptMode>
}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8000974:	200f      	movs	r0, #15
 8000976:	f7ff ff75 	bl	8000864 <DS3231_GetRegByte>
 800097a:	4603      	mov	r3, r0
 800097c:	f023 0302 	bic.w	r3, r3, #2
 8000980:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f023 0302 	bic.w	r3, r3, #2
 8000988:	b2db      	uxtb	r3, r3
 800098a:	4619      	mov	r1, r3
 800098c:	200f      	movs	r0, #15
 800098e:	f7ff ff4b 	bl	8000828 <DS3231_SetRegByte>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800099a:	b580      	push	{r7, lr}
 800099c:	b084      	sub	sp, #16
 800099e:	af00      	add	r7, sp, #0
 80009a0:	4603      	mov	r3, r0
 80009a2:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80009a4:	200e      	movs	r0, #14
 80009a6:	f7ff ff5d 	bl	8000864 <DS3231_GetRegByte>
 80009aa:	4603      	mov	r3, r0
 80009ac:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 80009ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b2:	f023 0301 	bic.w	r3, r3, #1
 80009b6:	b25a      	sxtb	r2, r3
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	4619      	mov	r1, r3
 80009ca:	200e      	movs	r0, #14
 80009cc:	f7ff ff2c 	bl	8000828 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80009d0:	2001      	movs	r0, #1
 80009d2:	f7ff ff69 	bl	80008a8 <DS3231_SetInterruptMode>
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 80009e4:	200f      	movs	r0, #15
 80009e6:	f7ff ff3d 	bl	8000864 <DS3231_GetRegByte>
 80009ea:	4603      	mov	r3, r0
 80009ec:	f023 0301 	bic.w	r3, r3, #1
 80009f0:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f023 0301 	bic.w	r3, r3, #1
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4619      	mov	r1, r3
 80009fc:	200f      	movs	r0, #15
 80009fe:	f7ff ff13 	bl	8000828 <DS3231_SetRegByte>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <DS3231_SetAlarm1Second>:

/**
 * @brief Set alarm 1 second to match. Does not change alarm 1 matching mode.
 * @param second Second, 0 to 59.
 */
void DS3231_SetAlarm1Second(uint8_t second){
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b084      	sub	sp, #16
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = DS3231_GetRegByte(DS3231_A1_SECOND) & 0x80;
 8000a14:	2007      	movs	r0, #7
 8000a16:	f7ff ff25 	bl	8000864 <DS3231_GetRegByte>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a20:	73fb      	strb	r3, [r7, #15]
	uint8_t a1m1 = temp | (DS3231_EncodeBCD(second) & 0x3f);
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 f9a5 	bl	8000d74 <DS3231_EncodeBCD>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a32:	b25a      	sxtb	r2, r3
 8000a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_A1_SECOND, a1m1);
 8000a3e:	7bbb      	ldrb	r3, [r7, #14]
 8000a40:	4619      	mov	r1, r3
 8000a42:	2007      	movs	r0, #7
 8000a44:	f7ff fef0 	bl	8000828 <DS3231_SetRegByte>
}
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <DS3231_SetAlarm1Minute>:

/**
 * @brief Set alarm 1 minute to match. Does not change alarm 1 matching mode.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetAlarm1Minute(uint8_t minute){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = DS3231_GetRegByte(DS3231_A1_MINUTE) & 0x80;
 8000a5a:	2008      	movs	r0, #8
 8000a5c:	f7ff ff02 	bl	8000864 <DS3231_GetRegByte>
 8000a60:	4603      	mov	r3, r0
 8000a62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a66:	73fb      	strb	r3, [r7, #15]
	uint8_t a1m2 = temp | (DS3231_EncodeBCD(minute) & 0x3f);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f982 	bl	8000d74 <DS3231_EncodeBCD>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b25b      	sxtb	r3, r3
 8000a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a78:	b25a      	sxtb	r2, r3
 8000a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	b25b      	sxtb	r3, r3
 8000a82:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_A1_MINUTE, a1m2);
 8000a84:	7bbb      	ldrb	r3, [r7, #14]
 8000a86:	4619      	mov	r1, r3
 8000a88:	2008      	movs	r0, #8
 8000a8a:	f7ff fecd 	bl	8000828 <DS3231_SetRegByte>
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <DS3231_SetAlarm1Hour>:

/**
 * @brief Set alarm 1 hour to match. Does not change alarm 1 matching mode.
 * @param hour Hour, 0 to 59.
 */
void DS3231_SetAlarm1Hour(uint8_t hour_24mode){
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = DS3231_GetRegByte(DS3231_A1_HOUR) & 0x80;
 8000aa0:	2009      	movs	r0, #9
 8000aa2:	f7ff fedf 	bl	8000864 <DS3231_GetRegByte>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000aac:	73fb      	strb	r3, [r7, #15]
	uint8_t a1m3 = temp | (DS3231_EncodeBCD(hour_24mode) & 0x3f);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 f95f 	bl	8000d74 <DS3231_EncodeBCD>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b25b      	sxtb	r3, r3
 8000aba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000abe:	b25a      	sxtb	r2, r3
 8000ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	b25b      	sxtb	r3, r3
 8000ac8:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_A1_HOUR, a1m3);
 8000aca:	7bbb      	ldrb	r3, [r7, #14]
 8000acc:	4619      	mov	r1, r3
 8000ace:	2009      	movs	r0, #9
 8000ad0:	f7ff feaa 	bl	8000828 <DS3231_SetRegByte>
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <DS3231_SetAlarm1Mode>:

/**
 * @brief Set alarm 1 mode.
 * @param alarmMode Alarm 1 mode, DS3231_A1_EVERY_S, DS3231_A1_MATCH_S, DS3231_A1_MATCH_S_M, DS3231_A1_MATCH_S_M_H, DS3231_A1_MATCH_S_M_H_DATE or DS3231_A1_MATCH_S_M_H_DAY.
 */
void DS3231_SetAlarm1Mode(DS3231_Alarm1Mode alarmMode){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	temp = DS3231_GetRegByte(DS3231_A1_SECOND) & 0x7f;
 8000ae6:	2007      	movs	r0, #7
 8000ae8:	f7ff febc 	bl	8000864 <DS3231_GetRegByte>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000af2:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A1_SECOND, temp | (((alarmMode >> 0) & 0x01) << DS3231_AXMY));
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	01db      	lsls	r3, r3, #7
 8000af8:	b25a      	sxtb	r2, r3
 8000afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	4619      	mov	r1, r3
 8000b06:	2007      	movs	r0, #7
 8000b08:	f7ff fe8e 	bl	8000828 <DS3231_SetRegByte>
	temp = DS3231_GetRegByte(DS3231_A1_MINUTE) & 0x7f;
 8000b0c:	2008      	movs	r0, #8
 8000b0e:	f7ff fea9 	bl	8000864 <DS3231_GetRegByte>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b18:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A1_MINUTE, temp | (((alarmMode >> 1) & 0x01) << DS3231_AXMY));
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	085b      	lsrs	r3, r3, #1
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	01db      	lsls	r3, r3, #7
 8000b22:	b25a      	sxtb	r2, r3
 8000b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	4619      	mov	r1, r3
 8000b30:	2008      	movs	r0, #8
 8000b32:	f7ff fe79 	bl	8000828 <DS3231_SetRegByte>
	temp = DS3231_GetRegByte(DS3231_A1_HOUR) & 0x7f;
 8000b36:	2009      	movs	r0, #9
 8000b38:	f7ff fe94 	bl	8000864 <DS3231_GetRegByte>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b42:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A1_HOUR, temp | (((alarmMode >> 2) & 0x01) << DS3231_AXMY));
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	01db      	lsls	r3, r3, #7
 8000b4c:	b25a      	sxtb	r2, r3
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	4619      	mov	r1, r3
 8000b5a:	2009      	movs	r0, #9
 8000b5c:	f7ff fe64 	bl	8000828 <DS3231_SetRegByte>
	temp = DS3231_GetRegByte(DS3231_A1_DATE) & 0x7f;
 8000b60:	200a      	movs	r0, #10
 8000b62:	f7ff fe7f 	bl	8000864 <DS3231_GetRegByte>
 8000b66:	4603      	mov	r3, r0
 8000b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b6c:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A1_DATE, temp | (((alarmMode >> 3) & 0x01) << DS3231_AXMY) | (alarmMode & 0x80));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	08db      	lsrs	r3, r3, #3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	01db      	lsls	r3, r3, #7
 8000b76:	b25a      	sxtb	r2, r3
 8000b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b25a      	sxtb	r2, r3
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000b88:	b25b      	sxtb	r3, r3
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b25b      	sxtb	r3, r3
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4619      	mov	r1, r3
 8000b92:	200a      	movs	r0, #10
 8000b94:	f7ff fe48 	bl	8000828 <DS3231_SetRegByte>
}
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <DS3231_IsAlarm1Triggered>:

/**
 * @brief Check if alarm 1 is triggered.
 * @return A1F flag bit, 0 or 1.
 */
uint8_t DS3231_IsAlarm1Triggered(){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	return (DS3231_GetRegByte(DS3231_REG_STATUS) >> DS3231_A1F) & 0x01;
 8000ba4:	200f      	movs	r0, #15
 8000ba6:	f7ff fe5d 	bl	8000864 <DS3231_GetRegByte>
 8000baa:	4603      	mov	r3, r0
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	b2db      	uxtb	r3, r3
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8000bba:	2003      	movs	r0, #3
 8000bbc:	f7ff fe52 	bl	8000864 <DS3231_GetRegByte>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f8bd 	bl	8000d42 <DS3231_DecodeBCD>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <DS3231_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS3231_GetDate(void) {
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DATE));
 8000bd2:	2004      	movs	r0, #4
 8000bd4:	f7ff fe46 	bl	8000864 <DS3231_GetRegByte>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f8b1 	bl	8000d42 <DS3231_DecodeBCD>
 8000be0:	4603      	mov	r3, r0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <DS3231_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS3231_GetMonth(void) {
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f);
 8000bea:	2005      	movs	r0, #5
 8000bec:	f7ff fe3a 	bl	8000864 <DS3231_GetRegByte>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 f8a2 	bl	8000d42 <DS3231_DecodeBCD>
 8000bfe:	4603      	mov	r3, r0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <DS3231_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2199.
 */
uint16_t DS3231_GetYear(void) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
	uint8_t decYear = DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_YEAR));
 8000c0a:	2006      	movs	r0, #6
 8000c0c:	f7ff fe2a 	bl	8000864 <DS3231_GetRegByte>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f895 	bl	8000d42 <DS3231_DecodeBCD>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	71fb      	strb	r3, [r7, #7]
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 8000c1c:	2005      	movs	r0, #5
 8000c1e:	f7ff fe21 	bl	8000864 <DS3231_GetRegByte>
 8000c22:	4603      	mov	r3, r0
 8000c24:	09db      	lsrs	r3, r3, #7
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	0092      	lsls	r2, r2, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	461a      	mov	r2, r3
 8000c32:	0091      	lsls	r1, r2, #2
 8000c34:	461a      	mov	r2, r3
 8000c36:	460b      	mov	r3, r1
 8000c38:	4413      	add	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000c42:	80bb      	strh	r3, [r7, #4]
	return century + decYear;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	88bb      	ldrh	r3, [r7, #4]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	b29b      	uxth	r3, r3
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f7ff fe02 	bl	8000864 <DS3231_GetRegByte>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f86d 	bl	8000d42 <DS3231_DecodeBCD>
 8000c68:	4603      	mov	r3, r0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff fdf6 	bl	8000864 <DS3231_GetRegByte>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f861 	bl	8000d42 <DS3231_DecodeBCD>
 8000c80:	4603      	mov	r3, r0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <DS3231_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS3231_GetSecond(void) {
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_SECOND));
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff fdea 	bl	8000864 <DS3231_GetRegByte>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f855 	bl	8000d42 <DS3231_DecodeBCD>
 8000c98:	4603      	mov	r3, r0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 f85f 	bl	8000d74 <DS3231_EncodeBCD>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4619      	mov	r1, r3
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f7ff fdb4 	bl	8000828 <DS3231_SetRegByte>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 f84d 	bl	8000d74 <DS3231_EncodeBCD>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4619      	mov	r1, r3
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff fda2 	bl	8000828 <DS3231_SetRegByte>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 f83b 	bl	8000d74 <DS3231_EncodeBCD>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	4619      	mov	r1, r3
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fd90 	bl	8000828 <DS3231_SetRegByte>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <DS3231_SetFullTime>:
 * @brief Set the current time.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 * @param minute  Minute, 0 to 59.
 * @param second Second, 0 to 59.
 */
void DS3231_SetFullTime(uint8_t  hour_24mode, uint8_t minute, uint8_t second){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	71bb      	strb	r3, [r7, #6]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	717b      	strb	r3, [r7, #5]
	DS3231_SetHour(hour_24mode);
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ffba 	bl	8000c9e <DS3231_SetHour>
	DS3231_SetMinute(minute);
 8000d2a:	79bb      	ldrb	r3, [r7, #6]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ffcb 	bl	8000cc8 <DS3231_SetMinute>
	DS3231_SetSecond(second);
 8000d32:	797b      	ldrb	r3, [r7, #5]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ffd9 	bl	8000cec <DS3231_SetSecond>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	091b      	lsrs	r3, r3, #4
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	461a      	mov	r2, r3
 8000d54:	0092      	lsls	r2, r2, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	4413      	add	r3, r2
 8000d66:	b2db      	uxtb	r3, r3
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8000d7e:	79fa      	ldrb	r2, [r7, #7]
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <DS3231_EncodeBCD+0x40>)
 8000d82:	fba3 1302 	umull	r1, r3, r3, r2
 8000d86:	08d9      	lsrs	r1, r3, #3
 8000d88:	460b      	mov	r3, r1
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	4907      	ldr	r1, [pc, #28]	; (8000db4 <DS3231_EncodeBCD+0x40>)
 8000d98:	fba1 1303 	umull	r1, r3, r1, r3
 8000d9c:	08db      	lsrs	r3, r3, #3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	011b      	lsls	r3, r3, #4
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4413      	add	r3, r2
 8000da6:	b2db      	uxtb	r3, r3
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	cccccccd 	.word	0xcccccccd

08000db8 <MX_GPIO_Init>:
     PC5   ------> ETH_RXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08e      	sub	sp, #56	; 0x38
 8000dbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dce:	4b95      	ldr	r3, [pc, #596]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a94      	ldr	r2, [pc, #592]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000dd4:	f043 0310 	orr.w	r3, r3, #16
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b92      	ldr	r3, [pc, #584]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0310 	and.w	r3, r3, #16
 8000de2:	623b      	str	r3, [r7, #32]
 8000de4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	4b8f      	ldr	r3, [pc, #572]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a8e      	ldr	r2, [pc, #568]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b8c      	ldr	r3, [pc, #560]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	61fb      	str	r3, [r7, #28]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dfe:	4b89      	ldr	r3, [pc, #548]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a88      	ldr	r2, [pc, #544]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e04:	f043 0320 	orr.w	r3, r3, #32
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b86      	ldr	r3, [pc, #536]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0320 	and.w	r3, r3, #32
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e16:	4b83      	ldr	r3, [pc, #524]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a82      	ldr	r2, [pc, #520]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b80      	ldr	r3, [pc, #512]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b7d      	ldr	r3, [pc, #500]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a7c      	ldr	r2, [pc, #496]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b7a      	ldr	r3, [pc, #488]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	4b77      	ldr	r3, [pc, #476]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a76      	ldr	r2, [pc, #472]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b74      	ldr	r3, [pc, #464]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5e:	4b71      	ldr	r3, [pc, #452]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a70      	ldr	r2, [pc, #448]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e64:	f043 0308 	orr.w	r3, r3, #8
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b6e      	ldr	r3, [pc, #440]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e76:	4b6b      	ldr	r3, [pc, #428]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a6a      	ldr	r2, [pc, #424]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b68      	ldr	r3, [pc, #416]	; (8001024 <MX_GPIO_Init+0x26c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2168      	movs	r1, #104	; 0x68
 8000e92:	4865      	ldr	r0, [pc, #404]	; (8001028 <MX_GPIO_Init+0x270>)
 8000e94:	f002 f9e8 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2140      	movs	r1, #64	; 0x40
 8000e9c:	4863      	ldr	r0, [pc, #396]	; (800102c <MX_GPIO_Init+0x274>)
 8000e9e:	f002 f9e3 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000ea8:	4861      	ldr	r0, [pc, #388]	; (8001030 <MX_GPIO_Init+0x278>)
 8000eaa:	f002 f9dd 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	4860      	ldr	r0, [pc, #384]	; (8001034 <MX_GPIO_Init+0x27c>)
 8000eb4:	f002 f9d8 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000eb8:	2314      	movs	r3, #20
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4857      	ldr	r0, [pc, #348]	; (8001028 <MX_GPIO_Init+0x270>)
 8000ecc:	f002 f808 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000ed0:	2368      	movs	r3, #104	; 0x68
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4850      	ldr	r0, [pc, #320]	; (8001028 <MX_GPIO_Init+0x270>)
 8000ee8:	f001 fffa 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000eec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efe:	4619      	mov	r1, r3
 8000f00:	484b      	ldr	r0, [pc, #300]	; (8001030 <MX_GPIO_Init+0x278>)
 8000f02:	f001 ffed 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f06:	2332      	movs	r3, #50	; 0x32
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f12:	2303      	movs	r3, #3
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f16:	230b      	movs	r3, #11
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4843      	ldr	r0, [pc, #268]	; (8001030 <MX_GPIO_Init+0x278>)
 8000f22:	f001 ffdd 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f26:	2386      	movs	r3, #134	; 0x86
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f36:	230b      	movs	r3, #11
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	483d      	ldr	r0, [pc, #244]	; (8001038 <MX_GPIO_Init+0x280>)
 8000f42:	f001 ffcd 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f4c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4832      	ldr	r0, [pc, #200]	; (8001028 <MX_GPIO_Init+0x270>)
 8000f5e:	f001 ffbf 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f62:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f74:	4619      	mov	r1, r3
 8000f76:	482f      	ldr	r0, [pc, #188]	; (8001034 <MX_GPIO_Init+0x27c>)
 8000f78:	f001 ffb2 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f7c:	2340      	movs	r3, #64	; 0x40
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f90:	4619      	mov	r1, r3
 8000f92:	4826      	ldr	r0, [pc, #152]	; (800102c <MX_GPIO_Init+0x274>)
 8000f94:	f001 ffa4 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4820      	ldr	r0, [pc, #128]	; (800102c <MX_GPIO_Init+0x274>)
 8000fac:	f001 ff98 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000fb0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4819      	ldr	r0, [pc, #100]	; (8001030 <MX_GPIO_Init+0x278>)
 8000fca:	f001 ff89 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe0:	230b      	movs	r3, #11
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4810      	ldr	r0, [pc, #64]	; (800102c <MX_GPIO_Init+0x274>)
 8000fec:	f001 ff78 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001004:	4619      	mov	r1, r3
 8001006:	480b      	ldr	r0, [pc, #44]	; (8001034 <MX_GPIO_Init+0x27c>)
 8001008:	f001 ff6a 	bl	8002ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2100      	movs	r1, #0
 8001010:	2028      	movs	r0, #40	; 0x28
 8001012:	f001 ff2e 	bl	8002e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001016:	2028      	movs	r0, #40	; 0x28
 8001018:	f001 ff47 	bl	8002eaa <HAL_NVIC_EnableIRQ>

}
 800101c:	bf00      	nop
 800101e:	3738      	adds	r7, #56	; 0x38
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40021000 	.word	0x40021000
 800102c:	40021800 	.word	0x40021800
 8001030:	40020800 	.word	0x40020800
 8001034:	40020400 	.word	0x40020400
 8001038:	40020000 	.word	0x40020000

0800103c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001042:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <MX_I2C1_Init+0x78>)
 8001044:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001048:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <MX_I2C1_Init+0x7c>)
 800104a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <MX_I2C1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001054:	2201      	movs	r2, #1
 8001056:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <MX_I2C1_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_I2C1_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001076:	480e      	ldr	r0, [pc, #56]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001078:	f002 f934 	bl	80032e4 <HAL_I2C_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001082:	f000 fc71 	bl	8001968 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001086:	2100      	movs	r1, #0
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <MX_I2C1_Init+0x74>)
 800108a:	f002 fe11 	bl	8003cb0 <HAL_I2CEx_ConfigAnalogFilter>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001094:	f000 fc68 	bl	8001968 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001098:	2100      	movs	r1, #0
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_I2C1_Init+0x74>)
 800109c:	f002 fe53 	bl	8003d46 <HAL_I2CEx_ConfigDigitalFilter>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010a6:	f000 fc5f 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000250 	.word	0x20000250
 80010b4:	40005400 	.word	0x40005400
 80010b8:	00c0eaff 	.word	0x00c0eaff

080010bc <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_I2C4_Init+0x74>)
 80010c2:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <MX_I2C4_Init+0x78>)
 80010c4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_I2C4_Init+0x74>)
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <MX_I2C4_Init+0x7c>)
 80010ca:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_I2C4_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_I2C4_Init+0x74>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_I2C4_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_I2C4_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_I2C4_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_I2C4_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_I2C4_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80010f6:	480e      	ldr	r0, [pc, #56]	; (8001130 <MX_I2C4_Init+0x74>)
 80010f8:	f002 f8f4 	bl	80032e4 <HAL_I2C_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001102:	f000 fc31 	bl	8001968 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001106:	2100      	movs	r1, #0
 8001108:	4809      	ldr	r0, [pc, #36]	; (8001130 <MX_I2C4_Init+0x74>)
 800110a:	f002 fdd1 	bl	8003cb0 <HAL_I2CEx_ConfigAnalogFilter>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001114:	f000 fc28 	bl	8001968 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001118:	2100      	movs	r1, #0
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_I2C4_Init+0x74>)
 800111c:	f002 fe13 	bl	8003d46 <HAL_I2CEx_ConfigDigitalFilter>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001126:	f000 fc1f 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200002a4 	.word	0x200002a4
 8001134:	40006000 	.word	0x40006000
 8001138:	00c0eaff 	.word	0x00c0eaff

0800113c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b0b0      	sub	sp, #192	; 0xc0
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	2290      	movs	r2, #144	; 0x90
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f006 faa8 	bl	80076b2 <memset>
  if(i2cHandle->Instance==I2C1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a44      	ldr	r2, [pc, #272]	; (8001278 <HAL_I2C_MspInit+0x13c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d13e      	bne.n	80011ea <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800116c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001170:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001172:	2300      	movs	r3, #0
 8001174:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4618      	mov	r0, r3
 800117e:	f003 fb63 	bl	8004848 <HAL_RCCEx_PeriphCLKConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001188:	f000 fbee 	bl	8001968 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4b3b      	ldr	r3, [pc, #236]	; (800127c <HAL_I2C_MspInit+0x140>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4a3a      	ldr	r2, [pc, #232]	; (800127c <HAL_I2C_MspInit+0x140>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	6313      	str	r3, [r2, #48]	; 0x30
 8001198:	4b38      	ldr	r3, [pc, #224]	; (800127c <HAL_I2C_MspInit+0x140>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ac:	2312      	movs	r3, #18
 80011ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011be:	2304      	movs	r3, #4
 80011c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011c8:	4619      	mov	r1, r3
 80011ca:	482d      	ldr	r0, [pc, #180]	; (8001280 <HAL_I2C_MspInit+0x144>)
 80011cc:	f001 fe88 	bl	8002ee0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011d0:	4b2a      	ldr	r3, [pc, #168]	; (800127c <HAL_I2C_MspInit+0x140>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	4a29      	ldr	r2, [pc, #164]	; (800127c <HAL_I2C_MspInit+0x140>)
 80011d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011da:	6413      	str	r3, [r2, #64]	; 0x40
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <HAL_I2C_MspInit+0x140>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80011e8:	e042      	b.n	8001270 <HAL_I2C_MspInit+0x134>
  else if(i2cHandle->Instance==I2C4)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a25      	ldr	r2, [pc, #148]	; (8001284 <HAL_I2C_MspInit+0x148>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d13d      	bne.n	8001270 <HAL_I2C_MspInit+0x134>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80011f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fb1f 	bl	8004848 <HAL_RCCEx_PeriphCLKConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001210:	f000 fbaa 	bl	8001968 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <HAL_I2C_MspInit+0x140>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	4a18      	ldr	r2, [pc, #96]	; (800127c <HAL_I2C_MspInit+0x140>)
 800121a:	f043 0320 	orr.w	r3, r3, #32
 800121e:	6313      	str	r3, [r2, #48]	; 0x30
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <HAL_I2C_MspInit+0x140>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800122c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001230:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001234:	2312      	movs	r3, #18
 8001236:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001246:	2304      	movs	r3, #4
 8001248:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800124c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001250:	4619      	mov	r1, r3
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <HAL_I2C_MspInit+0x14c>)
 8001254:	f001 fe44 	bl	8002ee0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <HAL_I2C_MspInit+0x140>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	4a07      	ldr	r2, [pc, #28]	; (800127c <HAL_I2C_MspInit+0x140>)
 800125e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001262:	6413      	str	r3, [r2, #64]	; 0x40
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_I2C_MspInit+0x140>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	bf00      	nop
 8001272:	37c0      	adds	r7, #192	; 0xc0
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40005400 	.word	0x40005400
 800127c:	40023800 	.word	0x40023800
 8001280:	40020400 	.word	0x40020400
 8001284:	40006000 	.word	0x40006000
 8001288:	40021400 	.word	0x40021400

0800128c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001290:	f3bf 8f4f 	dsb	sy
}
 8001294:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001296:	f3bf 8f6f 	isb	sy
}
 800129a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <SCB_EnableICache+0x48>)
 800129e:	2200      	movs	r2, #0
 80012a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <SCB_EnableICache+0x48>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <SCB_EnableICache+0x48>)
 80012b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ba:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012bc:	f3bf 8f4f 	dsb	sy
}
 80012c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012c2:	f3bf 8f6f 	isb	sy
}
 80012c6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <SCB_EnableDCache+0x84>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80012e6:	f3bf 8f4f 	dsb	sy
}
 80012ea:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <SCB_EnableDCache+0x84>)
 80012ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012f2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	0b5b      	lsrs	r3, r3, #13
 80012f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012fc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	08db      	lsrs	r3, r3, #3
 8001302:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001306:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	015a      	lsls	r2, r3, #5
 800130c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001310:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001316:	4911      	ldr	r1, [pc, #68]	; (800135c <SCB_EnableDCache+0x84>)
 8001318:	4313      	orrs	r3, r2
 800131a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	1e5a      	subs	r2, r3, #1
 8001322:	60ba      	str	r2, [r7, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1ef      	bne.n	8001308 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	1e5a      	subs	r2, r3, #1
 800132c:	60fa      	str	r2, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1e5      	bne.n	80012fe <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001332:	f3bf 8f4f 	dsb	sy
}
 8001336:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <SCB_EnableDCache+0x84>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <SCB_EnableDCache+0x84>)
 800133e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001342:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001344:	f3bf 8f4f 	dsb	sy
}
 8001348:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800134a:	f3bf 8f6f 	isb	sy
}
 800134e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001366:	f7ff ff91 	bl	800128c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800136a:	f7ff ffb5 	bl	80012d8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800136e:	f001 fc1b 	bl	8002ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001372:	f000 f8c7 	bl	8001504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001376:	f7ff fd1f 	bl	8000db8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800137a:	f000 fde5 	bl	8001f48 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 800137e:	f000 fb3f 	bl	8001a00 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001382:	f000 fd07 	bl	8001d94 <MX_TIM1_Init>
  MX_RNG_Init();
 8001386:	f000 faf3 	bl	8001970 <MX_RNG_Init>
  MX_I2C4_Init();
 800138a:	f7ff fe97 	bl	80010bc <MX_I2C4_Init>
  MX_TIM2_Init();
 800138e:	f000 fd55 	bl	8001e3c <MX_TIM2_Init>
  MX_I2C1_Init();
 8001392:	f7ff fe53 	bl	800103c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001396:	f000 fe07 	bl	8001fa8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 800139a:	f001 f8fd 	bl	8002598 <ILI9341_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800139e:	4850      	ldr	r0, [pc, #320]	; (80014e0 <main+0x180>)
 80013a0:	f004 fa9e 	bl	80058e0 <HAL_TIM_Base_Start_IT>
  DF_Init(30);
 80013a4:	201e      	movs	r0, #30
 80013a6:	f7ff f97f 	bl	80006a8 <DF_Init>
  /* USER CODE END 2 */
     DF_PlayFromStart();
 80013aa:	f7ff f95f 	bl	800066c <DF_PlayFromStart>
     DF_SetEQ(3);
 80013ae:	2003      	movs	r0, #3
 80013b0:	f7ff f968 	bl	8000684 <DF_SetEQ>
     DS3231_Init(&hi2c4);
 80013b4:	484b      	ldr	r0, [pc, #300]	; (80014e4 <main+0x184>)
 80013b6:	f7ff fa1d 	bl	80007f4 <DS3231_Init>
  __ASM volatile ("cpsid i" : : : "memory");
 80013ba:	b672      	cpsid	i
}
 80013bc:	bf00      	nop
    __disable_irq();
    	//Set interrupt mode to square wave mode, enable square wave interrupt at pin 3.
    	DS3231_SetInterruptMode(DS3231_SQUARE_WAVE_INTERRUPT);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff fa72 	bl	80008a8 <DS3231_SetInterruptMode>
    	//Set interrupting frequency to 1 Hz.
    	DS3231_SetRateSelect(DS3231_1HZ);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff fa8f 	bl	80008e8 <DS3231_SetRateSelect>
  __ASM volatile ("cpsie i" : : : "memory");
 80013ca:	b662      	cpsie	i
}
 80013cc:	bf00      	nop

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    ILI9341_Fill_Screen(WHITE);
 80013ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013d2:	f001 fa8d 	bl	80028f0 <ILI9341_Fill_Screen>
    ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80013d6:	2001      	movs	r0, #1
 80013d8:	f001 f880 	bl	80024dc <ILI9341_Set_Rotation>
     starttime = count;
 80013dc:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <main+0x188>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a42      	ldr	r2, [pc, #264]	; (80014ec <main+0x18c>)
 80013e2:	6013      	str	r3, [r2, #0]

     cmdBuffer[0] = 0x03;
 80013e4:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <main+0x190>)
 80013e6:	2203      	movs	r2, #3
 80013e8:	701a      	strb	r2, [r3, #0]
     cmdBuffer[1] = 0x00;
 80013ea:	4b41      	ldr	r3, [pc, #260]	; (80014f0 <main+0x190>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	705a      	strb	r2, [r3, #1]
     cmdBuffer[2] = 0x04;
 80013f0:	4b3f      	ldr	r3, [pc, #252]	; (80014f0 <main+0x190>)
 80013f2:	2204      	movs	r2, #4
 80013f4:	709a      	strb	r2, [r3, #2]
     //DS3231_SetFullDate(13, 10, 5, 2023);
     DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f7ff fa56 	bl	80008a8 <DS3231_SetInterruptMode>
     	DS3231_ClearAlarm1Flag();
 80013fc:	f7ff faef 	bl	80009de <DS3231_ClearAlarm1Flag>

     	DS3231_EnableAlarm1(DS3231_ENABLED);
 8001400:	2001      	movs	r0, #1
 8001402:	f7ff faca 	bl	800099a <DS3231_EnableAlarm1>
     		DS3231_SetAlarm1Mode(DS3231_A1_MATCH_S_M_H);
 8001406:	2008      	movs	r0, #8
 8001408:	f7ff fb68 	bl	8000adc <DS3231_SetAlarm1Mode>
     		DS3231_SetAlarm1Second(0);
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff fafc 	bl	8000a0a <DS3231_SetAlarm1Second>
     		DS3231_SetAlarm1Minute(29);
 8001412:	201d      	movs	r0, #29
 8001414:	f7ff fb1c 	bl	8000a50 <DS3231_SetAlarm1Minute>
     		DS3231_SetAlarm1Hour(19);
 8001418:	2013      	movs	r0, #19
 800141a:	f7ff fb3c 	bl	8000a96 <DS3231_SetAlarm1Hour>
     ILI9341_Draw_Rectangle(0,0, 320,200,  WHITE);
 800141e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	23c8      	movs	r3, #200	; 0xc8
 8001426:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800142a:	2100      	movs	r1, #0
 800142c:	2000      	movs	r0, #0
 800142e:	f001 fb5f 	bl	8002af0 <ILI9341_Draw_Rectangle>
   while (1)
   {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	   if((count-starttime) > 1000 && screen == 1){
 8001432:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <main+0x188>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <main+0x18c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001440:	d90b      	bls.n	800145a <main+0xfa>
 8001442:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <main+0x194>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d107      	bne.n	800145a <main+0xfa>
	    		updateT();
 800144a:	f000 f99f 	bl	800178c <updateT>
	    		showT();
 800144e:	f000 f9db 	bl	8001808 <showT>
	    		starttime = count;
 8001452:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <main+0x188>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a25      	ldr	r2, [pc, #148]	; (80014ec <main+0x18c>)
 8001458:	6013      	str	r3, [r2, #0]
	    	  }

	   Check_Key();
 800145a:	f7ff f971 	bl	8000740 <Check_Key>


	    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 800145e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001462:	4825      	ldr	r0, [pc, #148]	; (80014f8 <main+0x198>)
 8001464:	f001 fee8 	bl	8003238 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b01      	cmp	r3, #1
 800146c:	d10f      	bne.n	800148e <main+0x12e>
	    		 HAL_Delay(50);
 800146e:	2032      	movs	r0, #50	; 0x32
 8001470:	f001 fc00 	bl	8002c74 <HAL_Delay>
	    		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8001474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001478:	481f      	ldr	r0, [pc, #124]	; (80014f8 <main+0x198>)
 800147a:	f001 fedd 	bl	8003238 <HAL_GPIO_ReadPin>
 800147e:	4603      	mov	r3, r0
 8001480:	2b01      	cmp	r3, #1
 8001482:	d104      	bne.n	800148e <main+0x12e>
	    			DS3231_SetFullTime(21 , 12, 30);
 8001484:	221e      	movs	r2, #30
 8001486:	210c      	movs	r1, #12
 8001488:	2015      	movs	r0, #21
 800148a:	f7ff fc41 	bl	8000d10 <DS3231_SetFullTime>
	    		}
	    	 }
		if(alarmtrigger)
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <main+0x19c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00f      	beq.n	80014b6 <main+0x156>
			   {
					ILI9341_Fill_Screen(WHITE);
 8001496:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800149a:	f001 fa29 	bl	80028f0 <ILI9341_Fill_Screen>
				   alarm();
 800149e:	f000 f961 	bl	8001764 <alarm>
				   screen = 2;
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <main+0x194>)
 80014a4:	2202      	movs	r2, #2
 80014a6:	701a      	strb	r2, [r3, #0]
				   alarmtime = count;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <main+0x188>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <main+0x1a0>)
 80014ae:	6013      	str	r3, [r2, #0]
				   alarmtrigger = 0;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <main+0x19c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
				   //HAL_Delay(3000)
			   }
		if(count - alarmtime > 3000 && screen == 2){
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <main+0x188>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <main+0x1a0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d9b4      	bls.n	8001432 <main+0xd2>
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <main+0x194>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d1b0      	bne.n	8001432 <main+0xd2>
			ILI9341_Fill_Screen(WHITE);
 80014d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014d4:	f001 fa0c 	bl	80028f0 <ILI9341_Fill_Screen>
			screen = 1;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <main+0x194>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
	   if((count-starttime) > 1000 && screen == 1){
 80014de:	e7a8      	b.n	8001432 <main+0xd2>
 80014e0:	20000430 	.word	0x20000430
 80014e4:	200002a4 	.word	0x200002a4
 80014e8:	200002f8 	.word	0x200002f8
 80014ec:	200002fc 	.word	0x200002fc
 80014f0:	2000031c 	.word	0x2000031c
 80014f4:	20000004 	.word	0x20000004
 80014f8:	40020800 	.word	0x40020800
 80014fc:	20000310 	.word	0x20000310
 8001500:	20000300 	.word	0x20000300

08001504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b094      	sub	sp, #80	; 0x50
 8001508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	2234      	movs	r2, #52	; 0x34
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f006 f8cd 	bl	80076b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001528:	f002 fc5a 	bl	8003de0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <SystemClock_Config+0xd8>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	4a2a      	ldr	r2, [pc, #168]	; (80015dc <SystemClock_Config+0xd8>)
 8001532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001536:	6413      	str	r3, [r2, #64]	; 0x40
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <SystemClock_Config+0xd8>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001544:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <SystemClock_Config+0xdc>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a25      	ldr	r2, [pc, #148]	; (80015e0 <SystemClock_Config+0xdc>)
 800154a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <SystemClock_Config+0xdc>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800155c:	2301      	movs	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001564:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001566:	2302      	movs	r3, #2
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800156a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800156e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001570:	2304      	movs	r3, #4
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001574:	23c8      	movs	r3, #200	; 0xc8
 8001576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001578:	2302      	movs	r3, #2
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800157c:	2309      	movs	r3, #9
 800157e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001580:	2302      	movs	r3, #2
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4618      	mov	r0, r3
 800158a:	f002 fc89 	bl	8003ea0 <HAL_RCC_OscConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001594:	f000 f9e8 	bl	8001968 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001598:	f002 fc32 	bl	8003e00 <HAL_PWREx_EnableOverDrive>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80015a2:	f000 f9e1 	bl	8001968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a6:	230f      	movs	r3, #15
 80015a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015aa:	2302      	movs	r3, #2
 80015ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2106      	movs	r1, #6
 80015c4:	4618      	mov	r0, r3
 80015c6:	f002 ff19 	bl	80043fc <HAL_RCC_ClockConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80015d0:	f000 f9ca 	bl	8001968 <Error_Handler>
  }
}
 80015d4:	bf00      	nop
 80015d6:	3750      	adds	r7, #80	; 0x50
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40007000 	.word	0x40007000

080015e4 <CRC16_2>:

/* USER CODE BEGIN 4 */
uint16_t CRC16_2(uint8_t *ptr, uint8_t lenght){
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xffff;
 80015f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f4:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 80015f6:	2300      	movs	r3, #0
 80015f8:	737b      	strb	r3, [r7, #13]

	while (lenght--){
 80015fa:	e023      	b.n	8001644 <CRC16_2+0x60>
		crc ^= *ptr++;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b29a      	uxth	r2, r3
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	4053      	eors	r3, r2
 800160a:	81fb      	strh	r3, [r7, #14]

		for (s = 0 ; s <8 ;s++){
 800160c:	2300      	movs	r3, #0
 800160e:	737b      	strb	r3, [r7, #13]
 8001610:	e015      	b.n	800163e <CRC16_2+0x5a>
			if ((crc & 0x01) != 0){
 8001612:	89fb      	ldrh	r3, [r7, #14]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00a      	beq.n	8001632 <CRC16_2+0x4e>
				crc >>= 1;
 800161c:	89fb      	ldrh	r3, [r7, #14]
 800161e:	085b      	lsrs	r3, r3, #1
 8001620:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8001622:	89fb      	ldrh	r3, [r7, #14]
 8001624:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001628:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 800162c:	43db      	mvns	r3, r3
 800162e:	81fb      	strh	r3, [r7, #14]
 8001630:	e002      	b.n	8001638 <CRC16_2+0x54>

			}
			else{
				crc >>= 1;
 8001632:	89fb      	ldrh	r3, [r7, #14]
 8001634:	085b      	lsrs	r3, r3, #1
 8001636:	81fb      	strh	r3, [r7, #14]
		for (s = 0 ; s <8 ;s++){
 8001638:	7b7b      	ldrb	r3, [r7, #13]
 800163a:	3301      	adds	r3, #1
 800163c:	737b      	strb	r3, [r7, #13]
 800163e:	7b7b      	ldrb	r3, [r7, #13]
 8001640:	2b07      	cmp	r3, #7
 8001642:	d9e6      	bls.n	8001612 <CRC16_2+0x2e>
	while (lenght--){
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	1e5a      	subs	r2, r3, #1
 8001648:	70fa      	strb	r2, [r7, #3]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1d6      	bne.n	80015fc <CRC16_2+0x18>
			}
		}
	}
	return crc;
 800164e:	89fb      	ldrh	r3, [r7, #14]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <updateSensor>:

void updateSensor() {
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af02      	add	r7, sp, #8
			HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1 , cmdBuffer, 3, 200);
 8001662:	23c8      	movs	r3, #200	; 0xc8
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2303      	movs	r3, #3
 8001668:	4a39      	ldr	r2, [pc, #228]	; (8001750 <updateSensor+0xf4>)
 800166a:	21b8      	movs	r1, #184	; 0xb8
 800166c:	4839      	ldr	r0, [pc, #228]	; (8001754 <updateSensor+0xf8>)
 800166e:	f001 fec9 	bl	8003404 <HAL_I2C_Master_Transmit>

		  	HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1 , cmdBuffer, 3, 200);
 8001672:	23c8      	movs	r3, #200	; 0xc8
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2303      	movs	r3, #3
 8001678:	4a35      	ldr	r2, [pc, #212]	; (8001750 <updateSensor+0xf4>)
 800167a:	21b8      	movs	r1, #184	; 0xb8
 800167c:	4835      	ldr	r0, [pc, #212]	; (8001754 <updateSensor+0xf8>)
 800167e:	f001 fec1 	bl	8003404 <HAL_I2C_Master_Transmit>

		  	HAL_Delay(1);
 8001682:	2001      	movs	r0, #1
 8001684:	f001 faf6 	bl	8002c74 <HAL_Delay>

		  	// receive sensor data

		  	HAL_I2C_Master_Receive(&hi2c1, 0x5c << 1 , dataBuffer , 8, 200);
 8001688:	23c8      	movs	r3, #200	; 0xc8
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2308      	movs	r3, #8
 800168e:	4a32      	ldr	r2, [pc, #200]	; (8001758 <updateSensor+0xfc>)
 8001690:	21b8      	movs	r1, #184	; 0xb8
 8001692:	4830      	ldr	r0, [pc, #192]	; (8001754 <updateSensor+0xf8>)
 8001694:	f001 ffaa 	bl	80035ec <HAL_I2C_Master_Receive>

		  	uint16_t Rcrc = dataBuffer[7] << 8 ;
 8001698:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <updateSensor+0xfc>)
 800169a:	79db      	ldrb	r3, [r3, #7]
 800169c:	b29b      	uxth	r3, r3
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	80fb      	strh	r3, [r7, #6]
		  	Rcrc += dataBuffer[6];
 80016a2:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <updateSensor+0xfc>)
 80016a4:	799b      	ldrb	r3, [r3, #6]
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	4413      	add	r3, r2
 80016ac:	80fb      	strh	r3, [r7, #6]

		  	if (Rcrc == CRC16_2(dataBuffer,6)){
 80016ae:	2106      	movs	r1, #6
 80016b0:	4829      	ldr	r0, [pc, #164]	; (8001758 <updateSensor+0xfc>)
 80016b2:	f7ff ff97 	bl	80015e4 <CRC16_2>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	4293      	cmp	r3, r2
 80016be:	d143      	bne.n	8001748 <updateSensor+0xec>
		  		uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8 ) + dataBuffer[5];
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <updateSensor+0xfc>)
 80016c2:	791b      	ldrb	r3, [r3, #4]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <updateSensor+0xfc>)
 80016d0:	795b      	ldrb	r3, [r3, #5]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	80bb      	strh	r3, [r7, #4]

		  		temp = temperature  / 10.0 ;
 80016d8:	88bb      	ldrh	r3, [r7, #4]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016e2:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80016e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <updateSensor+0x100>)
 80016f0:	edc3 7a00 	vstr	s15, [r3]

		  		temp = (((dataBuffer[4] & 0x80) >> 7 ) == 1)? (temp * (-1)) : temp ;
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <updateSensor+0xfc>)
 80016f6:	791b      	ldrb	r3, [r3, #4]
 80016f8:	09db      	lsrs	r3, r3, #7
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d105      	bne.n	800170c <updateSensor+0xb0>
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <updateSensor+0x100>)
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	eef1 7a67 	vneg.f32	s15, s15
 800170a:	e002      	b.n	8001712 <updateSensor+0xb6>
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <updateSensor+0x100>)
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <updateSensor+0x100>)
 8001714:	edc3 7a00 	vstr	s15, [r3]

		  		uint16_t humi = (dataBuffer[2] << 8) + dataBuffer[3] ;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <updateSensor+0xfc>)
 800171a:	789b      	ldrb	r3, [r3, #2]
 800171c:	b29b      	uxth	r3, r3
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	b29a      	uxth	r2, r3
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <updateSensor+0xfc>)
 8001724:	78db      	ldrb	r3, [r3, #3]
 8001726:	b29b      	uxth	r3, r3
 8001728:	4413      	add	r3, r2
 800172a:	807b      	strh	r3, [r7, #2]
		  		RH = humi / 10.0 ;
 800172c:	887b      	ldrh	r3, [r7, #2]
 800172e:	ee07 3a90 	vmov	s15, r3
 8001732:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001736:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800173a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800173e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <updateSensor+0x104>)
 8001744:	edc3 7a00 	vstr	s15, [r3]
		  	}
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	2000031c 	.word	0x2000031c
 8001754:	20000250 	.word	0x20000250
 8001758:	20000320 	.word	0x20000320
 800175c:	20000314 	.word	0x20000314
 8001760:	20000318 	.word	0x20000318

08001764 <alarm>:

void alarm(){
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("ALARM TRIGGER", 50,50, BLACK, 4, WHITE);
 800176a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	2304      	movs	r3, #4
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2300      	movs	r3, #0
 8001776:	2232      	movs	r2, #50	; 0x32
 8001778:	2132      	movs	r1, #50	; 0x32
 800177a:	4803      	ldr	r0, [pc, #12]	; (8001788 <alarm+0x24>)
 800177c:	f000 fdae 	bl	80022dc <ILI9341_Draw_Text>
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	08009860 	.word	0x08009860

0800178c <updateT>:

 void updateT(){
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
 	sec = DS3231_GetSecond();
 8001790:	f7ff fa79 	bl	8000c86 <DS3231_GetSecond>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <updateT+0x60>)
 800179a:	701a      	strb	r2, [r3, #0]
 	min = DS3231_GetMinute();
 800179c:	f7ff fa67 	bl	8000c6e <DS3231_GetMinute>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <updateT+0x64>)
 80017a6:	701a      	strb	r2, [r3, #0]
 	hur = DS3231_GetHour();
 80017a8:	f7ff fa55 	bl	8000c56 <DS3231_GetHour>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <updateT+0x68>)
 80017b2:	701a      	strb	r2, [r3, #0]
 	dow = DS3231_GetDayOfWeek();
 80017b4:	f7ff f9ff 	bl	8000bb6 <DS3231_GetDayOfWeek>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <updateT+0x6c>)
 80017be:	701a      	strb	r2, [r3, #0]
 	date = DS3231_GetDate();
 80017c0:	f7ff fa05 	bl	8000bce <DS3231_GetDate>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <updateT+0x70>)
 80017ca:	701a      	strb	r2, [r3, #0]
 	month = DS3231_GetMonth()-1;
 80017cc:	f7ff fa0b 	bl	8000be6 <DS3231_GetMonth>
 80017d0:	4603      	mov	r3, r0
 80017d2:	3b01      	subs	r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <updateT+0x74>)
 80017d8:	701a      	strb	r2, [r3, #0]
 	year = DS3231_GetYear();
 80017da:	f7ff fa13 	bl	8000c04 <DS3231_GetYear>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <updateT+0x78>)
 80017e4:	601a      	str	r2, [r3, #0]

 }
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000304 	.word	0x20000304
 80017f0:	20000305 	.word	0x20000305
 80017f4:	20000306 	.word	0x20000306
 80017f8:	20000307 	.word	0x20000307
 80017fc:	20000308 	.word	0x20000308
 8001800:	20000309 	.word	0x20000309
 8001804:	2000030c 	.word	0x2000030c

08001808 <showT>:
 void showT(){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af02      	add	r7, sp, #8

	updateSensor();
 800180e:	f7ff ff25 	bl	800165c <updateSensor>

 	sprintf(strH,"%02d",hur);
 8001812:	4b42      	ldr	r3, [pc, #264]	; (800191c <showT+0x114>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	4941      	ldr	r1, [pc, #260]	; (8001920 <showT+0x118>)
 800181a:	4842      	ldr	r0, [pc, #264]	; (8001924 <showT+0x11c>)
 800181c:	f005 fee6 	bl	80075ec <siprintf>
 	sprintf(strM,"%02d",min);
 8001820:	4b41      	ldr	r3, [pc, #260]	; (8001928 <showT+0x120>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	493e      	ldr	r1, [pc, #248]	; (8001920 <showT+0x118>)
 8001828:	4840      	ldr	r0, [pc, #256]	; (800192c <showT+0x124>)
 800182a:	f005 fedf 	bl	80075ec <siprintf>
 	sprintf(strS,"%02d",sec);
 800182e:	4b40      	ldr	r3, [pc, #256]	; (8001930 <showT+0x128>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	493a      	ldr	r1, [pc, #232]	; (8001920 <showT+0x118>)
 8001836:	483f      	ldr	r0, [pc, #252]	; (8001934 <showT+0x12c>)
 8001838:	f005 fed8 	bl	80075ec <siprintf>

 	sprintf(strsensor,"%.1f C %.1f %%RH",temp,RH);
 800183c:	4b3e      	ldr	r3, [pc, #248]	; (8001938 <showT+0x130>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001846:	4b3d      	ldr	r3, [pc, #244]	; (800193c <showT+0x134>)
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001850:	ed8d 7b00 	vstr	d7, [sp]
 8001854:	ec53 2b16 	vmov	r2, r3, d6
 8001858:	4939      	ldr	r1, [pc, #228]	; (8001940 <showT+0x138>)
 800185a:	483a      	ldr	r0, [pc, #232]	; (8001944 <showT+0x13c>)
 800185c:	f005 fec6 	bl	80075ec <siprintf>
 	//sprintf(strdow,"%s",day[1]);
	//sprintf(strdate,"%d",date);
//	sprintf(strmonth,"%s",months[month]);
	//sprintf(stryear,"%d",year);

 	snprintf(timedate,50,"%d %s %d",date, months[month], year);
 8001860:	4b39      	ldr	r3, [pc, #228]	; (8001948 <showT+0x140>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	4b39      	ldr	r3, [pc, #228]	; (800194c <showT+0x144>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	4b38      	ldr	r3, [pc, #224]	; (8001950 <showT+0x148>)
 800186e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001872:	4a38      	ldr	r2, [pc, #224]	; (8001954 <showT+0x14c>)
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	9201      	str	r2, [sp, #4]
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	460b      	mov	r3, r1
 800187c:	4a36      	ldr	r2, [pc, #216]	; (8001958 <showT+0x150>)
 800187e:	2132      	movs	r1, #50	; 0x32
 8001880:	4836      	ldr	r0, [pc, #216]	; (800195c <showT+0x154>)
 8001882:	f005 fe7f 	bl	8007584 <sniprintf>

 	ILI9341_Draw_Text(strH, 50,50, BLACK, 7, WHITE);
 8001886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	2307      	movs	r3, #7
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	2300      	movs	r3, #0
 8001892:	2232      	movs	r2, #50	; 0x32
 8001894:	2132      	movs	r1, #50	; 0x32
 8001896:	4823      	ldr	r0, [pc, #140]	; (8001924 <showT+0x11c>)
 8001898:	f000 fd20 	bl	80022dc <ILI9341_Draw_Text>
 	ILI9341_Draw_Text(strM, 120,110, BLACK, 7, WHITE);
 800189c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	2307      	movs	r3, #7
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2300      	movs	r3, #0
 80018a8:	226e      	movs	r2, #110	; 0x6e
 80018aa:	2178      	movs	r1, #120	; 0x78
 80018ac:	481f      	ldr	r0, [pc, #124]	; (800192c <showT+0x124>)
 80018ae:	f000 fd15 	bl	80022dc <ILI9341_Draw_Text>
 	ILI9341_Draw_Text(strS, 190,170, BLACK, 4, WHITE);
 80018b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	2304      	movs	r3, #4
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2300      	movs	r3, #0
 80018be:	22aa      	movs	r2, #170	; 0xaa
 80018c0:	21be      	movs	r1, #190	; 0xbe
 80018c2:	481c      	ldr	r0, [pc, #112]	; (8001934 <showT+0x12c>)
 80018c4:	f000 fd0a 	bl	80022dc <ILI9341_Draw_Text>
 	ILI9341_Draw_Text(day[dow], 10,10 , BLACK, 4, WHITE);
 80018c8:	4b25      	ldr	r3, [pc, #148]	; (8001960 <showT+0x158>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b25      	ldr	r3, [pc, #148]	; (8001964 <showT+0x15c>)
 80018d0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80018d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	2304      	movs	r3, #4
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2300      	movs	r3, #0
 80018e0:	220a      	movs	r2, #10
 80018e2:	210a      	movs	r1, #10
 80018e4:	f000 fcfa 	bl	80022dc <ILI9341_Draw_Text>
 	ILI9341_Draw_Text(strsensor, 80,40 , BLACK, 2, WHITE);
 80018e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	2302      	movs	r3, #2
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	2300      	movs	r3, #0
 80018f4:	2228      	movs	r2, #40	; 0x28
 80018f6:	2150      	movs	r1, #80	; 0x50
 80018f8:	4812      	ldr	r0, [pc, #72]	; (8001944 <showT+0x13c>)
 80018fa:	f000 fcef 	bl	80022dc <ILI9341_Draw_Text>
//	ILI9341_Draw_Text(strdate, 50,210, BLACK, 2, WHITE);
//	ILI9341_Draw_Text(months[month], 80,210, BLACK, 2, WHITE);
//	ILI9341_Draw_Text(stryear, 200,210, BLACK, 2, WHITE);
 	ILI9341_Draw_Text(timedate, 50,210, BLACK, 2, WHITE);
 80018fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	2302      	movs	r3, #2
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2300      	movs	r3, #0
 800190a:	22d2      	movs	r2, #210	; 0xd2
 800190c:	2132      	movs	r1, #50	; 0x32
 800190e:	4813      	ldr	r0, [pc, #76]	; (800195c <showT+0x154>)
 8001910:	f000 fce4 	bl	80022dc <ILI9341_Draw_Text>

 }
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000306 	.word	0x20000306
 8001920:	08009870 	.word	0x08009870
 8001924:	20000330 	.word	0x20000330
 8001928:	20000305 	.word	0x20000305
 800192c:	2000032c 	.word	0x2000032c
 8001930:	20000304 	.word	0x20000304
 8001934:	20000328 	.word	0x20000328
 8001938:	20000314 	.word	0x20000314
 800193c:	20000318 	.word	0x20000318
 8001940:	08009878 	.word	0x08009878
 8001944:	20000368 	.word	0x20000368
 8001948:	20000308 	.word	0x20000308
 800194c:	20000309 	.word	0x20000309
 8001950:	20000024 	.word	0x20000024
 8001954:	2000030c 	.word	0x2000030c
 8001958:	0800988c 	.word	0x0800988c
 800195c:	20000334 	.word	0x20000334
 8001960:	20000307 	.word	0x20000307
 8001964:	20000008 	.word	0x20000008

08001968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800196c:	e7fe      	b.n	800196c <Error_Handler+0x4>
	...

08001970 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_RNG_Init+0x20>)
 8001976:	4a07      	ldr	r2, [pc, #28]	; (8001994 <MX_RNG_Init+0x24>)
 8001978:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_RNG_Init+0x20>)
 800197c:	f003 fb8c 	bl	8005098 <HAL_RNG_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001986:	f7ff ffef 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2000036c 	.word	0x2000036c
 8001994:	50060800 	.word	0x50060800

08001998 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b0a8      	sub	sp, #160	; 0xa0
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	2290      	movs	r2, #144	; 0x90
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f005 fe82 	bl	80076b2 <memset>
  if(rngHandle->Instance==RNG)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a11      	ldr	r2, [pc, #68]	; (80019f8 <HAL_RNG_MspInit+0x60>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d11b      	bne.n	80019f0 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80019b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	4618      	mov	r0, r3
 80019ca:	f002 ff3d 	bl	8004848 <HAL_RCCEx_PeriphCLKConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80019d4:	f7ff ffc8 	bl	8001968 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_RNG_MspInit+0x64>)
 80019da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_RNG_MspInit+0x64>)
 80019de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e2:	6353      	str	r3, [r2, #52]	; 0x34
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_RNG_MspInit+0x64>)
 80019e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80019f0:	bf00      	nop
 80019f2:	37a0      	adds	r7, #160	; 0xa0
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	50060800 	.word	0x50060800
 80019fc:	40023800 	.word	0x40023800

08001a00 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <MX_SPI5_Init+0x74>)
 8001a06:	4a1c      	ldr	r2, [pc, #112]	; (8001a78 <MX_SPI5_Init+0x78>)
 8001a08:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <MX_SPI5_Init+0x74>)
 8001a0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a10:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <MX_SPI5_Init+0x74>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <MX_SPI5_Init+0x74>)
 8001a1a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a1e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_SPI5_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <MX_SPI5_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_SPI5_Init+0x74>)
 8001a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a32:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_SPI5_Init+0x74>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_SPI5_Init+0x74>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_SPI5_Init+0x74>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <MX_SPI5_Init+0x74>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_SPI5_Init+0x74>)
 8001a4e:	2207      	movs	r2, #7
 8001a50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <MX_SPI5_Init+0x74>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_SPI5_Init+0x74>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_SPI5_Init+0x74>)
 8001a60:	f003 fb44 	bl	80050ec <HAL_SPI_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001a6a:	f7ff ff7d 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000037c 	.word	0x2000037c
 8001a78:	40015000 	.word	0x40015000

08001a7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	; 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <HAL_SPI_MspInit+0x7c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d128      	bne.n	8001af0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_SPI_MspInit+0x80>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a16      	ldr	r2, [pc, #88]	; (8001afc <HAL_SPI_MspInit+0x80>)
 8001aa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b14      	ldr	r3, [pc, #80]	; (8001afc <HAL_SPI_MspInit+0x80>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_SPI_MspInit+0x80>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a10      	ldr	r2, [pc, #64]	; (8001afc <HAL_SPI_MspInit+0x80>)
 8001abc:	f043 0320 	orr.w	r3, r3, #32
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_SPI_MspInit+0x80>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0320 	and.w	r3, r3, #32
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001ace:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001ae0:	2305      	movs	r3, #5
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <HAL_SPI_MspInit+0x84>)
 8001aec:	f001 f9f8 	bl	8002ee0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001af0:	bf00      	nop
 8001af2:	3728      	adds	r7, #40	; 0x28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40015000 	.word	0x40015000
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40021400 	.word	0x40021400

08001b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_MspInit+0x44>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <HAL_MspInit+0x44>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <HAL_MspInit+0x44>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_MspInit+0x44>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_MspInit+0x44>)
 8001b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_MspInit+0x44>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800

08001b4c <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b50:	f001 f870 	bl	8002c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	count++;
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <TIM2_IRQHandler+0x18>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	4a03      	ldr	r2, [pc, #12]	; (8001b70 <TIM2_IRQHandler+0x18>)
 8001b64:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b66:	4803      	ldr	r0, [pc, #12]	; (8001b74 <TIM2_IRQHandler+0x1c>)
 8001b68:	f003 ff32 	bl	80059d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200002f8 	.word	0x200002f8
 8001b74:	20000430 	.word	0x20000430

08001b78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(DS3231_IsAlarm1Triggered()){
 8001b7c:	f7ff f810 	bl	8000ba0 <DS3231_IsAlarm1Triggered>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <EXTI15_10_IRQHandler+0x14>
			alarmtrigger = 1;
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <EXTI15_10_IRQHandler+0x20>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
		}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b90:	f001 fb84 	bl	800329c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000310 	.word	0x20000310

08001b9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
	return 1;
 8001ba0:	2301      	movs	r3, #1
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_kill>:

int _kill(int pid, int sig)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bb6:	f005 fdcf 	bl	8007758 <__errno>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2216      	movs	r2, #22
 8001bbe:	601a      	str	r2, [r3, #0]
	return -1;
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_exit>:

void _exit (int status)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ffe7 	bl	8001bac <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bde:	e7fe      	b.n	8001bde <_exit+0x12>

08001be0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	e00a      	b.n	8001c08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bf2:	f3af 8000 	nop.w
 8001bf6:	4601      	mov	r1, r0
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	60ba      	str	r2, [r7, #8]
 8001bfe:	b2ca      	uxtb	r2, r1
 8001c00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dbf0      	blt.n	8001bf2 <_read+0x12>
	}

return len;
 8001c10:	687b      	ldr	r3, [r7, #4]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	e009      	b.n	8001c40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	60ba      	str	r2, [r7, #8]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dbf1      	blt.n	8001c2c <_write+0x12>
	}
	return len;
 8001c48:	687b      	ldr	r3, [r7, #4]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <_close>:

int _close(int file)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
	return -1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c7a:	605a      	str	r2, [r3, #4]
	return 0;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_isatty>:

int _isatty(int file)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
	return 1;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
	return 0;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc4:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <_sbrk+0x5c>)
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <_sbrk+0x60>)
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <_sbrk+0x64>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <_sbrk+0x68>)
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d207      	bcs.n	8001cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cec:	f005 fd34 	bl	8007758 <__errno>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	e009      	b.n	8001d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <_sbrk+0x64>)
 8001d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20080000 	.word	0x20080000
 8001d1c:	00000400 	.word	0x00000400
 8001d20:	200003e0 	.word	0x200003e0
 8001d24:	200006e0 	.word	0x200006e0

08001d28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <SystemInit+0x5c>)
 8001d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d32:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <SystemInit+0x5c>)
 8001d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <SystemInit+0x60>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a11      	ldr	r2, [pc, #68]	; (8001d88 <SystemInit+0x60>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <SystemInit+0x60>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <SystemInit+0x60>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	490d      	ldr	r1, [pc, #52]	; (8001d88 <SystemInit+0x60>)
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <SystemInit+0x64>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <SystemInit+0x60>)
 8001d5c:	4a0c      	ldr	r2, [pc, #48]	; (8001d90 <SystemInit+0x68>)
 8001d5e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <SystemInit+0x60>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a08      	ldr	r2, [pc, #32]	; (8001d88 <SystemInit+0x60>)
 8001d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <SystemInit+0x60>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SystemInit+0x5c>)
 8001d74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d78:	609a      	str	r2, [r3, #8]
#endif
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	fef6ffff 	.word	0xfef6ffff
 8001d90:	24003010 	.word	0x24003010

08001d94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <MX_TIM1_Init+0xa0>)
 8001db4:	4a20      	ldr	r2, [pc, #128]	; (8001e38 <MX_TIM1_Init+0xa4>)
 8001db6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8001db8:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <MX_TIM1_Init+0xa0>)
 8001dba:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc0:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <MX_TIM1_Init+0xa0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <MX_TIM1_Init+0xa0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <MX_TIM1_Init+0xa0>)
 8001dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <MX_TIM1_Init+0xa0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dda:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <MX_TIM1_Init+0xa0>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001de0:	4814      	ldr	r0, [pc, #80]	; (8001e34 <MX_TIM1_Init+0xa0>)
 8001de2:	f003 fd25 	bl	8005830 <HAL_TIM_Base_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001dec:	f7ff fdbc 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001df6:	f107 0310 	add.w	r3, r7, #16
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	480d      	ldr	r0, [pc, #52]	; (8001e34 <MX_TIM1_Init+0xa0>)
 8001dfe:	f003 ff07 	bl	8005c10 <HAL_TIM_ConfigClockSource>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001e08:	f7ff fdae 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4805      	ldr	r0, [pc, #20]	; (8001e34 <MX_TIM1_Init+0xa0>)
 8001e1e:	f004 f92d 	bl	800607c <HAL_TIMEx_MasterConfigSynchronization>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001e28:	f7ff fd9e 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e2c:	bf00      	nop
 8001e2e:	3720      	adds	r7, #32
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200003e4 	.word	0x200003e4
 8001e38:	40010000 	.word	0x40010000

08001e3c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e42:	f107 0310 	add.w	r3, r7, #16
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001e5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001e64:	2263      	movs	r2, #99	; 0x63
 8001e66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001e6e:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001e70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e82:	4814      	ldr	r0, [pc, #80]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001e84:	f003 fcd4 	bl	8005830 <HAL_TIM_Base_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001e8e:	f7ff fd6b 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e98:	f107 0310 	add.w	r3, r7, #16
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001ea0:	f003 feb6 	bl	8005c10 <HAL_TIM_ConfigClockSource>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001eaa:	f7ff fd5d 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <MX_TIM2_Init+0x98>)
 8001ebc:	f004 f8de 	bl	800607c <HAL_TIMEx_MasterConfigSynchronization>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001ec6:	f7ff fd4f 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	3720      	adds	r7, #32
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000430 	.word	0x20000430

08001ed8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <HAL_TIM_Base_MspInit+0x68>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d10c      	bne.n	8001f04 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_TIM_Base_MspInit+0x6c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	4a15      	ldr	r2, [pc, #84]	; (8001f44 <HAL_TIM_Base_MspInit+0x6c>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_TIM_Base_MspInit+0x6c>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f02:	e018      	b.n	8001f36 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0c:	d113      	bne.n	8001f36 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_TIM_Base_MspInit+0x6c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a0c      	ldr	r2, [pc, #48]	; (8001f44 <HAL_TIM_Base_MspInit+0x6c>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_TIM_Base_MspInit+0x6c>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	201c      	movs	r0, #28
 8001f2c:	f000 ffa1 	bl	8002e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f30:	201c      	movs	r0, #28
 8001f32:	f000 ffba 	bl	8002eaa <HAL_NVIC_EnableIRQ>
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40010000 	.word	0x40010000
 8001f44:	40023800 	.word	0x40023800

08001f48 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f4c:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f4e:	4a15      	ldr	r2, [pc, #84]	; (8001fa4 <MX_USART3_UART_Init+0x5c>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <MX_USART3_UART_Init+0x58>)
 8001f8c:	f004 f922 	bl	80061d4 <HAL_UART_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f96:	f7ff fce7 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000047c 	.word	0x2000047c
 8001fa4:	40004800 	.word	0x40004800

08001fa8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <MX_USART6_UART_Init+0x58>)
 8001fae:	4a15      	ldr	r2, [pc, #84]	; (8002004 <MX_USART6_UART_Init+0x5c>)
 8001fb0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001fb2:	4b13      	ldr	r3, [pc, #76]	; (8002000 <MX_USART6_UART_Init+0x58>)
 8001fb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fb8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_USART6_UART_Init+0x58>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <MX_USART6_UART_Init+0x58>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <MX_USART6_UART_Init+0x58>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <MX_USART6_UART_Init+0x58>)
 8001fce:	220c      	movs	r2, #12
 8001fd0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <MX_USART6_UART_Init+0x58>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <MX_USART6_UART_Init+0x58>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <MX_USART6_UART_Init+0x58>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <MX_USART6_UART_Init+0x58>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_USART6_UART_Init+0x58>)
 8001fec:	f004 f8f2 	bl	80061d4 <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001ff6:	f7ff fcb7 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000504 	.word	0x20000504
 8002004:	40011400 	.word	0x40011400

08002008 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b0b0      	sub	sp, #192	; 0xc0
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002020:	f107 031c 	add.w	r3, r7, #28
 8002024:	2290      	movs	r2, #144	; 0x90
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f005 fb42 	bl	80076b2 <memset>
  if(uartHandle->Instance==USART3)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a43      	ldr	r2, [pc, #268]	; (8002140 <HAL_UART_MspInit+0x138>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d13d      	bne.n	80020b4 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002038:	f44f 7380 	mov.w	r3, #256	; 0x100
 800203c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800203e:	2300      	movs	r3, #0
 8002040:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002042:	f107 031c 	add.w	r3, r7, #28
 8002046:	4618      	mov	r0, r3
 8002048:	f002 fbfe 	bl	8004848 <HAL_RCCEx_PeriphCLKConfig>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002052:	f7ff fc89 	bl	8001968 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002056:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <HAL_UART_MspInit+0x13c>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	4a3a      	ldr	r2, [pc, #232]	; (8002144 <HAL_UART_MspInit+0x13c>)
 800205c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002060:	6413      	str	r3, [r2, #64]	; 0x40
 8002062:	4b38      	ldr	r3, [pc, #224]	; (8002144 <HAL_UART_MspInit+0x13c>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206a:	61bb      	str	r3, [r7, #24]
 800206c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800206e:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HAL_UART_MspInit+0x13c>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a34      	ldr	r2, [pc, #208]	; (8002144 <HAL_UART_MspInit+0x13c>)
 8002074:	f043 0308 	orr.w	r3, r3, #8
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b32      	ldr	r3, [pc, #200]	; (8002144 <HAL_UART_MspInit+0x13c>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002086:	f44f 7340 	mov.w	r3, #768	; 0x300
 800208a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020a0:	2307      	movs	r3, #7
 80020a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020aa:	4619      	mov	r1, r3
 80020ac:	4826      	ldr	r0, [pc, #152]	; (8002148 <HAL_UART_MspInit+0x140>)
 80020ae:	f000 ff17 	bl	8002ee0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80020b2:	e040      	b.n	8002136 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART6)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a24      	ldr	r2, [pc, #144]	; (800214c <HAL_UART_MspInit+0x144>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d13b      	bne.n	8002136 <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80020be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80020c4:	2300      	movs	r3, #0
 80020c6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c8:	f107 031c 	add.w	r3, r7, #28
 80020cc:	4618      	mov	r0, r3
 80020ce:	f002 fbbb 	bl	8004848 <HAL_RCCEx_PeriphCLKConfig>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80020d8:	f7ff fc46 	bl	8001968 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_UART_MspInit+0x13c>)
 80020de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e0:	4a18      	ldr	r2, [pc, #96]	; (8002144 <HAL_UART_MspInit+0x13c>)
 80020e2:	f043 0320 	orr.w	r3, r3, #32
 80020e6:	6453      	str	r3, [r2, #68]	; 0x44
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_UART_MspInit+0x13c>)
 80020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <HAL_UART_MspInit+0x13c>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	4a12      	ldr	r2, [pc, #72]	; (8002144 <HAL_UART_MspInit+0x13c>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_UART_MspInit+0x13c>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800210c:	23c0      	movs	r3, #192	; 0xc0
 800210e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	2302      	movs	r3, #2
 8002114:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211e:	2303      	movs	r3, #3
 8002120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002124:	2308      	movs	r3, #8
 8002126:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800212e:	4619      	mov	r1, r3
 8002130:	4807      	ldr	r0, [pc, #28]	; (8002150 <HAL_UART_MspInit+0x148>)
 8002132:	f000 fed5 	bl	8002ee0 <HAL_GPIO_Init>
}
 8002136:	bf00      	nop
 8002138:	37c0      	adds	r7, #192	; 0xc0
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40004800 	.word	0x40004800
 8002144:	40023800 	.word	0x40023800
 8002148:	40020c00 	.word	0x40020c00
 800214c:	40011400 	.word	0x40011400
 8002150:	40020800 	.word	0x40020800

08002154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800218c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002158:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800215a:	e003      	b.n	8002164 <LoopCopyDataInit>

0800215c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800215e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002160:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002162:	3104      	adds	r1, #4

08002164 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002164:	480b      	ldr	r0, [pc, #44]	; (8002194 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002168:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800216a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800216c:	d3f6      	bcc.n	800215c <CopyDataInit>
  ldr  r2, =_sbss
 800216e:	4a0b      	ldr	r2, [pc, #44]	; (800219c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002170:	e002      	b.n	8002178 <LoopFillZerobss>

08002172 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002172:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002174:	f842 3b04 	str.w	r3, [r2], #4

08002178 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800217a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800217c:	d3f9      	bcc.n	8002172 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800217e:	f7ff fdd3 	bl	8001d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002182:	f005 faef 	bl	8007764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002186:	f7ff f8eb 	bl	8001360 <main>
  bx  lr    
 800218a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800218c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002190:	08009e74 	.word	0x08009e74
  ldr  r0, =_sdata
 8002194:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002198:	2000022c 	.word	0x2000022c
  ldr  r2, =_sbss
 800219c:	2000022c 	.word	0x2000022c
  ldr  r3, = _ebss
 80021a0:	200006dc 	.word	0x200006dc

080021a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a4:	e7fe      	b.n	80021a4 <ADC_IRQHandler>
	...

080021a8 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b089      	sub	sp, #36	; 0x24
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	4604      	mov	r4, r0
 80021b0:	4608      	mov	r0, r1
 80021b2:	4611      	mov	r1, r2
 80021b4:	461a      	mov	r2, r3
 80021b6:	4623      	mov	r3, r4
 80021b8:	71fb      	strb	r3, [r7, #7]
 80021ba:	4603      	mov	r3, r0
 80021bc:	71bb      	strb	r3, [r7, #6]
 80021be:	460b      	mov	r3, r1
 80021c0:	717b      	strb	r3, [r7, #5]
 80021c2:	4613      	mov	r3, r2
 80021c4:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80021ca:	7dfb      	ldrb	r3, [r7, #23]
 80021cc:	2b1f      	cmp	r3, #31
 80021ce:	d802      	bhi.n	80021d6 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	71fb      	strb	r3, [r7, #7]
 80021d4:	e002      	b.n	80021dc <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	3b20      	subs	r3, #32
 80021da:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80021dc:	2300      	movs	r3, #0
 80021de:	753b      	strb	r3, [r7, #20]
 80021e0:	e012      	b.n	8002208 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80021e2:	7dfa      	ldrb	r2, [r7, #23]
 80021e4:	7d38      	ldrb	r0, [r7, #20]
 80021e6:	7d39      	ldrb	r1, [r7, #20]
 80021e8:	4c3b      	ldr	r4, [pc, #236]	; (80022d8 <ILI9341_Draw_Char+0x130>)
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4423      	add	r3, r4
 80021f4:	4403      	add	r3, r0
 80021f6:	781a      	ldrb	r2, [r3, #0]
 80021f8:	f101 0318 	add.w	r3, r1, #24
 80021fc:	443b      	add	r3, r7
 80021fe:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002202:	7d3b      	ldrb	r3, [r7, #20]
 8002204:	3301      	adds	r3, #1
 8002206:	753b      	strb	r3, [r7, #20]
 8002208:	7d3b      	ldrb	r3, [r7, #20]
 800220a:	2b05      	cmp	r3, #5
 800220c:	d9e9      	bls.n	80021e2 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800220e:	79bb      	ldrb	r3, [r7, #6]
 8002210:	b298      	uxth	r0, r3
 8002212:	797b      	ldrb	r3, [r7, #5]
 8002214:	b299      	uxth	r1, r3
 8002216:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002218:	461a      	mov	r2, r3
 800221a:	0052      	lsls	r2, r2, #1
 800221c:	4413      	add	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	b29c      	uxth	r4, r3
 8002228:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	4623      	mov	r3, r4
 800222e:	f000 fc5f 	bl	8002af0 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002232:	2300      	movs	r3, #0
 8002234:	757b      	strb	r3, [r7, #21]
 8002236:	e047      	b.n	80022c8 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002238:	2300      	movs	r3, #0
 800223a:	75bb      	strb	r3, [r7, #22]
 800223c:	e03e      	b.n	80022bc <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 800223e:	7d7b      	ldrb	r3, [r7, #21]
 8002240:	3318      	adds	r3, #24
 8002242:	443b      	add	r3, r7
 8002244:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002248:	461a      	mov	r2, r3
 800224a:	7dbb      	ldrb	r3, [r7, #22]
 800224c:	fa42 f303 	asr.w	r3, r2, r3
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d02e      	beq.n	80022b6 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8002258:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800225a:	2b01      	cmp	r3, #1
 800225c:	d110      	bne.n	8002280 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 800225e:	79bb      	ldrb	r3, [r7, #6]
 8002260:	b29a      	uxth	r2, r3
 8002262:	7d7b      	ldrb	r3, [r7, #21]
 8002264:	b29b      	uxth	r3, r3
 8002266:	4413      	add	r3, r2
 8002268:	b298      	uxth	r0, r3
 800226a:	797b      	ldrb	r3, [r7, #5]
 800226c:	b29a      	uxth	r2, r3
 800226e:	7dbb      	ldrb	r3, [r7, #22]
 8002270:	b29b      	uxth	r3, r3
 8002272:	4413      	add	r3, r2
 8002274:	b29b      	uxth	r3, r3
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	4619      	mov	r1, r3
 800227a:	f000 fb5f 	bl	800293c <ILI9341_Draw_Pixel>
 800227e:	e01a      	b.n	80022b6 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8002280:	79bb      	ldrb	r3, [r7, #6]
 8002282:	b29a      	uxth	r2, r3
 8002284:	7d7b      	ldrb	r3, [r7, #21]
 8002286:	b29b      	uxth	r3, r3
 8002288:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800228a:	fb11 f303 	smulbb	r3, r1, r3
 800228e:	b29b      	uxth	r3, r3
 8002290:	4413      	add	r3, r2
 8002292:	b298      	uxth	r0, r3
 8002294:	797b      	ldrb	r3, [r7, #5]
 8002296:	b29a      	uxth	r2, r3
 8002298:	7dbb      	ldrb	r3, [r7, #22]
 800229a:	b29b      	uxth	r3, r3
 800229c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800229e:	fb11 f303 	smulbb	r3, r1, r3
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	b299      	uxth	r1, r3
 80022a8:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80022aa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80022ac:	887b      	ldrh	r3, [r7, #2]
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	4623      	mov	r3, r4
 80022b2:	f000 fc1d 	bl	8002af0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80022b6:	7dbb      	ldrb	r3, [r7, #22]
 80022b8:	3301      	adds	r3, #1
 80022ba:	75bb      	strb	r3, [r7, #22]
 80022bc:	7dbb      	ldrb	r3, [r7, #22]
 80022be:	2b07      	cmp	r3, #7
 80022c0:	d9bd      	bls.n	800223e <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80022c2:	7d7b      	ldrb	r3, [r7, #21]
 80022c4:	3301      	adds	r3, #1
 80022c6:	757b      	strb	r3, [r7, #21]
 80022c8:	7d7b      	ldrb	r3, [r7, #21]
 80022ca:	2b05      	cmp	r3, #5
 80022cc:	d9b4      	bls.n	8002238 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80022ce:	bf00      	nop
 80022d0:	bf00      	nop
 80022d2:	371c      	adds	r7, #28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd90      	pop	{r4, r7, pc}
 80022d8:	080098b0 	.word	0x080098b0

080022dc <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b085      	sub	sp, #20
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	4608      	mov	r0, r1
 80022e6:	4611      	mov	r1, r2
 80022e8:	461a      	mov	r2, r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	70fb      	strb	r3, [r7, #3]
 80022ee:	460b      	mov	r3, r1
 80022f0:	70bb      	strb	r3, [r7, #2]
 80022f2:	4613      	mov	r3, r2
 80022f4:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80022f6:	e017      	b.n	8002328 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	7818      	ldrb	r0, [r3, #0]
 8002300:	883c      	ldrh	r4, [r7, #0]
 8002302:	78ba      	ldrb	r2, [r7, #2]
 8002304:	78f9      	ldrb	r1, [r7, #3]
 8002306:	8bbb      	ldrh	r3, [r7, #28]
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	8b3b      	ldrh	r3, [r7, #24]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	4623      	mov	r3, r4
 8002310:	f7ff ff4a 	bl	80021a8 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8002314:	8b3b      	ldrh	r3, [r7, #24]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	0052      	lsls	r2, r2, #1
 800231c:	4413      	add	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	b2da      	uxtb	r2, r3
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	4413      	add	r3, r2
 8002326:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1e3      	bne.n	80022f8 <ILI9341_Draw_Text+0x1c>
    }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	bd90      	pop	{r4, r7, pc}
	...

0800233c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8002340:	f7ff fb5e 	bl	8001a00 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8002344:	f7fe fd38 	bl	8000db8 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002348:	2200      	movs	r2, #0
 800234a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800234e:	4802      	ldr	r0, [pc, #8]	; (8002358 <ILI9341_SPI_Init+0x1c>)
 8002350:	f000 ff8a 	bl	8003268 <HAL_GPIO_WritePin>
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40020800 	.word	0x40020800

0800235c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002366:	1df9      	adds	r1, r7, #7
 8002368:	2301      	movs	r3, #1
 800236a:	2201      	movs	r2, #1
 800236c:	4803      	ldr	r0, [pc, #12]	; (800237c <ILI9341_SPI_Send+0x20>)
 800236e:	f002 ff68 	bl	8005242 <HAL_SPI_Transmit>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	2000037c 	.word	0x2000037c

08002380 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800238a:	2200      	movs	r2, #0
 800238c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002390:	480b      	ldr	r0, [pc, #44]	; (80023c0 <ILI9341_Write_Command+0x40>)
 8002392:	f000 ff69 	bl	8003268 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002396:	2200      	movs	r2, #0
 8002398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800239c:	4808      	ldr	r0, [pc, #32]	; (80023c0 <ILI9341_Write_Command+0x40>)
 800239e:	f000 ff63 	bl	8003268 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ffd9 	bl	800235c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80023aa:	2201      	movs	r2, #1
 80023ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023b0:	4803      	ldr	r0, [pc, #12]	; (80023c0 <ILI9341_Write_Command+0x40>)
 80023b2:	f000 ff59 	bl	8003268 <HAL_GPIO_WritePin>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40020800 	.word	0x40020800

080023c4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80023ce:	2201      	movs	r2, #1
 80023d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023d4:	480b      	ldr	r0, [pc, #44]	; (8002404 <ILI9341_Write_Data+0x40>)
 80023d6:	f000 ff47 	bl	8003268 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023e0:	4808      	ldr	r0, [pc, #32]	; (8002404 <ILI9341_Write_Data+0x40>)
 80023e2:	f000 ff41 	bl	8003268 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ffb7 	bl	800235c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80023ee:	2201      	movs	r2, #1
 80023f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023f4:	4803      	ldr	r0, [pc, #12]	; (8002404 <ILI9341_Write_Data+0x40>)
 80023f6:	f000 ff37 	bl	8003268 <HAL_GPIO_WritePin>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40020800 	.word	0x40020800

08002408 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4604      	mov	r4, r0
 8002410:	4608      	mov	r0, r1
 8002412:	4611      	mov	r1, r2
 8002414:	461a      	mov	r2, r3
 8002416:	4623      	mov	r3, r4
 8002418:	80fb      	strh	r3, [r7, #6]
 800241a:	4603      	mov	r3, r0
 800241c:	80bb      	strh	r3, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	807b      	strh	r3, [r7, #2]
 8002422:	4613      	mov	r3, r2
 8002424:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8002426:	202a      	movs	r0, #42	; 0x2a
 8002428:	f7ff ffaa 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	b29b      	uxth	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ffc5 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff ffc0 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002444:	887b      	ldrh	r3, [r7, #2]
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	b29b      	uxth	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ffb9 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8002452:	887b      	ldrh	r3, [r7, #2]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff ffb4 	bl	80023c4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 800245c:	202b      	movs	r0, #43	; 0x2b
 800245e:	f7ff ff8f 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8002462:	88bb      	ldrh	r3, [r7, #4]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	b29b      	uxth	r3, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ffaa 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002470:	88bb      	ldrh	r3, [r7, #4]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ffa5 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800247a:	883b      	ldrh	r3, [r7, #0]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	b29b      	uxth	r3, r3
 8002480:	b2db      	uxtb	r3, r3
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff9e 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002488:	883b      	ldrh	r3, [r7, #0]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff99 	bl	80023c4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8002492:	202c      	movs	r0, #44	; 0x2c
 8002494:	f7ff ff74 	bl	8002380 <ILI9341_Write_Command>
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bd90      	pop	{r4, r7, pc}

080024a0 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80024a4:	2201      	movs	r2, #1
 80024a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024aa:	480b      	ldr	r0, [pc, #44]	; (80024d8 <ILI9341_Reset+0x38>)
 80024ac:	f000 fedc 	bl	8003268 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80024b0:	20c8      	movs	r0, #200	; 0xc8
 80024b2:	f000 fbdf 	bl	8002c74 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024bc:	4806      	ldr	r0, [pc, #24]	; (80024d8 <ILI9341_Reset+0x38>)
 80024be:	f000 fed3 	bl	8003268 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80024c2:	20c8      	movs	r0, #200	; 0xc8
 80024c4:	f000 fbd6 	bl	8002c74 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80024c8:	2201      	movs	r2, #1
 80024ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024ce:	4802      	ldr	r0, [pc, #8]	; (80024d8 <ILI9341_Reset+0x38>)
 80024d0:	f000 feca 	bl	8003268 <HAL_GPIO_WritePin>
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40020800 	.word	0x40020800

080024dc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80024ea:	2036      	movs	r0, #54	; 0x36
 80024ec:	f7ff ff48 	bl	8002380 <ILI9341_Write_Command>
HAL_Delay(1);
 80024f0:	2001      	movs	r0, #1
 80024f2:	f000 fbbf 	bl	8002c74 <HAL_Delay>
	
switch(screen_rotation) 
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d837      	bhi.n	800256c <ILI9341_Set_Rotation+0x90>
 80024fc:	a201      	add	r2, pc, #4	; (adr r2, 8002504 <ILI9341_Set_Rotation+0x28>)
 80024fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002502:	bf00      	nop
 8002504:	08002515 	.word	0x08002515
 8002508:	0800252b 	.word	0x0800252b
 800250c:	08002541 	.word	0x08002541
 8002510:	08002557 	.word	0x08002557
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002514:	2048      	movs	r0, #72	; 0x48
 8002516:	f7ff ff55 	bl	80023c4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800251a:	4b17      	ldr	r3, [pc, #92]	; (8002578 <ILI9341_Set_Rotation+0x9c>)
 800251c:	22f0      	movs	r2, #240	; 0xf0
 800251e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002520:	4b16      	ldr	r3, [pc, #88]	; (800257c <ILI9341_Set_Rotation+0xa0>)
 8002522:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002526:	801a      	strh	r2, [r3, #0]
			break;
 8002528:	e021      	b.n	800256e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800252a:	2028      	movs	r0, #40	; 0x28
 800252c:	f7ff ff4a 	bl	80023c4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <ILI9341_Set_Rotation+0x9c>)
 8002532:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002536:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002538:	4b10      	ldr	r3, [pc, #64]	; (800257c <ILI9341_Set_Rotation+0xa0>)
 800253a:	22f0      	movs	r2, #240	; 0xf0
 800253c:	801a      	strh	r2, [r3, #0]
			break;
 800253e:	e016      	b.n	800256e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002540:	2088      	movs	r0, #136	; 0x88
 8002542:	f7ff ff3f 	bl	80023c4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002546:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <ILI9341_Set_Rotation+0x9c>)
 8002548:	22f0      	movs	r2, #240	; 0xf0
 800254a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <ILI9341_Set_Rotation+0xa0>)
 800254e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002552:	801a      	strh	r2, [r3, #0]
			break;
 8002554:	e00b      	b.n	800256e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002556:	20e8      	movs	r0, #232	; 0xe8
 8002558:	f7ff ff34 	bl	80023c4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <ILI9341_Set_Rotation+0x9c>)
 800255e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002562:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <ILI9341_Set_Rotation+0xa0>)
 8002566:	22f0      	movs	r2, #240	; 0xf0
 8002568:	801a      	strh	r2, [r3, #0]
			break;
 800256a:	e000      	b.n	800256e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800256c:	bf00      	nop
	}
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	2000005a 	.word	0x2000005a
 800257c:	20000058 	.word	0x20000058

08002580 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002584:	2201      	movs	r2, #1
 8002586:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800258a:	4802      	ldr	r0, [pc, #8]	; (8002594 <ILI9341_Enable+0x14>)
 800258c:	f000 fe6c 	bl	8003268 <HAL_GPIO_WritePin>
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40020800 	.word	0x40020800

08002598 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800259c:	f7ff fff0 	bl	8002580 <ILI9341_Enable>
ILI9341_SPI_Init();
 80025a0:	f7ff fecc 	bl	800233c <ILI9341_SPI_Init>
ILI9341_Reset();
 80025a4:	f7ff ff7c 	bl	80024a0 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f7ff fee9 	bl	8002380 <ILI9341_Write_Command>
HAL_Delay(1000);
 80025ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025b2:	f000 fb5f 	bl	8002c74 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80025b6:	20cb      	movs	r0, #203	; 0xcb
 80025b8:	f7ff fee2 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80025bc:	2039      	movs	r0, #57	; 0x39
 80025be:	f7ff ff01 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80025c2:	202c      	movs	r0, #44	; 0x2c
 80025c4:	f7ff fefe 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7ff fefb 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80025ce:	2034      	movs	r0, #52	; 0x34
 80025d0:	f7ff fef8 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80025d4:	2002      	movs	r0, #2
 80025d6:	f7ff fef5 	bl	80023c4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80025da:	20cf      	movs	r0, #207	; 0xcf
 80025dc:	f7ff fed0 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7ff feef 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80025e6:	20c1      	movs	r0, #193	; 0xc1
 80025e8:	f7ff feec 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80025ec:	2030      	movs	r0, #48	; 0x30
 80025ee:	f7ff fee9 	bl	80023c4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80025f2:	20e8      	movs	r0, #232	; 0xe8
 80025f4:	f7ff fec4 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80025f8:	2085      	movs	r0, #133	; 0x85
 80025fa:	f7ff fee3 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80025fe:	2000      	movs	r0, #0
 8002600:	f7ff fee0 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002604:	2078      	movs	r0, #120	; 0x78
 8002606:	f7ff fedd 	bl	80023c4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800260a:	20ea      	movs	r0, #234	; 0xea
 800260c:	f7ff feb8 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002610:	2000      	movs	r0, #0
 8002612:	f7ff fed7 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002616:	2000      	movs	r0, #0
 8002618:	f7ff fed4 	bl	80023c4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800261c:	20ed      	movs	r0, #237	; 0xed
 800261e:	f7ff feaf 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002622:	2064      	movs	r0, #100	; 0x64
 8002624:	f7ff fece 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002628:	2003      	movs	r0, #3
 800262a:	f7ff fecb 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800262e:	2012      	movs	r0, #18
 8002630:	f7ff fec8 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002634:	2081      	movs	r0, #129	; 0x81
 8002636:	f7ff fec5 	bl	80023c4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800263a:	20f7      	movs	r0, #247	; 0xf7
 800263c:	f7ff fea0 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002640:	2020      	movs	r0, #32
 8002642:	f7ff febf 	bl	80023c4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002646:	20c0      	movs	r0, #192	; 0xc0
 8002648:	f7ff fe9a 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800264c:	2023      	movs	r0, #35	; 0x23
 800264e:	f7ff feb9 	bl	80023c4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002652:	20c1      	movs	r0, #193	; 0xc1
 8002654:	f7ff fe94 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002658:	2010      	movs	r0, #16
 800265a:	f7ff feb3 	bl	80023c4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800265e:	20c5      	movs	r0, #197	; 0xc5
 8002660:	f7ff fe8e 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002664:	203e      	movs	r0, #62	; 0x3e
 8002666:	f7ff fead 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800266a:	2028      	movs	r0, #40	; 0x28
 800266c:	f7ff feaa 	bl	80023c4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002670:	20c7      	movs	r0, #199	; 0xc7
 8002672:	f7ff fe85 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8002676:	2086      	movs	r0, #134	; 0x86
 8002678:	f7ff fea4 	bl	80023c4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 800267c:	2036      	movs	r0, #54	; 0x36
 800267e:	f7ff fe7f 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002682:	2048      	movs	r0, #72	; 0x48
 8002684:	f7ff fe9e 	bl	80023c4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002688:	203a      	movs	r0, #58	; 0x3a
 800268a:	f7ff fe79 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800268e:	2055      	movs	r0, #85	; 0x55
 8002690:	f7ff fe98 	bl	80023c4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002694:	20b1      	movs	r0, #177	; 0xb1
 8002696:	f7ff fe73 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800269a:	2000      	movs	r0, #0
 800269c:	f7ff fe92 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80026a0:	2018      	movs	r0, #24
 80026a2:	f7ff fe8f 	bl	80023c4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80026a6:	20b6      	movs	r0, #182	; 0xb6
 80026a8:	f7ff fe6a 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80026ac:	2008      	movs	r0, #8
 80026ae:	f7ff fe89 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80026b2:	2082      	movs	r0, #130	; 0x82
 80026b4:	f7ff fe86 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80026b8:	2027      	movs	r0, #39	; 0x27
 80026ba:	f7ff fe83 	bl	80023c4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80026be:	20f2      	movs	r0, #242	; 0xf2
 80026c0:	f7ff fe5e 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7ff fe7d 	bl	80023c4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80026ca:	2026      	movs	r0, #38	; 0x26
 80026cc:	f7ff fe58 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80026d0:	2001      	movs	r0, #1
 80026d2:	f7ff fe77 	bl	80023c4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80026d6:	20e0      	movs	r0, #224	; 0xe0
 80026d8:	f7ff fe52 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80026dc:	200f      	movs	r0, #15
 80026de:	f7ff fe71 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80026e2:	2031      	movs	r0, #49	; 0x31
 80026e4:	f7ff fe6e 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80026e8:	202b      	movs	r0, #43	; 0x2b
 80026ea:	f7ff fe6b 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80026ee:	200c      	movs	r0, #12
 80026f0:	f7ff fe68 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80026f4:	200e      	movs	r0, #14
 80026f6:	f7ff fe65 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80026fa:	2008      	movs	r0, #8
 80026fc:	f7ff fe62 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002700:	204e      	movs	r0, #78	; 0x4e
 8002702:	f7ff fe5f 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002706:	20f1      	movs	r0, #241	; 0xf1
 8002708:	f7ff fe5c 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 800270c:	2037      	movs	r0, #55	; 0x37
 800270e:	f7ff fe59 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002712:	2007      	movs	r0, #7
 8002714:	f7ff fe56 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002718:	2010      	movs	r0, #16
 800271a:	f7ff fe53 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800271e:	2003      	movs	r0, #3
 8002720:	f7ff fe50 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002724:	200e      	movs	r0, #14
 8002726:	f7ff fe4d 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800272a:	2009      	movs	r0, #9
 800272c:	f7ff fe4a 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002730:	2000      	movs	r0, #0
 8002732:	f7ff fe47 	bl	80023c4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002736:	20e1      	movs	r0, #225	; 0xe1
 8002738:	f7ff fe22 	bl	8002380 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800273c:	2000      	movs	r0, #0
 800273e:	f7ff fe41 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002742:	200e      	movs	r0, #14
 8002744:	f7ff fe3e 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002748:	2014      	movs	r0, #20
 800274a:	f7ff fe3b 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800274e:	2003      	movs	r0, #3
 8002750:	f7ff fe38 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002754:	2011      	movs	r0, #17
 8002756:	f7ff fe35 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800275a:	2007      	movs	r0, #7
 800275c:	f7ff fe32 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002760:	2031      	movs	r0, #49	; 0x31
 8002762:	f7ff fe2f 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002766:	20c1      	movs	r0, #193	; 0xc1
 8002768:	f7ff fe2c 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 800276c:	2048      	movs	r0, #72	; 0x48
 800276e:	f7ff fe29 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002772:	2008      	movs	r0, #8
 8002774:	f7ff fe26 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002778:	200f      	movs	r0, #15
 800277a:	f7ff fe23 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800277e:	200c      	movs	r0, #12
 8002780:	f7ff fe20 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002784:	2031      	movs	r0, #49	; 0x31
 8002786:	f7ff fe1d 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800278a:	2036      	movs	r0, #54	; 0x36
 800278c:	f7ff fe1a 	bl	80023c4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002790:	200f      	movs	r0, #15
 8002792:	f7ff fe17 	bl	80023c4 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002796:	2011      	movs	r0, #17
 8002798:	f7ff fdf2 	bl	8002380 <ILI9341_Write_Command>
HAL_Delay(120);
 800279c:	2078      	movs	r0, #120	; 0x78
 800279e:	f000 fa69 	bl	8002c74 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80027a2:	2029      	movs	r0, #41	; 0x29
 80027a4:	f7ff fdec 	bl	8002380 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80027a8:	2000      	movs	r0, #0
 80027aa:	f7ff fe97 	bl	80024dc <ILI9341_Set_Rotation>
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80027b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027b8:	b08d      	sub	sp, #52	; 0x34
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	6039      	str	r1, [r7, #0]
 80027c0:	80fb      	strh	r3, [r7, #6]
 80027c2:	466b      	mov	r3, sp
 80027c4:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027d2:	d202      	bcs.n	80027da <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d8:	e002      	b.n	80027e0 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80027da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80027e0:	2201      	movs	r2, #1
 80027e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027e6:	4840      	ldr	r0, [pc, #256]	; (80028e8 <ILI9341_Draw_Colour_Burst+0x134>)
 80027e8:	f000 fd3e 	bl	8003268 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80027ec:	2200      	movs	r2, #0
 80027ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027f2:	483d      	ldr	r0, [pc, #244]	; (80028e8 <ILI9341_Draw_Colour_Burst+0x134>)
 80027f4:	f000 fd38 	bl	8003268 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8002802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002804:	460b      	mov	r3, r1
 8002806:	3b01      	subs	r3, #1
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	2300      	movs	r3, #0
 800280c:	4688      	mov	r8, r1
 800280e:	4699      	mov	r9, r3
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800281c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002820:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002824:	2300      	movs	r3, #0
 8002826:	460c      	mov	r4, r1
 8002828:	461d      	mov	r5, r3
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	00eb      	lsls	r3, r5, #3
 8002834:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002838:	00e2      	lsls	r2, r4, #3
 800283a:	1dcb      	adds	r3, r1, #7
 800283c:	08db      	lsrs	r3, r3, #3
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	ebad 0d03 	sub.w	sp, sp, r3
 8002844:	466b      	mov	r3, sp
 8002846:	3300      	adds	r3, #0
 8002848:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800284a:	2300      	movs	r3, #0
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
 800284e:	e00e      	b.n	800286e <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002854:	4413      	add	r3, r2
 8002856:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800285a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	3301      	adds	r3, #1
 8002860:	88fa      	ldrh	r2, [r7, #6]
 8002862:	b2d1      	uxtb	r1, r2
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	3302      	adds	r3, #2
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
 800286e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002872:	429a      	cmp	r2, r3
 8002874:	d3ec      	bcc.n	8002850 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002880:	fbb2 f3f3 	udiv	r3, r2, r3
 8002884:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800288a:	fbb3 f2f2 	udiv	r2, r3, r2
 800288e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002890:	fb01 f202 	mul.w	r2, r1, r2
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d010      	beq.n	80028c0 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
 80028a2:	e009      	b.n	80028b8 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	230a      	movs	r3, #10
 80028aa:	69b9      	ldr	r1, [r7, #24]
 80028ac:	480f      	ldr	r0, [pc, #60]	; (80028ec <ILI9341_Draw_Colour_Burst+0x138>)
 80028ae:	f002 fcc8 	bl	8005242 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	3301      	adds	r3, #1
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
 80028b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d3f1      	bcc.n	80028a4 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	230a      	movs	r3, #10
 80028c6:	69b9      	ldr	r1, [r7, #24]
 80028c8:	4808      	ldr	r0, [pc, #32]	; (80028ec <ILI9341_Draw_Colour_Burst+0x138>)
 80028ca:	f002 fcba 	bl	8005242 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80028ce:	2201      	movs	r2, #1
 80028d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028d4:	4804      	ldr	r0, [pc, #16]	; (80028e8 <ILI9341_Draw_Colour_Burst+0x134>)
 80028d6:	f000 fcc7 	bl	8003268 <HAL_GPIO_WritePin>
 80028da:	46b5      	mov	sp, r6
}
 80028dc:	bf00      	nop
 80028de:	3734      	adds	r7, #52	; 0x34
 80028e0:	46bd      	mov	sp, r7
 80028e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028e6:	bf00      	nop
 80028e8:	40020800 	.word	0x40020800
 80028ec:	2000037c 	.word	0x2000037c

080028f0 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <ILI9341_Fill_Screen+0x44>)
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	b29a      	uxth	r2, r3
 8002900:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <ILI9341_Fill_Screen+0x48>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	2100      	movs	r1, #0
 8002908:	2000      	movs	r0, #0
 800290a:	f7ff fd7d 	bl	8002408 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <ILI9341_Fill_Screen+0x44>)
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <ILI9341_Fill_Screen+0x48>)
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	fb02 f303 	mul.w	r3, r2, r3
 8002920:	461a      	mov	r2, r3
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ff44 	bl	80027b4 <ILI9341_Draw_Colour_Burst>
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	2000005a 	.word	0x2000005a
 8002938:	20000058 	.word	0x20000058

0800293c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	80fb      	strh	r3, [r7, #6]
 8002946:	460b      	mov	r3, r1
 8002948:	80bb      	strh	r3, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800294e:	4b64      	ldr	r3, [pc, #400]	; (8002ae0 <ILI9341_Draw_Pixel+0x1a4>)
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	88fa      	ldrh	r2, [r7, #6]
 8002956:	429a      	cmp	r2, r3
 8002958:	f080 80be 	bcs.w	8002ad8 <ILI9341_Draw_Pixel+0x19c>
 800295c:	4b61      	ldr	r3, [pc, #388]	; (8002ae4 <ILI9341_Draw_Pixel+0x1a8>)
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	b29b      	uxth	r3, r3
 8002962:	88ba      	ldrh	r2, [r7, #4]
 8002964:	429a      	cmp	r2, r3
 8002966:	f080 80b7 	bcs.w	8002ad8 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800296a:	2200      	movs	r2, #0
 800296c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002970:	485d      	ldr	r0, [pc, #372]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 8002972:	f000 fc79 	bl	8003268 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002976:	2200      	movs	r2, #0
 8002978:	f44f 7180 	mov.w	r1, #256	; 0x100
 800297c:	485a      	ldr	r0, [pc, #360]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 800297e:	f000 fc73 	bl	8003268 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002982:	202a      	movs	r0, #42	; 0x2a
 8002984:	f7ff fcea 	bl	800235c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002988:	2201      	movs	r2, #1
 800298a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800298e:	4856      	ldr	r0, [pc, #344]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 8002990:	f000 fc6a 	bl	8003268 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002994:	2201      	movs	r2, #1
 8002996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800299a:	4853      	ldr	r0, [pc, #332]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 800299c:	f000 fc64 	bl	8003268 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80029a0:	2200      	movs	r2, #0
 80029a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029a6:	4850      	ldr	r0, [pc, #320]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 80029a8:	f000 fc5e 	bl	8003268 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	753b      	strb	r3, [r7, #20]
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	757b      	strb	r3, [r7, #21]
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	3301      	adds	r3, #1
 80029c0:	121b      	asrs	r3, r3, #8
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	75bb      	strb	r3, [r7, #22]
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	3301      	adds	r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80029d0:	f107 0114 	add.w	r1, r7, #20
 80029d4:	2301      	movs	r3, #1
 80029d6:	2204      	movs	r2, #4
 80029d8:	4844      	ldr	r0, [pc, #272]	; (8002aec <ILI9341_Draw_Pixel+0x1b0>)
 80029da:	f002 fc32 	bl	8005242 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80029de:	2201      	movs	r2, #1
 80029e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029e4:	4840      	ldr	r0, [pc, #256]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 80029e6:	f000 fc3f 	bl	8003268 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80029ea:	2200      	movs	r2, #0
 80029ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029f0:	483d      	ldr	r0, [pc, #244]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 80029f2:	f000 fc39 	bl	8003268 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80029f6:	2200      	movs	r2, #0
 80029f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029fc:	483a      	ldr	r0, [pc, #232]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 80029fe:	f000 fc33 	bl	8003268 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002a02:	202b      	movs	r0, #43	; 0x2b
 8002a04:	f7ff fcaa 	bl	800235c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a0e:	4836      	ldr	r0, [pc, #216]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 8002a10:	f000 fc2a 	bl	8003268 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002a14:	2201      	movs	r2, #1
 8002a16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a1a:	4833      	ldr	r0, [pc, #204]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 8002a1c:	f000 fc24 	bl	8003268 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002a20:	2200      	movs	r2, #0
 8002a22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a26:	4830      	ldr	r0, [pc, #192]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 8002a28:	f000 fc1e 	bl	8003268 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002a2c:	88bb      	ldrh	r3, [r7, #4]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	743b      	strb	r3, [r7, #16]
 8002a36:	88bb      	ldrh	r3, [r7, #4]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	747b      	strb	r3, [r7, #17]
 8002a3c:	88bb      	ldrh	r3, [r7, #4]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	121b      	asrs	r3, r3, #8
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	74bb      	strb	r3, [r7, #18]
 8002a46:	88bb      	ldrh	r3, [r7, #4]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002a50:	f107 0110 	add.w	r1, r7, #16
 8002a54:	2301      	movs	r3, #1
 8002a56:	2204      	movs	r2, #4
 8002a58:	4824      	ldr	r0, [pc, #144]	; (8002aec <ILI9341_Draw_Pixel+0x1b0>)
 8002a5a:	f002 fbf2 	bl	8005242 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a64:	4820      	ldr	r0, [pc, #128]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 8002a66:	f000 fbff 	bl	8003268 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a70:	481d      	ldr	r0, [pc, #116]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 8002a72:	f000 fbf9 	bl	8003268 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002a76:	2200      	movs	r2, #0
 8002a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a7c:	481a      	ldr	r0, [pc, #104]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 8002a7e:	f000 fbf3 	bl	8003268 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002a82:	202c      	movs	r0, #44	; 0x2c
 8002a84:	f7ff fc6a 	bl	800235c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a8e:	4816      	ldr	r0, [pc, #88]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 8002a90:	f000 fbea 	bl	8003268 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002a94:	2201      	movs	r2, #1
 8002a96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a9a:	4813      	ldr	r0, [pc, #76]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 8002a9c:	f000 fbe4 	bl	8003268 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aa6:	4810      	ldr	r0, [pc, #64]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 8002aa8:	f000 fbde 	bl	8003268 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002aac:	887b      	ldrh	r3, [r7, #2]
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	733b      	strb	r3, [r7, #12]
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002abc:	f107 010c 	add.w	r1, r7, #12
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	4809      	ldr	r0, [pc, #36]	; (8002aec <ILI9341_Draw_Pixel+0x1b0>)
 8002ac6:	f002 fbbc 	bl	8005242 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002aca:	2201      	movs	r2, #1
 8002acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ad0:	4805      	ldr	r0, [pc, #20]	; (8002ae8 <ILI9341_Draw_Pixel+0x1ac>)
 8002ad2:	f000 fbc9 	bl	8003268 <HAL_GPIO_WritePin>
 8002ad6:	e000      	b.n	8002ada <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002ad8:	bf00      	nop
	
}
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	2000005a 	.word	0x2000005a
 8002ae4:	20000058 	.word	0x20000058
 8002ae8:	40020800 	.word	0x40020800
 8002aec:	2000037c 	.word	0x2000037c

08002af0 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4604      	mov	r4, r0
 8002af8:	4608      	mov	r0, r1
 8002afa:	4611      	mov	r1, r2
 8002afc:	461a      	mov	r2, r3
 8002afe:	4623      	mov	r3, r4
 8002b00:	80fb      	strh	r3, [r7, #6]
 8002b02:	4603      	mov	r3, r0
 8002b04:	80bb      	strh	r3, [r7, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	807b      	strh	r3, [r7, #2]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002b0e:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <ILI9341_Draw_Rectangle+0xb0>)
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	88fa      	ldrh	r2, [r7, #6]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d23d      	bcs.n	8002b96 <ILI9341_Draw_Rectangle+0xa6>
 8002b1a:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <ILI9341_Draw_Rectangle+0xb4>)
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	88ba      	ldrh	r2, [r7, #4]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d237      	bcs.n	8002b96 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002b26:	88fa      	ldrh	r2, [r7, #6]
 8002b28:	887b      	ldrh	r3, [r7, #2]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ba0 <ILI9341_Draw_Rectangle+0xb0>)
 8002b2e:	8812      	ldrh	r2, [r2, #0]
 8002b30:	b292      	uxth	r2, r2
 8002b32:	4293      	cmp	r3, r2
 8002b34:	dd05      	ble.n	8002b42 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002b36:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <ILI9341_Draw_Rectangle+0xb0>)
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002b42:	88ba      	ldrh	r2, [r7, #4]
 8002b44:	883b      	ldrh	r3, [r7, #0]
 8002b46:	4413      	add	r3, r2
 8002b48:	4a16      	ldr	r2, [pc, #88]	; (8002ba4 <ILI9341_Draw_Rectangle+0xb4>)
 8002b4a:	8812      	ldrh	r2, [r2, #0]
 8002b4c:	b292      	uxth	r2, r2
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	dd05      	ble.n	8002b5e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002b52:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <ILI9341_Draw_Rectangle+0xb4>)
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	88bb      	ldrh	r3, [r7, #4]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002b5e:	88fa      	ldrh	r2, [r7, #6]
 8002b60:	887b      	ldrh	r3, [r7, #2]
 8002b62:	4413      	add	r3, r2
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29c      	uxth	r4, r3
 8002b6a:	88ba      	ldrh	r2, [r7, #4]
 8002b6c:	883b      	ldrh	r3, [r7, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	88b9      	ldrh	r1, [r7, #4]
 8002b78:	88f8      	ldrh	r0, [r7, #6]
 8002b7a:	4622      	mov	r2, r4
 8002b7c:	f7ff fc44 	bl	8002408 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002b80:	883b      	ldrh	r3, [r7, #0]
 8002b82:	887a      	ldrh	r2, [r7, #2]
 8002b84:	fb02 f303 	mul.w	r3, r2, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	8b3b      	ldrh	r3, [r7, #24]
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fe10 	bl	80027b4 <ILI9341_Draw_Colour_Burst>
 8002b94:	e000      	b.n	8002b98 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002b96:	bf00      	nop
}
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	2000005a 	.word	0x2000005a
 8002ba4:	20000058 	.word	0x20000058

08002ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bac:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <HAL_Init+0x28>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a07      	ldr	r2, [pc, #28]	; (8002bd0 <HAL_Init+0x28>)
 8002bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb8:	2003      	movs	r0, #3
 8002bba:	f000 f94f 	bl	8002e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f000 f808 	bl	8002bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bc4:	f7fe ff9e 	bl	8001b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023c00 	.word	0x40023c00

08002bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bdc:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <HAL_InitTick+0x54>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <HAL_InitTick+0x58>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	4619      	mov	r1, r3
 8002be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 f967 	bl	8002ec6 <HAL_SYSTICK_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e00e      	b.n	8002c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b0f      	cmp	r3, #15
 8002c06:	d80a      	bhi.n	8002c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c10:	f000 f92f 	bl	8002e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c14:	4a06      	ldr	r2, [pc, #24]	; (8002c30 <HAL_InitTick+0x5c>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e000      	b.n	8002c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000054 	.word	0x20000054
 8002c2c:	20000060 	.word	0x20000060
 8002c30:	2000005c 	.word	0x2000005c

08002c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_IncTick+0x20>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_IncTick+0x24>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <HAL_IncTick+0x24>)
 8002c46:	6013      	str	r3, [r2, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000060 	.word	0x20000060
 8002c58:	2000058c 	.word	0x2000058c

08002c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_GetTick+0x14>)
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	2000058c 	.word	0x2000058c

08002c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c7c:	f7ff ffee 	bl	8002c5c <HAL_GetTick>
 8002c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d005      	beq.n	8002c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_Delay+0x44>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c9a:	bf00      	nop
 8002c9c:	f7ff ffde 	bl	8002c5c <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d8f7      	bhi.n	8002c9c <HAL_Delay+0x28>
  {
  }
}
 8002cac:	bf00      	nop
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000060 	.word	0x20000060

08002cbc <__NVIC_SetPriorityGrouping>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <__NVIC_SetPriorityGrouping+0x40>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cea:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <__NVIC_SetPriorityGrouping+0x40>)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	60d3      	str	r3, [r2, #12]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00
 8002d00:	05fa0000 	.word	0x05fa0000

08002d04 <__NVIC_GetPriorityGrouping>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <__NVIC_GetPriorityGrouping+0x18>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	f003 0307 	and.w	r3, r3, #7
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <__NVIC_EnableIRQ>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	db0b      	blt.n	8002d4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	f003 021f 	and.w	r2, r3, #31
 8002d38:	4907      	ldr	r1, [pc, #28]	; (8002d58 <__NVIC_EnableIRQ+0x38>)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2001      	movs	r0, #1
 8002d42:	fa00 f202 	lsl.w	r2, r0, r2
 8002d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000e100 	.word	0xe000e100

08002d5c <__NVIC_SetPriority>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db0a      	blt.n	8002d86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	490c      	ldr	r1, [pc, #48]	; (8002da8 <__NVIC_SetPriority+0x4c>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d84:	e00a      	b.n	8002d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4908      	ldr	r1, [pc, #32]	; (8002dac <__NVIC_SetPriority+0x50>)
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3b04      	subs	r3, #4
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	440b      	add	r3, r1
 8002d9a:	761a      	strb	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000e100 	.word	0xe000e100
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <NVIC_EncodePriority>:
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	; 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f1c3 0307 	rsb	r3, r3, #7
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	bf28      	it	cs
 8002dce:	2304      	movcs	r3, #4
 8002dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d902      	bls.n	8002de0 <NVIC_EncodePriority+0x30>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3b03      	subs	r3, #3
 8002dde:	e000      	b.n	8002de2 <NVIC_EncodePriority+0x32>
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	401a      	ands	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	43d9      	mvns	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	4313      	orrs	r3, r2
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	; 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e28:	d301      	bcc.n	8002e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e00f      	b.n	8002e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <SysTick_Config+0x40>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e36:	210f      	movs	r1, #15
 8002e38:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3c:	f7ff ff8e 	bl	8002d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <SysTick_Config+0x40>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e46:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <SysTick_Config+0x40>)
 8002e48:	2207      	movs	r2, #7
 8002e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	e000e010 	.word	0xe000e010

08002e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ff29 	bl	8002cbc <__NVIC_SetPriorityGrouping>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	4603      	mov	r3, r0
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
 8002e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e84:	f7ff ff3e 	bl	8002d04 <__NVIC_GetPriorityGrouping>
 8002e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	6978      	ldr	r0, [r7, #20]
 8002e90:	f7ff ff8e 	bl	8002db0 <NVIC_EncodePriority>
 8002e94:	4602      	mov	r2, r0
 8002e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ff5d 	bl	8002d5c <__NVIC_SetPriority>
}
 8002ea2:	bf00      	nop
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff ff31 	bl	8002d20 <__NVIC_EnableIRQ>
}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff ffa2 	bl	8002e18 <SysTick_Config>
 8002ed4:	4603      	mov	r3, r0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	; 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	e175      	b.n	80031ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f00:	2201      	movs	r2, #1
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	f040 8164 	bne.w	80031e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d005      	beq.n	8002f36 <HAL_GPIO_Init+0x56>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d130      	bne.n	8002f98 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	2203      	movs	r2, #3
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	f003 0201 	and.w	r2, r3, #1
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d017      	beq.n	8002fd4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	2203      	movs	r2, #3
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d123      	bne.n	8003028 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	08da      	lsrs	r2, r3, #3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3208      	adds	r2, #8
 8002fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	220f      	movs	r2, #15
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	08da      	lsrs	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3208      	adds	r2, #8
 8003022:	69b9      	ldr	r1, [r7, #24]
 8003024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	2203      	movs	r2, #3
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 0203 	and.w	r2, r3, #3
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80be 	beq.w	80031e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306a:	4b66      	ldr	r3, [pc, #408]	; (8003204 <HAL_GPIO_Init+0x324>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	4a65      	ldr	r2, [pc, #404]	; (8003204 <HAL_GPIO_Init+0x324>)
 8003070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003074:	6453      	str	r3, [r2, #68]	; 0x44
 8003076:	4b63      	ldr	r3, [pc, #396]	; (8003204 <HAL_GPIO_Init+0x324>)
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003082:	4a61      	ldr	r2, [pc, #388]	; (8003208 <HAL_GPIO_Init+0x328>)
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	089b      	lsrs	r3, r3, #2
 8003088:	3302      	adds	r3, #2
 800308a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	220f      	movs	r2, #15
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a58      	ldr	r2, [pc, #352]	; (800320c <HAL_GPIO_Init+0x32c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d037      	beq.n	800311e <HAL_GPIO_Init+0x23e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a57      	ldr	r2, [pc, #348]	; (8003210 <HAL_GPIO_Init+0x330>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d031      	beq.n	800311a <HAL_GPIO_Init+0x23a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a56      	ldr	r2, [pc, #344]	; (8003214 <HAL_GPIO_Init+0x334>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d02b      	beq.n	8003116 <HAL_GPIO_Init+0x236>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a55      	ldr	r2, [pc, #340]	; (8003218 <HAL_GPIO_Init+0x338>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d025      	beq.n	8003112 <HAL_GPIO_Init+0x232>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a54      	ldr	r2, [pc, #336]	; (800321c <HAL_GPIO_Init+0x33c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01f      	beq.n	800310e <HAL_GPIO_Init+0x22e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a53      	ldr	r2, [pc, #332]	; (8003220 <HAL_GPIO_Init+0x340>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d019      	beq.n	800310a <HAL_GPIO_Init+0x22a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a52      	ldr	r2, [pc, #328]	; (8003224 <HAL_GPIO_Init+0x344>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_GPIO_Init+0x226>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a51      	ldr	r2, [pc, #324]	; (8003228 <HAL_GPIO_Init+0x348>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00d      	beq.n	8003102 <HAL_GPIO_Init+0x222>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a50      	ldr	r2, [pc, #320]	; (800322c <HAL_GPIO_Init+0x34c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <HAL_GPIO_Init+0x21e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4f      	ldr	r2, [pc, #316]	; (8003230 <HAL_GPIO_Init+0x350>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <HAL_GPIO_Init+0x21a>
 80030f6:	2309      	movs	r3, #9
 80030f8:	e012      	b.n	8003120 <HAL_GPIO_Init+0x240>
 80030fa:	230a      	movs	r3, #10
 80030fc:	e010      	b.n	8003120 <HAL_GPIO_Init+0x240>
 80030fe:	2308      	movs	r3, #8
 8003100:	e00e      	b.n	8003120 <HAL_GPIO_Init+0x240>
 8003102:	2307      	movs	r3, #7
 8003104:	e00c      	b.n	8003120 <HAL_GPIO_Init+0x240>
 8003106:	2306      	movs	r3, #6
 8003108:	e00a      	b.n	8003120 <HAL_GPIO_Init+0x240>
 800310a:	2305      	movs	r3, #5
 800310c:	e008      	b.n	8003120 <HAL_GPIO_Init+0x240>
 800310e:	2304      	movs	r3, #4
 8003110:	e006      	b.n	8003120 <HAL_GPIO_Init+0x240>
 8003112:	2303      	movs	r3, #3
 8003114:	e004      	b.n	8003120 <HAL_GPIO_Init+0x240>
 8003116:	2302      	movs	r3, #2
 8003118:	e002      	b.n	8003120 <HAL_GPIO_Init+0x240>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_GPIO_Init+0x240>
 800311e:	2300      	movs	r3, #0
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	f002 0203 	and.w	r2, r2, #3
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	4093      	lsls	r3, r2
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003130:	4935      	ldr	r1, [pc, #212]	; (8003208 <HAL_GPIO_Init+0x328>)
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	089b      	lsrs	r3, r3, #2
 8003136:	3302      	adds	r3, #2
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800313e:	4b3d      	ldr	r3, [pc, #244]	; (8003234 <HAL_GPIO_Init+0x354>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003162:	4a34      	ldr	r2, [pc, #208]	; (8003234 <HAL_GPIO_Init+0x354>)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003168:	4b32      	ldr	r3, [pc, #200]	; (8003234 <HAL_GPIO_Init+0x354>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800318c:	4a29      	ldr	r2, [pc, #164]	; (8003234 <HAL_GPIO_Init+0x354>)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003192:	4b28      	ldr	r3, [pc, #160]	; (8003234 <HAL_GPIO_Init+0x354>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031b6:	4a1f      	ldr	r2, [pc, #124]	; (8003234 <HAL_GPIO_Init+0x354>)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031bc:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <HAL_GPIO_Init+0x354>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031e0:	4a14      	ldr	r2, [pc, #80]	; (8003234 <HAL_GPIO_Init+0x354>)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3301      	adds	r3, #1
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b0f      	cmp	r3, #15
 80031f0:	f67f ae86 	bls.w	8002f00 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	3724      	adds	r7, #36	; 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800
 8003208:	40013800 	.word	0x40013800
 800320c:	40020000 	.word	0x40020000
 8003210:	40020400 	.word	0x40020400
 8003214:	40020800 	.word	0x40020800
 8003218:	40020c00 	.word	0x40020c00
 800321c:	40021000 	.word	0x40021000
 8003220:	40021400 	.word	0x40021400
 8003224:	40021800 	.word	0x40021800
 8003228:	40021c00 	.word	0x40021c00
 800322c:	40022000 	.word	0x40022000
 8003230:	40022400 	.word	0x40022400
 8003234:	40013c00 	.word	0x40013c00

08003238 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	887b      	ldrh	r3, [r7, #2]
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
 8003254:	e001      	b.n	800325a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
 8003274:	4613      	mov	r3, r2
 8003276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003278:	787b      	ldrb	r3, [r7, #1]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800327e:	887a      	ldrh	r2, [r7, #2]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003284:	e003      	b.n	800328e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003286:	887b      	ldrh	r3, [r7, #2]
 8003288:	041a      	lsls	r2, r3, #16
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	619a      	str	r2, [r3, #24]
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d006      	beq.n	80032c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032b2:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 f806 	bl	80032cc <HAL_GPIO_EXTI_Callback>
  }
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40013c00 	.word	0x40013c00

080032cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e07f      	b.n	80033f6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fd ff16 	bl	800113c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2224      	movs	r2, #36	; 0x24
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003334:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003344:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d107      	bne.n	800335e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	e006      	b.n	800336c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800336a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d104      	bne.n	800337e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800337c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6859      	ldr	r1, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <HAL_I2C_Init+0x11c>)
 800338a:	430b      	orrs	r3, r1
 800338c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800339c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691a      	ldr	r2, [r3, #16]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69d9      	ldr	r1, [r3, #28]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1a      	ldr	r2, [r3, #32]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	02008000 	.word	0x02008000

08003404 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af02      	add	r7, sp, #8
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	461a      	mov	r2, r3
 8003410:	460b      	mov	r3, r1
 8003412:	817b      	strh	r3, [r7, #10]
 8003414:	4613      	mov	r3, r2
 8003416:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b20      	cmp	r3, #32
 8003422:	f040 80da 	bne.w	80035da <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_I2C_Master_Transmit+0x30>
 8003430:	2302      	movs	r3, #2
 8003432:	e0d3      	b.n	80035dc <HAL_I2C_Master_Transmit+0x1d8>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800343c:	f7ff fc0e 	bl	8002c5c <HAL_GetTick>
 8003440:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2319      	movs	r3, #25
 8003448:	2201      	movs	r2, #1
 800344a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f9e6 	bl	8003820 <I2C_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e0be      	b.n	80035dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2221      	movs	r2, #33	; 0x21
 8003462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2210      	movs	r2, #16
 800346a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	893a      	ldrh	r2, [r7, #8]
 800347e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	2bff      	cmp	r3, #255	; 0xff
 800348e:	d90e      	bls.n	80034ae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	22ff      	movs	r2, #255	; 0xff
 8003494:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349a:	b2da      	uxtb	r2, r3
 800349c:	8979      	ldrh	r1, [r7, #10]
 800349e:	4b51      	ldr	r3, [pc, #324]	; (80035e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fbd0 	bl	8003c4c <I2C_TransferConfig>
 80034ac:	e06c      	b.n	8003588 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	8979      	ldrh	r1, [r7, #10]
 80034c0:	4b48      	ldr	r3, [pc, #288]	; (80035e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 fbbf 	bl	8003c4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80034ce:	e05b      	b.n	8003588 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	6a39      	ldr	r1, [r7, #32]
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f9e3 	bl	80038a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e07b      	b.n	80035dc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d034      	beq.n	8003588 <HAL_I2C_Master_Transmit+0x184>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003522:	2b00      	cmp	r3, #0
 8003524:	d130      	bne.n	8003588 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	2200      	movs	r2, #0
 800352e:	2180      	movs	r1, #128	; 0x80
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f975 	bl	8003820 <I2C_WaitOnFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e04d      	b.n	80035dc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	2bff      	cmp	r3, #255	; 0xff
 8003548:	d90e      	bls.n	8003568 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	22ff      	movs	r2, #255	; 0xff
 800354e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003554:	b2da      	uxtb	r2, r3
 8003556:	8979      	ldrh	r1, [r7, #10]
 8003558:	2300      	movs	r3, #0
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fb73 	bl	8003c4c <I2C_TransferConfig>
 8003566:	e00f      	b.n	8003588 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003576:	b2da      	uxtb	r2, r3
 8003578:	8979      	ldrh	r1, [r7, #10]
 800357a:	2300      	movs	r3, #0
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 fb62 	bl	8003c4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d19e      	bne.n	80034d0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	6a39      	ldr	r1, [r7, #32]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f9c2 	bl	8003920 <I2C_WaitOnSTOPFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e01a      	b.n	80035dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2220      	movs	r2, #32
 80035ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_I2C_Master_Transmit+0x1e4>)
 80035ba:	400b      	ands	r3, r1
 80035bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e000      	b.n	80035dc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80035da:	2302      	movs	r3, #2
  }
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	80002000 	.word	0x80002000
 80035e8:	fe00e800 	.word	0xfe00e800

080035ec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	461a      	mov	r2, r3
 80035f8:	460b      	mov	r3, r1
 80035fa:	817b      	strh	r3, [r7, #10]
 80035fc:	4613      	mov	r3, r2
 80035fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b20      	cmp	r3, #32
 800360a:	f040 80db 	bne.w	80037c4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_I2C_Master_Receive+0x30>
 8003618:	2302      	movs	r3, #2
 800361a:	e0d4      	b.n	80037c6 <HAL_I2C_Master_Receive+0x1da>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003624:	f7ff fb1a 	bl	8002c5c <HAL_GetTick>
 8003628:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2319      	movs	r3, #25
 8003630:	2201      	movs	r2, #1
 8003632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f8f2 	bl	8003820 <I2C_WaitOnFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0bf      	b.n	80037c6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2222      	movs	r2, #34	; 0x22
 800364a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2210      	movs	r2, #16
 8003652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	893a      	ldrh	r2, [r7, #8]
 8003666:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	2bff      	cmp	r3, #255	; 0xff
 8003676:	d90e      	bls.n	8003696 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	22ff      	movs	r2, #255	; 0xff
 800367c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003682:	b2da      	uxtb	r2, r3
 8003684:	8979      	ldrh	r1, [r7, #10]
 8003686:	4b52      	ldr	r3, [pc, #328]	; (80037d0 <HAL_I2C_Master_Receive+0x1e4>)
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 fadc 	bl	8003c4c <I2C_TransferConfig>
 8003694:	e06d      	b.n	8003772 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	8979      	ldrh	r1, [r7, #10]
 80036a8:	4b49      	ldr	r3, [pc, #292]	; (80037d0 <HAL_I2C_Master_Receive+0x1e4>)
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 facb 	bl	8003c4c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80036b6:	e05c      	b.n	8003772 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	6a39      	ldr	r1, [r7, #32]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f96b 	bl	8003998 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e07c      	b.n	80037c6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d034      	beq.n	8003772 <HAL_I2C_Master_Receive+0x186>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	d130      	bne.n	8003772 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	2200      	movs	r2, #0
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f880 	bl	8003820 <I2C_WaitOnFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e04d      	b.n	80037c6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	2bff      	cmp	r3, #255	; 0xff
 8003732:	d90e      	bls.n	8003752 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	22ff      	movs	r2, #255	; 0xff
 8003738:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373e:	b2da      	uxtb	r2, r3
 8003740:	8979      	ldrh	r1, [r7, #10]
 8003742:	2300      	movs	r3, #0
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 fa7e 	bl	8003c4c <I2C_TransferConfig>
 8003750:	e00f      	b.n	8003772 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003760:	b2da      	uxtb	r2, r3
 8003762:	8979      	ldrh	r1, [r7, #10]
 8003764:	2300      	movs	r3, #0
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fa6d 	bl	8003c4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d19d      	bne.n	80036b8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	6a39      	ldr	r1, [r7, #32]
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f8cd 	bl	8003920 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e01a      	b.n	80037c6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2220      	movs	r2, #32
 8003796:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6859      	ldr	r1, [r3, #4]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <HAL_I2C_Master_Receive+0x1e8>)
 80037a4:	400b      	ands	r3, r1
 80037a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e000      	b.n	80037c6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
  }
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	80002400 	.word	0x80002400
 80037d4:	fe00e800 	.word	0xfe00e800

080037d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d103      	bne.n	80037f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2200      	movs	r2, #0
 80037f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b01      	cmp	r3, #1
 8003802:	d007      	beq.n	8003814 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	619a      	str	r2, [r3, #24]
  }
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	603b      	str	r3, [r7, #0]
 800382c:	4613      	mov	r3, r2
 800382e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003830:	e022      	b.n	8003878 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d01e      	beq.n	8003878 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383a:	f7ff fa0f 	bl	8002c5c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <I2C_WaitOnFlagUntilTimeout+0x30>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d113      	bne.n	8003878 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003854:	f043 0220 	orr.w	r2, r3, #32
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e00f      	b.n	8003898 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4013      	ands	r3, r2
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	429a      	cmp	r2, r3
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	429a      	cmp	r2, r3
 8003894:	d0cd      	beq.n	8003832 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038ac:	e02c      	b.n	8003908 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f8ea 	bl	8003a8c <I2C_IsErrorOccurred>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e02a      	b.n	8003918 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d01e      	beq.n	8003908 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ca:	f7ff f9c7 	bl	8002c5c <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d302      	bcc.n	80038e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d113      	bne.n	8003908 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	f043 0220 	orr.w	r2, r3, #32
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e007      	b.n	8003918 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b02      	cmp	r3, #2
 8003914:	d1cb      	bne.n	80038ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800392c:	e028      	b.n	8003980 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f8aa 	bl	8003a8c <I2C_IsErrorOccurred>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e026      	b.n	8003990 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003942:	f7ff f98b 	bl	8002c5c <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	d302      	bcc.n	8003958 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d113      	bne.n	8003980 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395c:	f043 0220 	orr.w	r2, r3, #32
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e007      	b.n	8003990 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b20      	cmp	r3, #32
 800398c:	d1cf      	bne.n	800392e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039a4:	e064      	b.n	8003a70 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 f86e 	bl	8003a8c <I2C_IsErrorOccurred>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e062      	b.n	8003a80 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d138      	bne.n	8003a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d105      	bne.n	80039e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	e04e      	b.n	8003a80 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b10      	cmp	r3, #16
 80039ee:	d107      	bne.n	8003a00 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2210      	movs	r2, #16
 80039f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2204      	movs	r2, #4
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
 80039fe:	e002      	b.n	8003a06 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003a1a:	400b      	ands	r3, r1
 8003a1c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e022      	b.n	8003a80 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3a:	f7ff f90f 	bl	8002c5c <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10f      	bne.n	8003a70 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a54:	f043 0220 	orr.w	r2, r3, #32
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e007      	b.n	8003a80 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d193      	bne.n	80039a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	fe00e800 	.word	0xfe00e800

08003a8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	; 0x28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d068      	beq.n	8003b8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2210      	movs	r2, #16
 8003abe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ac0:	e049      	b.n	8003b56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d045      	beq.n	8003b56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003aca:	f7ff f8c7 	bl	8002c5c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d302      	bcc.n	8003ae0 <I2C_IsErrorOccurred+0x54>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d13a      	bne.n	8003b56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003af2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b02:	d121      	bne.n	8003b48 <I2C_IsErrorOccurred+0xbc>
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b0a:	d01d      	beq.n	8003b48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003b0c:	7cfb      	ldrb	r3, [r7, #19]
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d01a      	beq.n	8003b48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b22:	f7ff f89b 	bl	8002c5c <HAL_GetTick>
 8003b26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b28:	e00e      	b.n	8003b48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003b2a:	f7ff f897 	bl	8002c5c <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b19      	cmp	r3, #25
 8003b36:	d907      	bls.n	8003b48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	f043 0320 	orr.w	r3, r3, #32
 8003b3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003b46:	e006      	b.n	8003b56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d1e9      	bne.n	8003b2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d003      	beq.n	8003b6c <I2C_IsErrorOccurred+0xe0>
 8003b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0aa      	beq.n	8003ac2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d103      	bne.n	8003b7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	f043 0304 	orr.w	r3, r3, #4
 8003b82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00b      	beq.n	8003bb4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00b      	beq.n	8003bd6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	f043 0308 	orr.w	r3, r3, #8
 8003bc4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00b      	beq.n	8003bf8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	f043 0302 	orr.w	r3, r3, #2
 8003be6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01c      	beq.n	8003c3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f7ff fde9 	bl	80037d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <I2C_IsErrorOccurred+0x1bc>)
 8003c12:	400b      	ands	r3, r1
 8003c14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3728      	adds	r7, #40	; 0x28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	fe00e800 	.word	0xfe00e800

08003c4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	607b      	str	r3, [r7, #4]
 8003c56:	460b      	mov	r3, r1
 8003c58:	817b      	strh	r3, [r7, #10]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c5e:	897b      	ldrh	r3, [r7, #10]
 8003c60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c64:	7a7b      	ldrb	r3, [r7, #9]
 8003c66:	041b      	lsls	r3, r3, #16
 8003c68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	0d5b      	lsrs	r3, r3, #21
 8003c86:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <I2C_TransferConfig+0x60>)
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	ea02 0103 	and.w	r1, r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c9e:	bf00      	nop
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	03ff63ff 	.word	0x03ff63ff

08003cb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d138      	bne.n	8003d38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e032      	b.n	8003d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2224      	movs	r2, #36	; 0x24
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0201 	bic.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e000      	b.n	8003d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d38:	2302      	movs	r3, #2
  }
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b085      	sub	sp, #20
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d139      	bne.n	8003dd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e033      	b.n	8003dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2224      	movs	r2, #36	; 0x24
 8003d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0201 	bic.w	r2, r2, #1
 8003d88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e000      	b.n	8003dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dee:	6013      	str	r3, [r2, #0]
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40007000 	.word	0x40007000

08003e00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e0a:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	4a22      	ldr	r2, [pc, #136]	; (8003e98 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e14:	6413      	str	r3, [r2, #64]	; 0x40
 8003e16:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e22:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1d      	ldr	r2, [pc, #116]	; (8003e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e2e:	f7fe ff15 	bl	8002c5c <HAL_GetTick>
 8003e32:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e34:	e009      	b.n	8003e4a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e36:	f7fe ff11 	bl	8002c5c <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e44:	d901      	bls.n	8003e4a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e022      	b.n	8003e90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e4a:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e56:	d1ee      	bne.n	8003e36 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a0f      	ldr	r2, [pc, #60]	; (8003e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e64:	f7fe fefa 	bl	8002c5c <HAL_GetTick>
 8003e68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e6a:	e009      	b.n	8003e80 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e6c:	f7fe fef6 	bl	8002c5c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e7a:	d901      	bls.n	8003e80 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e007      	b.n	8003e90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e8c:	d1ee      	bne.n	8003e6c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	40007000 	.word	0x40007000

08003ea0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e29b      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 8087 	beq.w	8003fd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ec4:	4b96      	ldr	r3, [pc, #600]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 030c 	and.w	r3, r3, #12
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d00c      	beq.n	8003eea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ed0:	4b93      	ldr	r3, [pc, #588]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d112      	bne.n	8003f02 <HAL_RCC_OscConfig+0x62>
 8003edc:	4b90      	ldr	r3, [pc, #576]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ee8:	d10b      	bne.n	8003f02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eea:	4b8d      	ldr	r3, [pc, #564]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d06c      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x130>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d168      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e275      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0a:	d106      	bne.n	8003f1a <HAL_RCC_OscConfig+0x7a>
 8003f0c:	4b84      	ldr	r3, [pc, #528]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a83      	ldr	r2, [pc, #524]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	e02e      	b.n	8003f78 <HAL_RCC_OscConfig+0xd8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x9c>
 8003f22:	4b7f      	ldr	r3, [pc, #508]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a7e      	ldr	r2, [pc, #504]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	4b7c      	ldr	r3, [pc, #496]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a7b      	ldr	r2, [pc, #492]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e01d      	b.n	8003f78 <HAL_RCC_OscConfig+0xd8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f44:	d10c      	bne.n	8003f60 <HAL_RCC_OscConfig+0xc0>
 8003f46:	4b76      	ldr	r3, [pc, #472]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a75      	ldr	r2, [pc, #468]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4b73      	ldr	r3, [pc, #460]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a72      	ldr	r2, [pc, #456]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e00b      	b.n	8003f78 <HAL_RCC_OscConfig+0xd8>
 8003f60:	4b6f      	ldr	r3, [pc, #444]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a6e      	ldr	r2, [pc, #440]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	4b6c      	ldr	r3, [pc, #432]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a6b      	ldr	r2, [pc, #428]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d013      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fe fe6c 	bl	8002c5c <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f88:	f7fe fe68 	bl	8002c5c <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e229      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	4b61      	ldr	r3, [pc, #388]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0xe8>
 8003fa6:	e014      	b.n	8003fd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fe fe58 	bl	8002c5c <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fe fe54 	bl	8002c5c <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	; 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e215      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc2:	4b57      	ldr	r3, [pc, #348]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x110>
 8003fce:	e000      	b.n	8003fd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d069      	beq.n	80040b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fde:	4b50      	ldr	r3, [pc, #320]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fea:	4b4d      	ldr	r3, [pc, #308]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d11c      	bne.n	8004030 <HAL_RCC_OscConfig+0x190>
 8003ff6:	4b4a      	ldr	r3, [pc, #296]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d116      	bne.n	8004030 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004002:	4b47      	ldr	r3, [pc, #284]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_RCC_OscConfig+0x17a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d001      	beq.n	800401a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e1e9      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401a:	4b41      	ldr	r3, [pc, #260]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	493d      	ldr	r1, [pc, #244]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402e:	e040      	b.n	80040b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d023      	beq.n	8004080 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004038:	4b39      	ldr	r3, [pc, #228]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a38      	ldr	r2, [pc, #224]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fe fe0a 	bl	8002c5c <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404c:	f7fe fe06 	bl	8002c5c <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e1c7      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405e:	4b30      	ldr	r3, [pc, #192]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406a:	4b2d      	ldr	r3, [pc, #180]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4929      	ldr	r1, [pc, #164]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]
 800407e:	e018      	b.n	80040b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004080:	4b27      	ldr	r3, [pc, #156]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a26      	ldr	r2, [pc, #152]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8004086:	f023 0301 	bic.w	r3, r3, #1
 800408a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fe fde6 	bl	8002c5c <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004094:	f7fe fde2 	bl	8002c5c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e1a3      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a6:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d038      	beq.n	8004130 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d019      	beq.n	80040fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c6:	4b16      	ldr	r3, [pc, #88]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 80040c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ca:	4a15      	ldr	r2, [pc, #84]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d2:	f7fe fdc3 	bl	8002c5c <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040da:	f7fe fdbf 	bl	8002c5c <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e180      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 80040ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x23a>
 80040f8:	e01a      	b.n	8004130 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040fa:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 80040fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fe:	4a08      	ldr	r2, [pc, #32]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004106:	f7fe fda9 	bl	8002c5c <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800410e:	f7fe fda5 	bl	8002c5c <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d903      	bls.n	8004124 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e166      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
 8004120:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004124:	4b92      	ldr	r3, [pc, #584]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1ee      	bne.n	800410e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80a4 	beq.w	8004286 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413e:	4b8c      	ldr	r3, [pc, #560]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10d      	bne.n	8004166 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800414a:	4b89      	ldr	r3, [pc, #548]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	4a88      	ldr	r2, [pc, #544]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004154:	6413      	str	r3, [r2, #64]	; 0x40
 8004156:	4b86      	ldr	r3, [pc, #536]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004166:	4b83      	ldr	r3, [pc, #524]	; (8004374 <HAL_RCC_OscConfig+0x4d4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d118      	bne.n	80041a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004172:	4b80      	ldr	r3, [pc, #512]	; (8004374 <HAL_RCC_OscConfig+0x4d4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a7f      	ldr	r2, [pc, #508]	; (8004374 <HAL_RCC_OscConfig+0x4d4>)
 8004178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800417e:	f7fe fd6d 	bl	8002c5c <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004186:	f7fe fd69 	bl	8002c5c <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b64      	cmp	r3, #100	; 0x64
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e12a      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004198:	4b76      	ldr	r3, [pc, #472]	; (8004374 <HAL_RCC_OscConfig+0x4d4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d106      	bne.n	80041ba <HAL_RCC_OscConfig+0x31a>
 80041ac:	4b70      	ldr	r3, [pc, #448]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b0:	4a6f      	ldr	r2, [pc, #444]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	6713      	str	r3, [r2, #112]	; 0x70
 80041b8:	e02d      	b.n	8004216 <HAL_RCC_OscConfig+0x376>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10c      	bne.n	80041dc <HAL_RCC_OscConfig+0x33c>
 80041c2:	4b6b      	ldr	r3, [pc, #428]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c6:	4a6a      	ldr	r2, [pc, #424]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	6713      	str	r3, [r2, #112]	; 0x70
 80041ce:	4b68      	ldr	r3, [pc, #416]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	4a67      	ldr	r2, [pc, #412]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041d4:	f023 0304 	bic.w	r3, r3, #4
 80041d8:	6713      	str	r3, [r2, #112]	; 0x70
 80041da:	e01c      	b.n	8004216 <HAL_RCC_OscConfig+0x376>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b05      	cmp	r3, #5
 80041e2:	d10c      	bne.n	80041fe <HAL_RCC_OscConfig+0x35e>
 80041e4:	4b62      	ldr	r3, [pc, #392]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	4a61      	ldr	r2, [pc, #388]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041ea:	f043 0304 	orr.w	r3, r3, #4
 80041ee:	6713      	str	r3, [r2, #112]	; 0x70
 80041f0:	4b5f      	ldr	r3, [pc, #380]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	4a5e      	ldr	r2, [pc, #376]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	6713      	str	r3, [r2, #112]	; 0x70
 80041fc:	e00b      	b.n	8004216 <HAL_RCC_OscConfig+0x376>
 80041fe:	4b5c      	ldr	r3, [pc, #368]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	4a5b      	ldr	r2, [pc, #364]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004204:	f023 0301 	bic.w	r3, r3, #1
 8004208:	6713      	str	r3, [r2, #112]	; 0x70
 800420a:	4b59      	ldr	r3, [pc, #356]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	4a58      	ldr	r2, [pc, #352]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004210:	f023 0304 	bic.w	r3, r3, #4
 8004214:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d015      	beq.n	800424a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421e:	f7fe fd1d 	bl	8002c5c <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004224:	e00a      	b.n	800423c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004226:	f7fe fd19 	bl	8002c5c <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f241 3288 	movw	r2, #5000	; 0x1388
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e0d8      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423c:	4b4c      	ldr	r3, [pc, #304]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ee      	beq.n	8004226 <HAL_RCC_OscConfig+0x386>
 8004248:	e014      	b.n	8004274 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424a:	f7fe fd07 	bl	8002c5c <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004250:	e00a      	b.n	8004268 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004252:	f7fe fd03 	bl	8002c5c <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004260:	4293      	cmp	r3, r2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e0c2      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004268:	4b41      	ldr	r3, [pc, #260]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1ee      	bne.n	8004252 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d105      	bne.n	8004286 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427a:	4b3d      	ldr	r3, [pc, #244]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	4a3c      	ldr	r2, [pc, #240]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004284:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 80ae 	beq.w	80043ec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004290:	4b37      	ldr	r3, [pc, #220]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b08      	cmp	r3, #8
 800429a:	d06d      	beq.n	8004378 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d14b      	bne.n	800433c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a4:	4b32      	ldr	r3, [pc, #200]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a31      	ldr	r2, [pc, #196]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80042aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b0:	f7fe fcd4 	bl	8002c5c <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b8:	f7fe fcd0 	bl	8002c5c <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e091      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ca:	4b29      	ldr	r3, [pc, #164]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	019b      	lsls	r3, r3, #6
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	085b      	lsrs	r3, r3, #1
 80042ee:	3b01      	subs	r3, #1
 80042f0:	041b      	lsls	r3, r3, #16
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	061b      	lsls	r3, r3, #24
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	071b      	lsls	r3, r3, #28
 8004302:	491b      	ldr	r1, [pc, #108]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004304:	4313      	orrs	r3, r2
 8004306:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004308:	4b19      	ldr	r3, [pc, #100]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a18      	ldr	r2, [pc, #96]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 800430e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fe fca2 	bl	8002c5c <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431c:	f7fe fc9e 	bl	8002c5c <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e05f      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0x47c>
 800433a:	e057      	b.n	80043ec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a0b      	ldr	r2, [pc, #44]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fe fc88 	bl	8002c5c <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004350:	f7fe fc84 	bl	8002c5c <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e045      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004362:	4b03      	ldr	r3, [pc, #12]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x4b0>
 800436e:	e03d      	b.n	80043ec <HAL_RCC_OscConfig+0x54c>
 8004370:	40023800 	.word	0x40023800
 8004374:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004378:	4b1f      	ldr	r3, [pc, #124]	; (80043f8 <HAL_RCC_OscConfig+0x558>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d030      	beq.n	80043e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004390:	429a      	cmp	r2, r3
 8004392:	d129      	bne.n	80043e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800439e:	429a      	cmp	r2, r3
 80043a0:	d122      	bne.n	80043e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043a8:	4013      	ands	r3, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d119      	bne.n	80043e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	3b01      	subs	r3, #1
 80043c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d10f      	bne.n	80043e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d107      	bne.n	80043e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40023800 	.word	0x40023800

080043fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0d0      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004414:	4b6a      	ldr	r3, [pc, #424]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d910      	bls.n	8004444 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004422:	4b67      	ldr	r3, [pc, #412]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 020f 	bic.w	r2, r3, #15
 800442a:	4965      	ldr	r1, [pc, #404]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	4313      	orrs	r3, r2
 8004430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004432:	4b63      	ldr	r3, [pc, #396]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e0b8      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d020      	beq.n	8004492 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800445c:	4b59      	ldr	r3, [pc, #356]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	4a58      	ldr	r2, [pc, #352]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004466:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004474:	4b53      	ldr	r3, [pc, #332]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a52      	ldr	r2, [pc, #328]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 800447a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800447e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004480:	4b50      	ldr	r3, [pc, #320]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	494d      	ldr	r1, [pc, #308]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 800448e:	4313      	orrs	r3, r2
 8004490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d040      	beq.n	8004520 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d107      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a6:	4b47      	ldr	r3, [pc, #284]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d115      	bne.n	80044de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e07f      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d107      	bne.n	80044ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044be:	4b41      	ldr	r3, [pc, #260]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e073      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ce:	4b3d      	ldr	r3, [pc, #244]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e06b      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044de:	4b39      	ldr	r3, [pc, #228]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f023 0203 	bic.w	r2, r3, #3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	4936      	ldr	r1, [pc, #216]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f0:	f7fe fbb4 	bl	8002c5c <HAL_GetTick>
 80044f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f6:	e00a      	b.n	800450e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f8:	f7fe fbb0 	bl	8002c5c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f241 3288 	movw	r2, #5000	; 0x1388
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e053      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450e:	4b2d      	ldr	r3, [pc, #180]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 020c 	and.w	r2, r3, #12
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	429a      	cmp	r2, r3
 800451e:	d1eb      	bne.n	80044f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004520:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d210      	bcs.n	8004550 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452e:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 020f 	bic.w	r2, r3, #15
 8004536:	4922      	ldr	r1, [pc, #136]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	4313      	orrs	r3, r2
 800453c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800453e:	4b20      	ldr	r3, [pc, #128]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d001      	beq.n	8004550 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e032      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d008      	beq.n	800456e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800455c:	4b19      	ldr	r3, [pc, #100]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4916      	ldr	r1, [pc, #88]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 800456a:	4313      	orrs	r3, r2
 800456c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d009      	beq.n	800458e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800457a:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	490e      	ldr	r1, [pc, #56]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800458e:	f000 f821 	bl	80045d4 <HAL_RCC_GetSysClockFreq>
 8004592:	4602      	mov	r2, r0
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	091b      	lsrs	r3, r3, #4
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	490a      	ldr	r1, [pc, #40]	; (80045c8 <HAL_RCC_ClockConfig+0x1cc>)
 80045a0:	5ccb      	ldrb	r3, [r1, r3]
 80045a2:	fa22 f303 	lsr.w	r3, r2, r3
 80045a6:	4a09      	ldr	r2, [pc, #36]	; (80045cc <HAL_RCC_ClockConfig+0x1d0>)
 80045a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045aa:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <HAL_RCC_ClockConfig+0x1d4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe fb10 	bl	8002bd4 <HAL_InitTick>

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40023c00 	.word	0x40023c00
 80045c4:	40023800 	.word	0x40023800
 80045c8:	08009898 	.word	0x08009898
 80045cc:	20000054 	.word	0x20000054
 80045d0:	2000005c 	.word	0x2000005c

080045d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045d8:	b094      	sub	sp, #80	; 0x50
 80045da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	647b      	str	r3, [r7, #68]	; 0x44
 80045e0:	2300      	movs	r3, #0
 80045e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e4:	2300      	movs	r3, #0
 80045e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ec:	4b79      	ldr	r3, [pc, #484]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 030c 	and.w	r3, r3, #12
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d00d      	beq.n	8004614 <HAL_RCC_GetSysClockFreq+0x40>
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	f200 80e1 	bhi.w	80047c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0x34>
 8004602:	2b04      	cmp	r3, #4
 8004604:	d003      	beq.n	800460e <HAL_RCC_GetSysClockFreq+0x3a>
 8004606:	e0db      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004608:	4b73      	ldr	r3, [pc, #460]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800460a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800460c:	e0db      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800460e:	4b73      	ldr	r3, [pc, #460]	; (80047dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004610:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004612:	e0d8      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004614:	4b6f      	ldr	r3, [pc, #444]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800461c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800461e:	4b6d      	ldr	r3, [pc, #436]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d063      	beq.n	80046f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800462a:	4b6a      	ldr	r3, [pc, #424]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	099b      	lsrs	r3, r3, #6
 8004630:	2200      	movs	r2, #0
 8004632:	63bb      	str	r3, [r7, #56]	; 0x38
 8004634:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463c:	633b      	str	r3, [r7, #48]	; 0x30
 800463e:	2300      	movs	r3, #0
 8004640:	637b      	str	r3, [r7, #52]	; 0x34
 8004642:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004646:	4622      	mov	r2, r4
 8004648:	462b      	mov	r3, r5
 800464a:	f04f 0000 	mov.w	r0, #0
 800464e:	f04f 0100 	mov.w	r1, #0
 8004652:	0159      	lsls	r1, r3, #5
 8004654:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004658:	0150      	lsls	r0, r2, #5
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4621      	mov	r1, r4
 8004660:	1a51      	subs	r1, r2, r1
 8004662:	6139      	str	r1, [r7, #16]
 8004664:	4629      	mov	r1, r5
 8004666:	eb63 0301 	sbc.w	r3, r3, r1
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004678:	4659      	mov	r1, fp
 800467a:	018b      	lsls	r3, r1, #6
 800467c:	4651      	mov	r1, sl
 800467e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004682:	4651      	mov	r1, sl
 8004684:	018a      	lsls	r2, r1, #6
 8004686:	4651      	mov	r1, sl
 8004688:	ebb2 0801 	subs.w	r8, r2, r1
 800468c:	4659      	mov	r1, fp
 800468e:	eb63 0901 	sbc.w	r9, r3, r1
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800469e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046a6:	4690      	mov	r8, r2
 80046a8:	4699      	mov	r9, r3
 80046aa:	4623      	mov	r3, r4
 80046ac:	eb18 0303 	adds.w	r3, r8, r3
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	462b      	mov	r3, r5
 80046b4:	eb49 0303 	adc.w	r3, r9, r3
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046c6:	4629      	mov	r1, r5
 80046c8:	024b      	lsls	r3, r1, #9
 80046ca:	4621      	mov	r1, r4
 80046cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046d0:	4621      	mov	r1, r4
 80046d2:	024a      	lsls	r2, r1, #9
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046da:	2200      	movs	r2, #0
 80046dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80046de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046e4:	f7fb fe04 	bl	80002f0 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4613      	mov	r3, r2
 80046ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046f0:	e058      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f2:	4b38      	ldr	r3, [pc, #224]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	099b      	lsrs	r3, r3, #6
 80046f8:	2200      	movs	r2, #0
 80046fa:	4618      	mov	r0, r3
 80046fc:	4611      	mov	r1, r2
 80046fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004702:	623b      	str	r3, [r7, #32]
 8004704:	2300      	movs	r3, #0
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
 8004708:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800470c:	4642      	mov	r2, r8
 800470e:	464b      	mov	r3, r9
 8004710:	f04f 0000 	mov.w	r0, #0
 8004714:	f04f 0100 	mov.w	r1, #0
 8004718:	0159      	lsls	r1, r3, #5
 800471a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800471e:	0150      	lsls	r0, r2, #5
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4641      	mov	r1, r8
 8004726:	ebb2 0a01 	subs.w	sl, r2, r1
 800472a:	4649      	mov	r1, r9
 800472c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800473c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004740:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004744:	ebb2 040a 	subs.w	r4, r2, sl
 8004748:	eb63 050b 	sbc.w	r5, r3, fp
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	00eb      	lsls	r3, r5, #3
 8004756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800475a:	00e2      	lsls	r2, r4, #3
 800475c:	4614      	mov	r4, r2
 800475e:	461d      	mov	r5, r3
 8004760:	4643      	mov	r3, r8
 8004762:	18e3      	adds	r3, r4, r3
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	464b      	mov	r3, r9
 8004768:	eb45 0303 	adc.w	r3, r5, r3
 800476c:	607b      	str	r3, [r7, #4]
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	e9d7 4500 	ldrd	r4, r5, [r7]
 800477a:	4629      	mov	r1, r5
 800477c:	028b      	lsls	r3, r1, #10
 800477e:	4621      	mov	r1, r4
 8004780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004784:	4621      	mov	r1, r4
 8004786:	028a      	lsls	r2, r1, #10
 8004788:	4610      	mov	r0, r2
 800478a:	4619      	mov	r1, r3
 800478c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800478e:	2200      	movs	r2, #0
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	61fa      	str	r2, [r7, #28]
 8004794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004798:	f7fb fdaa 	bl	80002f0 <__aeabi_uldivmod>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4613      	mov	r3, r2
 80047a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	3301      	adds	r3, #1
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80047b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047be:	e002      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80047c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3750      	adds	r7, #80	; 0x50
 80047cc:	46bd      	mov	sp, r7
 80047ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047d2:	bf00      	nop
 80047d4:	40023800 	.word	0x40023800
 80047d8:	00f42400 	.word	0x00f42400
 80047dc:	007a1200 	.word	0x007a1200

080047e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047e6:	681b      	ldr	r3, [r3, #0]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20000054 	.word	0x20000054

080047f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047fc:	f7ff fff0 	bl	80047e0 <HAL_RCC_GetHCLKFreq>
 8004800:	4602      	mov	r2, r0
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	0a9b      	lsrs	r3, r3, #10
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	4903      	ldr	r1, [pc, #12]	; (800481c <HAL_RCC_GetPCLK1Freq+0x24>)
 800480e:	5ccb      	ldrb	r3, [r1, r3]
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40023800 	.word	0x40023800
 800481c:	080098a8 	.word	0x080098a8

08004820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004824:	f7ff ffdc 	bl	80047e0 <HAL_RCC_GetHCLKFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	0b5b      	lsrs	r3, r3, #13
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4903      	ldr	r1, [pc, #12]	; (8004844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40023800 	.word	0x40023800
 8004844:	080098a8 	.word	0x080098a8

08004848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d012      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004870:	4b69      	ldr	r3, [pc, #420]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4a68      	ldr	r2, [pc, #416]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004876:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800487a:	6093      	str	r3, [r2, #8]
 800487c:	4b66      	ldr	r3, [pc, #408]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004884:	4964      	ldr	r1, [pc, #400]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004886:	4313      	orrs	r3, r2
 8004888:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004892:	2301      	movs	r3, #1
 8004894:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d017      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048a2:	4b5d      	ldr	r3, [pc, #372]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b0:	4959      	ldr	r1, [pc, #356]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048c0:	d101      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80048c2:	2301      	movs	r3, #1
 80048c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80048ce:	2301      	movs	r3, #1
 80048d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d017      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048de:	4b4e      	ldr	r3, [pc, #312]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	494a      	ldr	r1, [pc, #296]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048fc:	d101      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80048fe:	2301      	movs	r3, #1
 8004900:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800490a:	2301      	movs	r3, #1
 800490c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800491a:	2301      	movs	r3, #1
 800491c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 808b 	beq.w	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800492c:	4b3a      	ldr	r3, [pc, #232]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	4a39      	ldr	r2, [pc, #228]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004936:	6413      	str	r3, [r2, #64]	; 0x40
 8004938:	4b37      	ldr	r3, [pc, #220]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004944:	4b35      	ldr	r3, [pc, #212]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a34      	ldr	r2, [pc, #208]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800494a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004950:	f7fe f984 	bl	8002c5c <HAL_GetTick>
 8004954:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004956:	e008      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004958:	f7fe f980 	bl	8002c5c <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b64      	cmp	r3, #100	; 0x64
 8004964:	d901      	bls.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e38f      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800496a:	4b2c      	ldr	r3, [pc, #176]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004976:	4b28      	ldr	r3, [pc, #160]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d035      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	429a      	cmp	r2, r3
 8004992:	d02e      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004994:	4b20      	ldr	r3, [pc, #128]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800499e:	4b1e      	ldr	r3, [pc, #120]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a2:	4a1d      	ldr	r2, [pc, #116]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049aa:	4b1b      	ldr	r3, [pc, #108]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	4a1a      	ldr	r2, [pc, #104]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80049b6:	4a18      	ldr	r2, [pc, #96]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049bc:	4b16      	ldr	r3, [pc, #88]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d114      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fe f948 	bl	8002c5c <HAL_GetTick>
 80049cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ce:	e00a      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d0:	f7fe f944 	bl	8002c5c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	; 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e351      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e6:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0ee      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049fe:	d111      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a0c:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a0e:	400b      	ands	r3, r1
 8004a10:	4901      	ldr	r1, [pc, #4]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	608b      	str	r3, [r1, #8]
 8004a16:	e00b      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	40007000 	.word	0x40007000
 8004a20:	0ffffcff 	.word	0x0ffffcff
 8004a24:	4bac      	ldr	r3, [pc, #688]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	4aab      	ldr	r2, [pc, #684]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a2e:	6093      	str	r3, [r2, #8]
 8004a30:	4ba9      	ldr	r3, [pc, #676]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a3c:	49a6      	ldr	r1, [pc, #664]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0310 	and.w	r3, r3, #16
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d010      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a4e:	4ba2      	ldr	r3, [pc, #648]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a54:	4aa0      	ldr	r2, [pc, #640]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a5e:	4b9e      	ldr	r3, [pc, #632]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	499b      	ldr	r1, [pc, #620]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a7c:	4b96      	ldr	r3, [pc, #600]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a8a:	4993      	ldr	r1, [pc, #588]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a9e:	4b8e      	ldr	r3, [pc, #568]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aac:	498a      	ldr	r1, [pc, #552]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ac0:	4b85      	ldr	r3, [pc, #532]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ace:	4982      	ldr	r1, [pc, #520]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ae2:	4b7d      	ldr	r3, [pc, #500]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	4979      	ldr	r1, [pc, #484]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b04:	4b74      	ldr	r3, [pc, #464]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0a:	f023 0203 	bic.w	r2, r3, #3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	4971      	ldr	r1, [pc, #452]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b26:	4b6c      	ldr	r3, [pc, #432]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2c:	f023 020c 	bic.w	r2, r3, #12
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b34:	4968      	ldr	r1, [pc, #416]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b48:	4b63      	ldr	r3, [pc, #396]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b56:	4960      	ldr	r1, [pc, #384]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b6a:	4b5b      	ldr	r3, [pc, #364]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b70:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b78:	4957      	ldr	r1, [pc, #348]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b8c:	4b52      	ldr	r3, [pc, #328]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9a:	494f      	ldr	r1, [pc, #316]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004bae:	4b4a      	ldr	r3, [pc, #296]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbc:	4946      	ldr	r1, [pc, #280]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004bd0:	4b41      	ldr	r3, [pc, #260]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bde:	493e      	ldr	r1, [pc, #248]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004bf2:	4b39      	ldr	r3, [pc, #228]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c00:	4935      	ldr	r1, [pc, #212]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c14:	4b30      	ldr	r3, [pc, #192]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c22:	492d      	ldr	r1, [pc, #180]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d011      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c36:	4b28      	ldr	r3, [pc, #160]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c44:	4924      	ldr	r1, [pc, #144]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c54:	d101      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c56:	2301      	movs	r3, #1
 8004c58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c66:	2301      	movs	r3, #1
 8004c68:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c76:	4b18      	ldr	r3, [pc, #96]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c84:	4914      	ldr	r1, [pc, #80]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00b      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c98:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ca8:	490b      	ldr	r1, [pc, #44]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00f      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ccc:	4902      	ldr	r1, [pc, #8]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cd4:	e002      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00b      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ce8:	4b8a      	ldr	r3, [pc, #552]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	4986      	ldr	r1, [pc, #536]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00b      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d0c:	4b81      	ldr	r3, [pc, #516]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d12:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d1c:	497d      	ldr	r1, [pc, #500]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d006      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 80d6 	beq.w	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d38:	4b76      	ldr	r3, [pc, #472]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a75      	ldr	r2, [pc, #468]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d44:	f7fd ff8a 	bl	8002c5c <HAL_GetTick>
 8004d48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d4c:	f7fd ff86 	bl	8002c5c <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	; 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e195      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d5e:	4b6d      	ldr	r3, [pc, #436]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d021      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d11d      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d7e:	4b65      	ldr	r3, [pc, #404]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d84:	0c1b      	lsrs	r3, r3, #16
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d8c:	4b61      	ldr	r3, [pc, #388]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d92:	0e1b      	lsrs	r3, r3, #24
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	019a      	lsls	r2, r3, #6
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	041b      	lsls	r3, r3, #16
 8004da4:	431a      	orrs	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	061b      	lsls	r3, r3, #24
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	071b      	lsls	r3, r3, #28
 8004db2:	4958      	ldr	r1, [pc, #352]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d004      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dce:	d00a      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d02e      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004de4:	d129      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004de6:	4b4b      	ldr	r3, [pc, #300]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dec:	0c1b      	lsrs	r3, r3, #16
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004df4:	4b47      	ldr	r3, [pc, #284]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dfa:	0f1b      	lsrs	r3, r3, #28
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	019a      	lsls	r2, r3, #6
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	041b      	lsls	r3, r3, #16
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	061b      	lsls	r3, r3, #24
 8004e14:	431a      	orrs	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	071b      	lsls	r3, r3, #28
 8004e1a:	493e      	ldr	r1, [pc, #248]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e22:	4b3c      	ldr	r3, [pc, #240]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e28:	f023 021f 	bic.w	r2, r3, #31
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	3b01      	subs	r3, #1
 8004e32:	4938      	ldr	r1, [pc, #224]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01d      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e46:	4b33      	ldr	r3, [pc, #204]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e4c:	0e1b      	lsrs	r3, r3, #24
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e54:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e5a:	0f1b      	lsrs	r3, r3, #28
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	019a      	lsls	r2, r3, #6
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	041b      	lsls	r3, r3, #16
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	061b      	lsls	r3, r3, #24
 8004e74:	431a      	orrs	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	071b      	lsls	r3, r3, #28
 8004e7a:	4926      	ldr	r1, [pc, #152]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d011      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	019a      	lsls	r2, r3, #6
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	041b      	lsls	r3, r3, #16
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	061b      	lsls	r3, r3, #24
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	071b      	lsls	r3, r3, #28
 8004eaa:	491a      	ldr	r1, [pc, #104]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004eb2:	4b18      	ldr	r3, [pc, #96]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a17      	ldr	r2, [pc, #92]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ebe:	f7fd fecd 	bl	8002c5c <HAL_GetTick>
 8004ec2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ec6:	f7fd fec9 	bl	8002c5c <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b64      	cmp	r3, #100	; 0x64
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e0d8      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ed8:	4b0e      	ldr	r3, [pc, #56]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f0      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	f040 80ce 	bne.w	8005088 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004eec:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a08      	ldr	r2, [pc, #32]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef8:	f7fd feb0 	bl	8002c5c <HAL_GetTick>
 8004efc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004efe:	e00b      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f00:	f7fd feac 	bl	8002c5c <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b64      	cmp	r3, #100	; 0x64
 8004f0c:	d904      	bls.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e0bb      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004f12:	bf00      	nop
 8004f14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f18:	4b5e      	ldr	r3, [pc, #376]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f24:	d0ec      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d009      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d02e      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d12a      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f4e:	4b51      	ldr	r3, [pc, #324]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f54:	0c1b      	lsrs	r3, r3, #16
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f5c:	4b4d      	ldr	r3, [pc, #308]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f62:	0f1b      	lsrs	r3, r3, #28
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	019a      	lsls	r2, r3, #6
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	041b      	lsls	r3, r3, #16
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	061b      	lsls	r3, r3, #24
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	071b      	lsls	r3, r3, #28
 8004f82:	4944      	ldr	r1, [pc, #272]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f8a:	4b42      	ldr	r3, [pc, #264]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	493d      	ldr	r1, [pc, #244]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d022      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fb8:	d11d      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fba:	4b36      	ldr	r3, [pc, #216]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc0:	0e1b      	lsrs	r3, r3, #24
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fc8:	4b32      	ldr	r3, [pc, #200]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fce:	0f1b      	lsrs	r3, r3, #28
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	019a      	lsls	r2, r3, #6
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	041b      	lsls	r3, r3, #16
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	061b      	lsls	r3, r3, #24
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	071b      	lsls	r3, r3, #28
 8004fee:	4929      	ldr	r1, [pc, #164]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d028      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005002:	4b24      	ldr	r3, [pc, #144]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	0e1b      	lsrs	r3, r3, #24
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005010:	4b20      	ldr	r3, [pc, #128]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005016:	0c1b      	lsrs	r3, r3, #16
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	019a      	lsls	r2, r3, #6
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	041b      	lsls	r3, r3, #16
 8005028:	431a      	orrs	r2, r3
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	061b      	lsls	r3, r3, #24
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	071b      	lsls	r3, r3, #28
 8005036:	4917      	ldr	r1, [pc, #92]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800503e:	4b15      	ldr	r3, [pc, #84]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005044:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	4911      	ldr	r1, [pc, #68]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005054:	4b0f      	ldr	r3, [pc, #60]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a0e      	ldr	r2, [pc, #56]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800505a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005060:	f7fd fdfc 	bl	8002c5c <HAL_GetTick>
 8005064:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005066:	e008      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005068:	f7fd fdf8 	bl	8002c5c <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b64      	cmp	r3, #100	; 0x64
 8005074:	d901      	bls.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e007      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800507a:	4b06      	ldr	r3, [pc, #24]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005086:	d1ef      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3720      	adds	r7, #32
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40023800 	.word	0x40023800

08005098 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e01c      	b.n	80050e4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	795b      	ldrb	r3, [r3, #5]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d105      	bne.n	80050c0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fc fc6c 	bl	8001998 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0204 	orr.w	r2, r2, #4
 80050d4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e09d      	b.n	800523a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	d108      	bne.n	8005118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510e:	d009      	beq.n	8005124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	61da      	str	r2, [r3, #28]
 8005116:	e005      	b.n	8005124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fc fc9c 	bl	8001a7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800515a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005164:	d902      	bls.n	800516c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	e002      	b.n	8005172 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800516c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005170:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800517a:	d007      	beq.n	800518c <HAL_SPI_Init+0xa0>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005184:	d002      	beq.n	800518c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	431a      	orrs	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ce:	ea42 0103 	orr.w	r1, r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	0c1b      	lsrs	r3, r3, #16
 80051e8:	f003 0204 	and.w	r2, r3, #4
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005208:	ea42 0103 	orr.w	r1, r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005228:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b088      	sub	sp, #32
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	603b      	str	r3, [r7, #0]
 800524e:	4613      	mov	r3, r2
 8005250:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_SPI_Transmit+0x22>
 8005260:	2302      	movs	r3, #2
 8005262:	e158      	b.n	8005516 <HAL_SPI_Transmit+0x2d4>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800526c:	f7fd fcf6 	bl	8002c5c <HAL_GetTick>
 8005270:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005272:	88fb      	ldrh	r3, [r7, #6]
 8005274:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b01      	cmp	r3, #1
 8005280:	d002      	beq.n	8005288 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005282:	2302      	movs	r3, #2
 8005284:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005286:	e13d      	b.n	8005504 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_SPI_Transmit+0x52>
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005298:	e134      	b.n	8005504 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2203      	movs	r2, #3
 800529e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	88fa      	ldrh	r2, [r7, #6]
 80052b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	88fa      	ldrh	r2, [r7, #6]
 80052b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e4:	d10f      	bne.n	8005306 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005304:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005310:	2b40      	cmp	r3, #64	; 0x40
 8005312:	d007      	beq.n	8005324 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005322:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800532c:	d94b      	bls.n	80053c6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <HAL_SPI_Transmit+0xfa>
 8005336:	8afb      	ldrh	r3, [r7, #22]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d13e      	bne.n	80053ba <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	881a      	ldrh	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	1c9a      	adds	r2, r3, #2
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005360:	e02b      	b.n	80053ba <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b02      	cmp	r3, #2
 800536e:	d112      	bne.n	8005396 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	881a      	ldrh	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	1c9a      	adds	r2, r3, #2
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005394:	e011      	b.n	80053ba <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005396:	f7fd fc61 	bl	8002c5c <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d803      	bhi.n	80053ae <HAL_SPI_Transmit+0x16c>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ac:	d102      	bne.n	80053b4 <HAL_SPI_Transmit+0x172>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d102      	bne.n	80053ba <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053b8:	e0a4      	b.n	8005504 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1ce      	bne.n	8005362 <HAL_SPI_Transmit+0x120>
 80053c4:	e07c      	b.n	80054c0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_SPI_Transmit+0x192>
 80053ce:	8afb      	ldrh	r3, [r7, #22]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d170      	bne.n	80054b6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d912      	bls.n	8005404 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	881a      	ldrh	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ee:	1c9a      	adds	r2, r3, #2
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b02      	subs	r3, #2
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005402:	e058      	b.n	80054b6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	330c      	adds	r3, #12
 800540e:	7812      	ldrb	r2, [r2, #0]
 8005410:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800542a:	e044      	b.n	80054b6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b02      	cmp	r3, #2
 8005438:	d12b      	bne.n	8005492 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543e:	b29b      	uxth	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d912      	bls.n	800546a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	881a      	ldrh	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	1c9a      	adds	r2, r3, #2
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b02      	subs	r3, #2
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005468:	e025      	b.n	80054b6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	330c      	adds	r3, #12
 8005474:	7812      	ldrb	r2, [r2, #0]
 8005476:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005490:	e011      	b.n	80054b6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005492:	f7fd fbe3 	bl	8002c5c <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d803      	bhi.n	80054aa <HAL_SPI_Transmit+0x268>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a8:	d102      	bne.n	80054b0 <HAL_SPI_Transmit+0x26e>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d102      	bne.n	80054b6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054b4:	e026      	b.n	8005504 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1b5      	bne.n	800542c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	6839      	ldr	r1, [r7, #0]
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f949 	bl	800575c <SPI_EndRxTxTransaction>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2220      	movs	r2, #32
 80054d4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054de:	2300      	movs	r3, #0
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	77fb      	strb	r3, [r7, #31]
 8005500:	e000      	b.n	8005504 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005502:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005514:	7ffb      	ldrb	r3, [r7, #31]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3720      	adds	r7, #32
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	4613      	mov	r3, r2
 800552e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005530:	f7fd fb94 	bl	8002c5c <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	4413      	add	r3, r2
 800553e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005540:	f7fd fb8c 	bl	8002c5c <HAL_GetTick>
 8005544:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005546:	4b39      	ldr	r3, [pc, #228]	; (800562c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	015b      	lsls	r3, r3, #5
 800554c:	0d1b      	lsrs	r3, r3, #20
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	fb02 f303 	mul.w	r3, r2, r3
 8005554:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005556:	e054      	b.n	8005602 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555e:	d050      	beq.n	8005602 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005560:	f7fd fb7c 	bl	8002c5c <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	69fa      	ldr	r2, [r7, #28]
 800556c:	429a      	cmp	r2, r3
 800556e:	d902      	bls.n	8005576 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d13d      	bne.n	80055f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005584:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800558e:	d111      	bne.n	80055b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005598:	d004      	beq.n	80055a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a2:	d107      	bne.n	80055b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055bc:	d10f      	bne.n	80055de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e017      	b.n	8005622 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	3b01      	subs	r3, #1
 8005600:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4013      	ands	r3, r2
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	429a      	cmp	r2, r3
 8005610:	bf0c      	ite	eq
 8005612:	2301      	moveq	r3, #1
 8005614:	2300      	movne	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	429a      	cmp	r2, r3
 800561e:	d19b      	bne.n	8005558 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	20000054 	.word	0x20000054

08005630 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	; 0x28
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005642:	f7fd fb0b 	bl	8002c5c <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	1a9b      	subs	r3, r3, r2
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	4413      	add	r3, r2
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005652:	f7fd fb03 	bl	8002c5c <HAL_GetTick>
 8005656:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005660:	4b3d      	ldr	r3, [pc, #244]	; (8005758 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	00da      	lsls	r2, r3, #3
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	0d1b      	lsrs	r3, r3, #20
 8005670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005672:	fb02 f303 	mul.w	r3, r2, r3
 8005676:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005678:	e060      	b.n	800573c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005680:	d107      	bne.n	8005692 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d104      	bne.n	8005692 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005690:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005698:	d050      	beq.n	800573c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800569a:	f7fd fadf 	bl	8002c5c <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d902      	bls.n	80056b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d13d      	bne.n	800572c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056c8:	d111      	bne.n	80056ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d2:	d004      	beq.n	80056de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056dc:	d107      	bne.n	80056ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f6:	d10f      	bne.n	8005718 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005716:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e010      	b.n	800574e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	3b01      	subs	r3, #1
 800573a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	4013      	ands	r3, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	429a      	cmp	r2, r3
 800574a:	d196      	bne.n	800567a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3728      	adds	r7, #40	; 0x28
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000054 	.word	0x20000054

0800575c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af02      	add	r7, sp, #8
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2200      	movs	r2, #0
 8005770:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f7ff ff5b 	bl	8005630 <SPI_WaitFifoStateUntilTimeout>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d007      	beq.n	8005790 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005784:	f043 0220 	orr.w	r2, r3, #32
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e046      	b.n	800581e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005790:	4b25      	ldr	r3, [pc, #148]	; (8005828 <SPI_EndRxTxTransaction+0xcc>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a25      	ldr	r2, [pc, #148]	; (800582c <SPI_EndRxTxTransaction+0xd0>)
 8005796:	fba2 2303 	umull	r2, r3, r2, r3
 800579a:	0d5b      	lsrs	r3, r3, #21
 800579c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057a0:	fb02 f303 	mul.w	r3, r2, r3
 80057a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ae:	d112      	bne.n	80057d6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2200      	movs	r2, #0
 80057b8:	2180      	movs	r1, #128	; 0x80
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f7ff feb0 	bl	8005520 <SPI_WaitFlagStateUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d016      	beq.n	80057f4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ca:	f043 0220 	orr.w	r2, r3, #32
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e023      	b.n	800581e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	3b01      	subs	r3, #1
 80057e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ec:	2b80      	cmp	r3, #128	; 0x80
 80057ee:	d0f2      	beq.n	80057d6 <SPI_EndRxTxTransaction+0x7a>
 80057f0:	e000      	b.n	80057f4 <SPI_EndRxTxTransaction+0x98>
        break;
 80057f2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff ff15 	bl	8005630 <SPI_WaitFifoStateUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d007      	beq.n	800581c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005810:	f043 0220 	orr.w	r2, r3, #32
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e000      	b.n	800581e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20000054 	.word	0x20000054
 800582c:	165e9f81 	.word	0x165e9f81

08005830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e049      	b.n	80058d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fc fb3e 	bl	8001ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3304      	adds	r3, #4
 800586c:	4619      	mov	r1, r3
 800586e:	4610      	mov	r0, r2
 8005870:	f000 faca 	bl	8005e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d001      	beq.n	80058f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e054      	b.n	80059a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0201 	orr.w	r2, r2, #1
 800590e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a26      	ldr	r2, [pc, #152]	; (80059b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d022      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005922:	d01d      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a22      	ldr	r2, [pc, #136]	; (80059b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d018      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a21      	ldr	r2, [pc, #132]	; (80059b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d013      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1f      	ldr	r2, [pc, #124]	; (80059bc <HAL_TIM_Base_Start_IT+0xdc>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00e      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1e      	ldr	r2, [pc, #120]	; (80059c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d009      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a1c      	ldr	r2, [pc, #112]	; (80059c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d004      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1b      	ldr	r2, [pc, #108]	; (80059c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d115      	bne.n	800598c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	4b19      	ldr	r3, [pc, #100]	; (80059cc <HAL_TIM_Base_Start_IT+0xec>)
 8005968:	4013      	ands	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b06      	cmp	r3, #6
 8005970:	d015      	beq.n	800599e <HAL_TIM_Base_Start_IT+0xbe>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005978:	d011      	beq.n	800599e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0201 	orr.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598a:	e008      	b.n	800599e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	e000      	b.n	80059a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40010000 	.word	0x40010000
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800
 80059bc:	40000c00 	.word	0x40000c00
 80059c0:	40010400 	.word	0x40010400
 80059c4:	40014000 	.word	0x40014000
 80059c8:	40001800 	.word	0x40001800
 80059cc:	00010007 	.word	0x00010007

080059d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d122      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d11b      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f06f 0202 	mvn.w	r2, #2
 80059fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f9da 	bl	8005dcc <HAL_TIM_IC_CaptureCallback>
 8005a18:	e005      	b.n	8005a26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f9cc 	bl	8005db8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f9dd 	bl	8005de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d122      	bne.n	8005a80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	d11b      	bne.n	8005a80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0204 	mvn.w	r2, #4
 8005a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2202      	movs	r2, #2
 8005a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f9b0 	bl	8005dcc <HAL_TIM_IC_CaptureCallback>
 8005a6c:	e005      	b.n	8005a7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f9a2 	bl	8005db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f9b3 	bl	8005de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d122      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d11b      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0208 	mvn.w	r2, #8
 8005aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2204      	movs	r2, #4
 8005aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f986 	bl	8005dcc <HAL_TIM_IC_CaptureCallback>
 8005ac0:	e005      	b.n	8005ace <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f978 	bl	8005db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f989 	bl	8005de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f003 0310 	and.w	r3, r3, #16
 8005ade:	2b10      	cmp	r3, #16
 8005ae0:	d122      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f003 0310 	and.w	r3, r3, #16
 8005aec:	2b10      	cmp	r3, #16
 8005aee:	d11b      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f06f 0210 	mvn.w	r2, #16
 8005af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2208      	movs	r2, #8
 8005afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f95c 	bl	8005dcc <HAL_TIM_IC_CaptureCallback>
 8005b14:	e005      	b.n	8005b22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f94e 	bl	8005db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f95f 	bl	8005de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d10e      	bne.n	8005b54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d107      	bne.n	8005b54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0201 	mvn.w	r2, #1
 8005b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f928 	bl	8005da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5e:	2b80      	cmp	r3, #128	; 0x80
 8005b60:	d10e      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6c:	2b80      	cmp	r3, #128	; 0x80
 8005b6e:	d107      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fb16 	bl	80061ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b8e:	d10e      	bne.n	8005bae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9a:	2b80      	cmp	r3, #128	; 0x80
 8005b9c:	d107      	bne.n	8005bae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fb09 	bl	80061c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb8:	2b40      	cmp	r3, #64	; 0x40
 8005bba:	d10e      	bne.n	8005bda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
 8005bc8:	d107      	bne.n	8005bda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f90d 	bl	8005df4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f003 0320 	and.w	r3, r3, #32
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	d10e      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	d107      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f06f 0220 	mvn.w	r2, #32
 8005bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fac9 	bl	8006198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c06:	bf00      	nop
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_TIM_ConfigClockSource+0x1c>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e0b4      	b.n	8005d96 <HAL_TIM_ConfigClockSource+0x186>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	4b56      	ldr	r3, [pc, #344]	; (8005da0 <HAL_TIM_ConfigClockSource+0x190>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c64:	d03e      	beq.n	8005ce4 <HAL_TIM_ConfigClockSource+0xd4>
 8005c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c6a:	f200 8087 	bhi.w	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c72:	f000 8086 	beq.w	8005d82 <HAL_TIM_ConfigClockSource+0x172>
 8005c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7a:	d87f      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c7c:	2b70      	cmp	r3, #112	; 0x70
 8005c7e:	d01a      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0xa6>
 8005c80:	2b70      	cmp	r3, #112	; 0x70
 8005c82:	d87b      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c84:	2b60      	cmp	r3, #96	; 0x60
 8005c86:	d050      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x11a>
 8005c88:	2b60      	cmp	r3, #96	; 0x60
 8005c8a:	d877      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c8c:	2b50      	cmp	r3, #80	; 0x50
 8005c8e:	d03c      	beq.n	8005d0a <HAL_TIM_ConfigClockSource+0xfa>
 8005c90:	2b50      	cmp	r3, #80	; 0x50
 8005c92:	d873      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c94:	2b40      	cmp	r3, #64	; 0x40
 8005c96:	d058      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0x13a>
 8005c98:	2b40      	cmp	r3, #64	; 0x40
 8005c9a:	d86f      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c9c:	2b30      	cmp	r3, #48	; 0x30
 8005c9e:	d064      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x15a>
 8005ca0:	2b30      	cmp	r3, #48	; 0x30
 8005ca2:	d86b      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d060      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x15a>
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	d867      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d05c      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x15a>
 8005cb0:	2b10      	cmp	r3, #16
 8005cb2:	d05a      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x15a>
 8005cb4:	e062      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cc6:	f000 f9b9 	bl	800603c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	609a      	str	r2, [r3, #8]
      break;
 8005ce2:	e04f      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cf4:	f000 f9a2 	bl	800603c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d06:	609a      	str	r2, [r3, #8]
      break;
 8005d08:	e03c      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d16:	461a      	mov	r2, r3
 8005d18:	f000 f916 	bl	8005f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2150      	movs	r1, #80	; 0x50
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 f96f 	bl	8006006 <TIM_ITRx_SetConfig>
      break;
 8005d28:	e02c      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d36:	461a      	mov	r2, r3
 8005d38:	f000 f935 	bl	8005fa6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2160      	movs	r1, #96	; 0x60
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 f95f 	bl	8006006 <TIM_ITRx_SetConfig>
      break;
 8005d48:	e01c      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d56:	461a      	mov	r2, r3
 8005d58:	f000 f8f6 	bl	8005f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2140      	movs	r1, #64	; 0x40
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 f94f 	bl	8006006 <TIM_ITRx_SetConfig>
      break;
 8005d68:	e00c      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4619      	mov	r1, r3
 8005d74:	4610      	mov	r0, r2
 8005d76:	f000 f946 	bl	8006006 <TIM_ITRx_SetConfig>
      break;
 8005d7a:	e003      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d80:	e000      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	fffeff88 	.word	0xfffeff88

08005da4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a40      	ldr	r2, [pc, #256]	; (8005f1c <TIM_Base_SetConfig+0x114>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d013      	beq.n	8005e48 <TIM_Base_SetConfig+0x40>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e26:	d00f      	beq.n	8005e48 <TIM_Base_SetConfig+0x40>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a3d      	ldr	r2, [pc, #244]	; (8005f20 <TIM_Base_SetConfig+0x118>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00b      	beq.n	8005e48 <TIM_Base_SetConfig+0x40>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a3c      	ldr	r2, [pc, #240]	; (8005f24 <TIM_Base_SetConfig+0x11c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d007      	beq.n	8005e48 <TIM_Base_SetConfig+0x40>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a3b      	ldr	r2, [pc, #236]	; (8005f28 <TIM_Base_SetConfig+0x120>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d003      	beq.n	8005e48 <TIM_Base_SetConfig+0x40>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a3a      	ldr	r2, [pc, #232]	; (8005f2c <TIM_Base_SetConfig+0x124>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d108      	bne.n	8005e5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a2f      	ldr	r2, [pc, #188]	; (8005f1c <TIM_Base_SetConfig+0x114>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d02b      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e68:	d027      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a2c      	ldr	r2, [pc, #176]	; (8005f20 <TIM_Base_SetConfig+0x118>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d023      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a2b      	ldr	r2, [pc, #172]	; (8005f24 <TIM_Base_SetConfig+0x11c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d01f      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a2a      	ldr	r2, [pc, #168]	; (8005f28 <TIM_Base_SetConfig+0x120>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d01b      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a29      	ldr	r2, [pc, #164]	; (8005f2c <TIM_Base_SetConfig+0x124>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d017      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a28      	ldr	r2, [pc, #160]	; (8005f30 <TIM_Base_SetConfig+0x128>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a27      	ldr	r2, [pc, #156]	; (8005f34 <TIM_Base_SetConfig+0x12c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00f      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a26      	ldr	r2, [pc, #152]	; (8005f38 <TIM_Base_SetConfig+0x130>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00b      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a25      	ldr	r2, [pc, #148]	; (8005f3c <TIM_Base_SetConfig+0x134>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d007      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a24      	ldr	r2, [pc, #144]	; (8005f40 <TIM_Base_SetConfig+0x138>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d003      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a23      	ldr	r2, [pc, #140]	; (8005f44 <TIM_Base_SetConfig+0x13c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d108      	bne.n	8005ecc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <TIM_Base_SetConfig+0x114>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_Base_SetConfig+0xf8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a0c      	ldr	r2, [pc, #48]	; (8005f2c <TIM_Base_SetConfig+0x124>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d103      	bne.n	8005f08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	615a      	str	r2, [r3, #20]
}
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40010000 	.word	0x40010000
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40000800 	.word	0x40000800
 8005f28:	40000c00 	.word	0x40000c00
 8005f2c:	40010400 	.word	0x40010400
 8005f30:	40014000 	.word	0x40014000
 8005f34:	40014400 	.word	0x40014400
 8005f38:	40014800 	.word	0x40014800
 8005f3c:	40001800 	.word	0x40001800
 8005f40:	40001c00 	.word	0x40001c00
 8005f44:	40002000 	.word	0x40002000

08005f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	f023 0201 	bic.w	r2, r3, #1
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f023 030a 	bic.w	r3, r3, #10
 8005f84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	621a      	str	r2, [r3, #32]
}
 8005f9a:	bf00      	nop
 8005f9c:	371c      	adds	r7, #28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b087      	sub	sp, #28
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	f023 0210 	bic.w	r2, r3, #16
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	031b      	lsls	r3, r3, #12
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fe2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	621a      	str	r2, [r3, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006006:	b480      	push	{r7}
 8006008:	b085      	sub	sp, #20
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	f043 0307 	orr.w	r3, r3, #7
 8006028:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	609a      	str	r2, [r3, #8]
}
 8006030:	bf00      	nop
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006056:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	021a      	lsls	r2, r3, #8
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	431a      	orrs	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4313      	orrs	r3, r2
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	609a      	str	r2, [r3, #8]
}
 8006070:	bf00      	nop
 8006072:	371c      	adds	r7, #28
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800608c:	2b01      	cmp	r3, #1
 800608e:	d101      	bne.n	8006094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006090:	2302      	movs	r3, #2
 8006092:	e06d      	b.n	8006170 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a30      	ldr	r2, [pc, #192]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d004      	beq.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a2f      	ldr	r2, [pc, #188]	; (8006180 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d108      	bne.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a20      	ldr	r2, [pc, #128]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d022      	beq.n	8006144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006106:	d01d      	beq.n	8006144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1d      	ldr	r2, [pc, #116]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d018      	beq.n	8006144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a1c      	ldr	r2, [pc, #112]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d013      	beq.n	8006144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1a      	ldr	r2, [pc, #104]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00e      	beq.n	8006144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a15      	ldr	r2, [pc, #84]	; (8006180 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d009      	beq.n	8006144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a16      	ldr	r2, [pc, #88]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d004      	beq.n	8006144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a15      	ldr	r2, [pc, #84]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d10c      	bne.n	800615e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800614a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	4313      	orrs	r3, r2
 8006154:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	40010000 	.word	0x40010000
 8006180:	40010400 	.word	0x40010400
 8006184:	40000400 	.word	0x40000400
 8006188:	40000800 	.word	0x40000800
 800618c:	40000c00 	.word	0x40000c00
 8006190:	40014000 	.word	0x40014000
 8006194:	40001800 	.word	0x40001800

08006198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e040      	b.n	8006268 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d106      	bne.n	80061fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fb ff06 	bl	8002008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2224      	movs	r2, #36	; 0x24
 8006200:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0201 	bic.w	r2, r2, #1
 8006210:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f8b0 	bl	8006378 <UART_SetConfig>
 8006218:	4603      	mov	r3, r0
 800621a:	2b01      	cmp	r3, #1
 800621c:	d101      	bne.n	8006222 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e022      	b.n	8006268 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fb08 	bl	8006840 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800623e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800624e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0201 	orr.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fb8f 	bl	8006984 <UART_CheckIdleState>
 8006266:	4603      	mov	r3, r0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08a      	sub	sp, #40	; 0x28
 8006274:	af02      	add	r7, sp, #8
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	4613      	mov	r3, r2
 800627e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006284:	2b20      	cmp	r3, #32
 8006286:	d171      	bne.n	800636c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <HAL_UART_Transmit+0x24>
 800628e:	88fb      	ldrh	r3, [r7, #6]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e06a      	b.n	800636e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2221      	movs	r2, #33	; 0x21
 80062a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062a6:	f7fc fcd9 	bl	8002c5c <HAL_GetTick>
 80062aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	88fa      	ldrh	r2, [r7, #6]
 80062b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	88fa      	ldrh	r2, [r7, #6]
 80062b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c4:	d108      	bne.n	80062d8 <HAL_UART_Transmit+0x68>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d104      	bne.n	80062d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	e003      	b.n	80062e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062dc:	2300      	movs	r3, #0
 80062de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062e0:	e02c      	b.n	800633c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2200      	movs	r2, #0
 80062ea:	2180      	movs	r1, #128	; 0x80
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 fb96 	bl	8006a1e <UART_WaitOnFlagUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e038      	b.n	800636e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10b      	bne.n	800631a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006310:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	3302      	adds	r3, #2
 8006316:	61bb      	str	r3, [r7, #24]
 8006318:	e007      	b.n	800632a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	781a      	ldrb	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	3301      	adds	r3, #1
 8006328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006330:	b29b      	uxth	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006342:	b29b      	uxth	r3, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1cc      	bne.n	80062e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	2200      	movs	r2, #0
 8006350:	2140      	movs	r1, #64	; 0x40
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 fb63 	bl	8006a1e <UART_WaitOnFlagUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e005      	b.n	800636e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	e000      	b.n	800636e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800636c:	2302      	movs	r3, #2
  }
}
 800636e:	4618      	mov	r0, r3
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	431a      	orrs	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	4313      	orrs	r3, r2
 800639a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	4ba6      	ldr	r3, [pc, #664]	; (800663c <UART_SetConfig+0x2c4>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6812      	ldr	r2, [r2, #0]
 80063aa:	6979      	ldr	r1, [r7, #20]
 80063ac:	430b      	orrs	r3, r1
 80063ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a94      	ldr	r2, [pc, #592]	; (8006640 <UART_SetConfig+0x2c8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d120      	bne.n	8006436 <UART_SetConfig+0xbe>
 80063f4:	4b93      	ldr	r3, [pc, #588]	; (8006644 <UART_SetConfig+0x2cc>)
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d816      	bhi.n	8006430 <UART_SetConfig+0xb8>
 8006402:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <UART_SetConfig+0x90>)
 8006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006408:	08006419 	.word	0x08006419
 800640c:	08006425 	.word	0x08006425
 8006410:	0800641f 	.word	0x0800641f
 8006414:	0800642b 	.word	0x0800642b
 8006418:	2301      	movs	r3, #1
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	e150      	b.n	80066c0 <UART_SetConfig+0x348>
 800641e:	2302      	movs	r3, #2
 8006420:	77fb      	strb	r3, [r7, #31]
 8006422:	e14d      	b.n	80066c0 <UART_SetConfig+0x348>
 8006424:	2304      	movs	r3, #4
 8006426:	77fb      	strb	r3, [r7, #31]
 8006428:	e14a      	b.n	80066c0 <UART_SetConfig+0x348>
 800642a:	2308      	movs	r3, #8
 800642c:	77fb      	strb	r3, [r7, #31]
 800642e:	e147      	b.n	80066c0 <UART_SetConfig+0x348>
 8006430:	2310      	movs	r3, #16
 8006432:	77fb      	strb	r3, [r7, #31]
 8006434:	e144      	b.n	80066c0 <UART_SetConfig+0x348>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a83      	ldr	r2, [pc, #524]	; (8006648 <UART_SetConfig+0x2d0>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d132      	bne.n	80064a6 <UART_SetConfig+0x12e>
 8006440:	4b80      	ldr	r3, [pc, #512]	; (8006644 <UART_SetConfig+0x2cc>)
 8006442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006446:	f003 030c 	and.w	r3, r3, #12
 800644a:	2b0c      	cmp	r3, #12
 800644c:	d828      	bhi.n	80064a0 <UART_SetConfig+0x128>
 800644e:	a201      	add	r2, pc, #4	; (adr r2, 8006454 <UART_SetConfig+0xdc>)
 8006450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006454:	08006489 	.word	0x08006489
 8006458:	080064a1 	.word	0x080064a1
 800645c:	080064a1 	.word	0x080064a1
 8006460:	080064a1 	.word	0x080064a1
 8006464:	08006495 	.word	0x08006495
 8006468:	080064a1 	.word	0x080064a1
 800646c:	080064a1 	.word	0x080064a1
 8006470:	080064a1 	.word	0x080064a1
 8006474:	0800648f 	.word	0x0800648f
 8006478:	080064a1 	.word	0x080064a1
 800647c:	080064a1 	.word	0x080064a1
 8006480:	080064a1 	.word	0x080064a1
 8006484:	0800649b 	.word	0x0800649b
 8006488:	2300      	movs	r3, #0
 800648a:	77fb      	strb	r3, [r7, #31]
 800648c:	e118      	b.n	80066c0 <UART_SetConfig+0x348>
 800648e:	2302      	movs	r3, #2
 8006490:	77fb      	strb	r3, [r7, #31]
 8006492:	e115      	b.n	80066c0 <UART_SetConfig+0x348>
 8006494:	2304      	movs	r3, #4
 8006496:	77fb      	strb	r3, [r7, #31]
 8006498:	e112      	b.n	80066c0 <UART_SetConfig+0x348>
 800649a:	2308      	movs	r3, #8
 800649c:	77fb      	strb	r3, [r7, #31]
 800649e:	e10f      	b.n	80066c0 <UART_SetConfig+0x348>
 80064a0:	2310      	movs	r3, #16
 80064a2:	77fb      	strb	r3, [r7, #31]
 80064a4:	e10c      	b.n	80066c0 <UART_SetConfig+0x348>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a68      	ldr	r2, [pc, #416]	; (800664c <UART_SetConfig+0x2d4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d120      	bne.n	80064f2 <UART_SetConfig+0x17a>
 80064b0:	4b64      	ldr	r3, [pc, #400]	; (8006644 <UART_SetConfig+0x2cc>)
 80064b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064ba:	2b30      	cmp	r3, #48	; 0x30
 80064bc:	d013      	beq.n	80064e6 <UART_SetConfig+0x16e>
 80064be:	2b30      	cmp	r3, #48	; 0x30
 80064c0:	d814      	bhi.n	80064ec <UART_SetConfig+0x174>
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d009      	beq.n	80064da <UART_SetConfig+0x162>
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	d810      	bhi.n	80064ec <UART_SetConfig+0x174>
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d002      	beq.n	80064d4 <UART_SetConfig+0x15c>
 80064ce:	2b10      	cmp	r3, #16
 80064d0:	d006      	beq.n	80064e0 <UART_SetConfig+0x168>
 80064d2:	e00b      	b.n	80064ec <UART_SetConfig+0x174>
 80064d4:	2300      	movs	r3, #0
 80064d6:	77fb      	strb	r3, [r7, #31]
 80064d8:	e0f2      	b.n	80066c0 <UART_SetConfig+0x348>
 80064da:	2302      	movs	r3, #2
 80064dc:	77fb      	strb	r3, [r7, #31]
 80064de:	e0ef      	b.n	80066c0 <UART_SetConfig+0x348>
 80064e0:	2304      	movs	r3, #4
 80064e2:	77fb      	strb	r3, [r7, #31]
 80064e4:	e0ec      	b.n	80066c0 <UART_SetConfig+0x348>
 80064e6:	2308      	movs	r3, #8
 80064e8:	77fb      	strb	r3, [r7, #31]
 80064ea:	e0e9      	b.n	80066c0 <UART_SetConfig+0x348>
 80064ec:	2310      	movs	r3, #16
 80064ee:	77fb      	strb	r3, [r7, #31]
 80064f0:	e0e6      	b.n	80066c0 <UART_SetConfig+0x348>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a56      	ldr	r2, [pc, #344]	; (8006650 <UART_SetConfig+0x2d8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d120      	bne.n	800653e <UART_SetConfig+0x1c6>
 80064fc:	4b51      	ldr	r3, [pc, #324]	; (8006644 <UART_SetConfig+0x2cc>)
 80064fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006502:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006506:	2bc0      	cmp	r3, #192	; 0xc0
 8006508:	d013      	beq.n	8006532 <UART_SetConfig+0x1ba>
 800650a:	2bc0      	cmp	r3, #192	; 0xc0
 800650c:	d814      	bhi.n	8006538 <UART_SetConfig+0x1c0>
 800650e:	2b80      	cmp	r3, #128	; 0x80
 8006510:	d009      	beq.n	8006526 <UART_SetConfig+0x1ae>
 8006512:	2b80      	cmp	r3, #128	; 0x80
 8006514:	d810      	bhi.n	8006538 <UART_SetConfig+0x1c0>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <UART_SetConfig+0x1a8>
 800651a:	2b40      	cmp	r3, #64	; 0x40
 800651c:	d006      	beq.n	800652c <UART_SetConfig+0x1b4>
 800651e:	e00b      	b.n	8006538 <UART_SetConfig+0x1c0>
 8006520:	2300      	movs	r3, #0
 8006522:	77fb      	strb	r3, [r7, #31]
 8006524:	e0cc      	b.n	80066c0 <UART_SetConfig+0x348>
 8006526:	2302      	movs	r3, #2
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	e0c9      	b.n	80066c0 <UART_SetConfig+0x348>
 800652c:	2304      	movs	r3, #4
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e0c6      	b.n	80066c0 <UART_SetConfig+0x348>
 8006532:	2308      	movs	r3, #8
 8006534:	77fb      	strb	r3, [r7, #31]
 8006536:	e0c3      	b.n	80066c0 <UART_SetConfig+0x348>
 8006538:	2310      	movs	r3, #16
 800653a:	77fb      	strb	r3, [r7, #31]
 800653c:	e0c0      	b.n	80066c0 <UART_SetConfig+0x348>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a44      	ldr	r2, [pc, #272]	; (8006654 <UART_SetConfig+0x2dc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d125      	bne.n	8006594 <UART_SetConfig+0x21c>
 8006548:	4b3e      	ldr	r3, [pc, #248]	; (8006644 <UART_SetConfig+0x2cc>)
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006556:	d017      	beq.n	8006588 <UART_SetConfig+0x210>
 8006558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800655c:	d817      	bhi.n	800658e <UART_SetConfig+0x216>
 800655e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006562:	d00b      	beq.n	800657c <UART_SetConfig+0x204>
 8006564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006568:	d811      	bhi.n	800658e <UART_SetConfig+0x216>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <UART_SetConfig+0x1fe>
 800656e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006572:	d006      	beq.n	8006582 <UART_SetConfig+0x20a>
 8006574:	e00b      	b.n	800658e <UART_SetConfig+0x216>
 8006576:	2300      	movs	r3, #0
 8006578:	77fb      	strb	r3, [r7, #31]
 800657a:	e0a1      	b.n	80066c0 <UART_SetConfig+0x348>
 800657c:	2302      	movs	r3, #2
 800657e:	77fb      	strb	r3, [r7, #31]
 8006580:	e09e      	b.n	80066c0 <UART_SetConfig+0x348>
 8006582:	2304      	movs	r3, #4
 8006584:	77fb      	strb	r3, [r7, #31]
 8006586:	e09b      	b.n	80066c0 <UART_SetConfig+0x348>
 8006588:	2308      	movs	r3, #8
 800658a:	77fb      	strb	r3, [r7, #31]
 800658c:	e098      	b.n	80066c0 <UART_SetConfig+0x348>
 800658e:	2310      	movs	r3, #16
 8006590:	77fb      	strb	r3, [r7, #31]
 8006592:	e095      	b.n	80066c0 <UART_SetConfig+0x348>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a2f      	ldr	r2, [pc, #188]	; (8006658 <UART_SetConfig+0x2e0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d125      	bne.n	80065ea <UART_SetConfig+0x272>
 800659e:	4b29      	ldr	r3, [pc, #164]	; (8006644 <UART_SetConfig+0x2cc>)
 80065a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065ac:	d017      	beq.n	80065de <UART_SetConfig+0x266>
 80065ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065b2:	d817      	bhi.n	80065e4 <UART_SetConfig+0x26c>
 80065b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b8:	d00b      	beq.n	80065d2 <UART_SetConfig+0x25a>
 80065ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065be:	d811      	bhi.n	80065e4 <UART_SetConfig+0x26c>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <UART_SetConfig+0x254>
 80065c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c8:	d006      	beq.n	80065d8 <UART_SetConfig+0x260>
 80065ca:	e00b      	b.n	80065e4 <UART_SetConfig+0x26c>
 80065cc:	2301      	movs	r3, #1
 80065ce:	77fb      	strb	r3, [r7, #31]
 80065d0:	e076      	b.n	80066c0 <UART_SetConfig+0x348>
 80065d2:	2302      	movs	r3, #2
 80065d4:	77fb      	strb	r3, [r7, #31]
 80065d6:	e073      	b.n	80066c0 <UART_SetConfig+0x348>
 80065d8:	2304      	movs	r3, #4
 80065da:	77fb      	strb	r3, [r7, #31]
 80065dc:	e070      	b.n	80066c0 <UART_SetConfig+0x348>
 80065de:	2308      	movs	r3, #8
 80065e0:	77fb      	strb	r3, [r7, #31]
 80065e2:	e06d      	b.n	80066c0 <UART_SetConfig+0x348>
 80065e4:	2310      	movs	r3, #16
 80065e6:	77fb      	strb	r3, [r7, #31]
 80065e8:	e06a      	b.n	80066c0 <UART_SetConfig+0x348>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1b      	ldr	r2, [pc, #108]	; (800665c <UART_SetConfig+0x2e4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d138      	bne.n	8006666 <UART_SetConfig+0x2ee>
 80065f4:	4b13      	ldr	r3, [pc, #76]	; (8006644 <UART_SetConfig+0x2cc>)
 80065f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80065fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006602:	d017      	beq.n	8006634 <UART_SetConfig+0x2bc>
 8006604:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006608:	d82a      	bhi.n	8006660 <UART_SetConfig+0x2e8>
 800660a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800660e:	d00b      	beq.n	8006628 <UART_SetConfig+0x2b0>
 8006610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006614:	d824      	bhi.n	8006660 <UART_SetConfig+0x2e8>
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <UART_SetConfig+0x2aa>
 800661a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661e:	d006      	beq.n	800662e <UART_SetConfig+0x2b6>
 8006620:	e01e      	b.n	8006660 <UART_SetConfig+0x2e8>
 8006622:	2300      	movs	r3, #0
 8006624:	77fb      	strb	r3, [r7, #31]
 8006626:	e04b      	b.n	80066c0 <UART_SetConfig+0x348>
 8006628:	2302      	movs	r3, #2
 800662a:	77fb      	strb	r3, [r7, #31]
 800662c:	e048      	b.n	80066c0 <UART_SetConfig+0x348>
 800662e:	2304      	movs	r3, #4
 8006630:	77fb      	strb	r3, [r7, #31]
 8006632:	e045      	b.n	80066c0 <UART_SetConfig+0x348>
 8006634:	2308      	movs	r3, #8
 8006636:	77fb      	strb	r3, [r7, #31]
 8006638:	e042      	b.n	80066c0 <UART_SetConfig+0x348>
 800663a:	bf00      	nop
 800663c:	efff69f3 	.word	0xefff69f3
 8006640:	40011000 	.word	0x40011000
 8006644:	40023800 	.word	0x40023800
 8006648:	40004400 	.word	0x40004400
 800664c:	40004800 	.word	0x40004800
 8006650:	40004c00 	.word	0x40004c00
 8006654:	40005000 	.word	0x40005000
 8006658:	40011400 	.word	0x40011400
 800665c:	40007800 	.word	0x40007800
 8006660:	2310      	movs	r3, #16
 8006662:	77fb      	strb	r3, [r7, #31]
 8006664:	e02c      	b.n	80066c0 <UART_SetConfig+0x348>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a72      	ldr	r2, [pc, #456]	; (8006834 <UART_SetConfig+0x4bc>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d125      	bne.n	80066bc <UART_SetConfig+0x344>
 8006670:	4b71      	ldr	r3, [pc, #452]	; (8006838 <UART_SetConfig+0x4c0>)
 8006672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006676:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800667a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800667e:	d017      	beq.n	80066b0 <UART_SetConfig+0x338>
 8006680:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006684:	d817      	bhi.n	80066b6 <UART_SetConfig+0x33e>
 8006686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800668a:	d00b      	beq.n	80066a4 <UART_SetConfig+0x32c>
 800668c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006690:	d811      	bhi.n	80066b6 <UART_SetConfig+0x33e>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <UART_SetConfig+0x326>
 8006696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800669a:	d006      	beq.n	80066aa <UART_SetConfig+0x332>
 800669c:	e00b      	b.n	80066b6 <UART_SetConfig+0x33e>
 800669e:	2300      	movs	r3, #0
 80066a0:	77fb      	strb	r3, [r7, #31]
 80066a2:	e00d      	b.n	80066c0 <UART_SetConfig+0x348>
 80066a4:	2302      	movs	r3, #2
 80066a6:	77fb      	strb	r3, [r7, #31]
 80066a8:	e00a      	b.n	80066c0 <UART_SetConfig+0x348>
 80066aa:	2304      	movs	r3, #4
 80066ac:	77fb      	strb	r3, [r7, #31]
 80066ae:	e007      	b.n	80066c0 <UART_SetConfig+0x348>
 80066b0:	2308      	movs	r3, #8
 80066b2:	77fb      	strb	r3, [r7, #31]
 80066b4:	e004      	b.n	80066c0 <UART_SetConfig+0x348>
 80066b6:	2310      	movs	r3, #16
 80066b8:	77fb      	strb	r3, [r7, #31]
 80066ba:	e001      	b.n	80066c0 <UART_SetConfig+0x348>
 80066bc:	2310      	movs	r3, #16
 80066be:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c8:	d15b      	bne.n	8006782 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80066ca:	7ffb      	ldrb	r3, [r7, #31]
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	d828      	bhi.n	8006722 <UART_SetConfig+0x3aa>
 80066d0:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <UART_SetConfig+0x360>)
 80066d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d6:	bf00      	nop
 80066d8:	080066fd 	.word	0x080066fd
 80066dc:	08006705 	.word	0x08006705
 80066e0:	0800670d 	.word	0x0800670d
 80066e4:	08006723 	.word	0x08006723
 80066e8:	08006713 	.word	0x08006713
 80066ec:	08006723 	.word	0x08006723
 80066f0:	08006723 	.word	0x08006723
 80066f4:	08006723 	.word	0x08006723
 80066f8:	0800671b 	.word	0x0800671b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066fc:	f7fe f87c 	bl	80047f8 <HAL_RCC_GetPCLK1Freq>
 8006700:	61b8      	str	r0, [r7, #24]
        break;
 8006702:	e013      	b.n	800672c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006704:	f7fe f88c 	bl	8004820 <HAL_RCC_GetPCLK2Freq>
 8006708:	61b8      	str	r0, [r7, #24]
        break;
 800670a:	e00f      	b.n	800672c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800670c:	4b4b      	ldr	r3, [pc, #300]	; (800683c <UART_SetConfig+0x4c4>)
 800670e:	61bb      	str	r3, [r7, #24]
        break;
 8006710:	e00c      	b.n	800672c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006712:	f7fd ff5f 	bl	80045d4 <HAL_RCC_GetSysClockFreq>
 8006716:	61b8      	str	r0, [r7, #24]
        break;
 8006718:	e008      	b.n	800672c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800671a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800671e:	61bb      	str	r3, [r7, #24]
        break;
 8006720:	e004      	b.n	800672c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	77bb      	strb	r3, [r7, #30]
        break;
 800672a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d074      	beq.n	800681c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	005a      	lsls	r2, r3, #1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	441a      	add	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	fbb2 f3f3 	udiv	r3, r2, r3
 8006746:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2b0f      	cmp	r3, #15
 800674c:	d916      	bls.n	800677c <UART_SetConfig+0x404>
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006754:	d212      	bcs.n	800677c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	b29b      	uxth	r3, r3
 800675a:	f023 030f 	bic.w	r3, r3, #15
 800675e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	085b      	lsrs	r3, r3, #1
 8006764:	b29b      	uxth	r3, r3
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	b29a      	uxth	r2, r3
 800676c:	89fb      	ldrh	r3, [r7, #14]
 800676e:	4313      	orrs	r3, r2
 8006770:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	89fa      	ldrh	r2, [r7, #14]
 8006778:	60da      	str	r2, [r3, #12]
 800677a:	e04f      	b.n	800681c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	77bb      	strb	r3, [r7, #30]
 8006780:	e04c      	b.n	800681c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006782:	7ffb      	ldrb	r3, [r7, #31]
 8006784:	2b08      	cmp	r3, #8
 8006786:	d828      	bhi.n	80067da <UART_SetConfig+0x462>
 8006788:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <UART_SetConfig+0x418>)
 800678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678e:	bf00      	nop
 8006790:	080067b5 	.word	0x080067b5
 8006794:	080067bd 	.word	0x080067bd
 8006798:	080067c5 	.word	0x080067c5
 800679c:	080067db 	.word	0x080067db
 80067a0:	080067cb 	.word	0x080067cb
 80067a4:	080067db 	.word	0x080067db
 80067a8:	080067db 	.word	0x080067db
 80067ac:	080067db 	.word	0x080067db
 80067b0:	080067d3 	.word	0x080067d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b4:	f7fe f820 	bl	80047f8 <HAL_RCC_GetPCLK1Freq>
 80067b8:	61b8      	str	r0, [r7, #24]
        break;
 80067ba:	e013      	b.n	80067e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067bc:	f7fe f830 	bl	8004820 <HAL_RCC_GetPCLK2Freq>
 80067c0:	61b8      	str	r0, [r7, #24]
        break;
 80067c2:	e00f      	b.n	80067e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067c4:	4b1d      	ldr	r3, [pc, #116]	; (800683c <UART_SetConfig+0x4c4>)
 80067c6:	61bb      	str	r3, [r7, #24]
        break;
 80067c8:	e00c      	b.n	80067e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ca:	f7fd ff03 	bl	80045d4 <HAL_RCC_GetSysClockFreq>
 80067ce:	61b8      	str	r0, [r7, #24]
        break;
 80067d0:	e008      	b.n	80067e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067d6:	61bb      	str	r3, [r7, #24]
        break;
 80067d8:	e004      	b.n	80067e4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	77bb      	strb	r3, [r7, #30]
        break;
 80067e2:	bf00      	nop
    }

    if (pclk != 0U)
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d018      	beq.n	800681c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	085a      	lsrs	r2, r3, #1
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	441a      	add	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	2b0f      	cmp	r3, #15
 8006802:	d909      	bls.n	8006818 <UART_SetConfig+0x4a0>
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800680a:	d205      	bcs.n	8006818 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	b29a      	uxth	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	60da      	str	r2, [r3, #12]
 8006816:	e001      	b.n	800681c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006828:	7fbb      	ldrb	r3, [r7, #30]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3720      	adds	r7, #32
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	40007c00 	.word	0x40007c00
 8006838:	40023800 	.word	0x40023800
 800683c:	00f42400 	.word	0x00f42400

08006840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00a      	beq.n	800686a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00a      	beq.n	80068ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	f003 0308 	and.w	r3, r3, #8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	f003 0310 	and.w	r3, r3, #16
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01a      	beq.n	8006956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800693e:	d10a      	bne.n	8006956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	605a      	str	r2, [r3, #4]
  }
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af02      	add	r7, sp, #8
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006994:	f7fc f962 	bl	8002c5c <HAL_GetTick>
 8006998:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d10e      	bne.n	80069c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f831 	bl	8006a1e <UART_WaitOnFlagUntilTimeout>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e027      	b.n	8006a16 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	d10e      	bne.n	80069f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f81b 	bl	8006a1e <UART_WaitOnFlagUntilTimeout>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e011      	b.n	8006a16 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2220      	movs	r2, #32
 80069f6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b09c      	sub	sp, #112	; 0x70
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	60f8      	str	r0, [r7, #12]
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	603b      	str	r3, [r7, #0]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a2e:	e0a7      	b.n	8006b80 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a36:	f000 80a3 	beq.w	8006b80 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a3a:	f7fc f90f 	bl	8002c5c <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d13f      	bne.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a64:	667b      	str	r3, [r7, #100]	; 0x64
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e6      	bne.n	8006a50 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	663b      	str	r3, [r7, #96]	; 0x60
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006aa2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006aa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006aa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e5      	bne.n	8006a82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e068      	b.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0304 	and.w	r3, r3, #4
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d050      	beq.n	8006b80 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aec:	d148      	bne.n	8006b80 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006af6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	e853 3f00 	ldrex	r3, [r3]
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b16:	637b      	str	r3, [r7, #52]	; 0x34
 8006b18:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b1e:	e841 2300 	strex	r3, r2, [r1]
 8006b22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1e6      	bne.n	8006af8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3308      	adds	r3, #8
 8006b30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	e853 3f00 	ldrex	r3, [r3]
 8006b38:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f023 0301 	bic.w	r3, r3, #1
 8006b40:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3308      	adds	r3, #8
 8006b48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b4a:	623a      	str	r2, [r7, #32]
 8006b4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4e:	69f9      	ldr	r1, [r7, #28]
 8006b50:	6a3a      	ldr	r2, [r7, #32]
 8006b52:	e841 2300 	strex	r3, r2, [r1]
 8006b56:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1e5      	bne.n	8006b2a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2220      	movs	r2, #32
 8006b62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e010      	b.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	69da      	ldr	r2, [r3, #28]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	bf0c      	ite	eq
 8006b90:	2301      	moveq	r3, #1
 8006b92:	2300      	movne	r3, #0
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	461a      	mov	r2, r3
 8006b98:	79fb      	ldrb	r3, [r7, #7]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	f43f af48 	beq.w	8006a30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3770      	adds	r7, #112	; 0x70
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <__cvt>:
 8006baa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bac:	ed2d 8b02 	vpush	{d8}
 8006bb0:	eeb0 8b40 	vmov.f64	d8, d0
 8006bb4:	b085      	sub	sp, #20
 8006bb6:	4617      	mov	r7, r2
 8006bb8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006bba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006bbc:	ee18 2a90 	vmov	r2, s17
 8006bc0:	f025 0520 	bic.w	r5, r5, #32
 8006bc4:	2a00      	cmp	r2, #0
 8006bc6:	bfb6      	itet	lt
 8006bc8:	222d      	movlt	r2, #45	; 0x2d
 8006bca:	2200      	movge	r2, #0
 8006bcc:	eeb1 8b40 	vneglt.f64	d8, d0
 8006bd0:	2d46      	cmp	r5, #70	; 0x46
 8006bd2:	460c      	mov	r4, r1
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	d004      	beq.n	8006be2 <__cvt+0x38>
 8006bd8:	2d45      	cmp	r5, #69	; 0x45
 8006bda:	d100      	bne.n	8006bde <__cvt+0x34>
 8006bdc:	3401      	adds	r4, #1
 8006bde:	2102      	movs	r1, #2
 8006be0:	e000      	b.n	8006be4 <__cvt+0x3a>
 8006be2:	2103      	movs	r1, #3
 8006be4:	ab03      	add	r3, sp, #12
 8006be6:	9301      	str	r3, [sp, #4]
 8006be8:	ab02      	add	r3, sp, #8
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	4622      	mov	r2, r4
 8006bee:	4633      	mov	r3, r6
 8006bf0:	eeb0 0b48 	vmov.f64	d0, d8
 8006bf4:	f000 fe64 	bl	80078c0 <_dtoa_r>
 8006bf8:	2d47      	cmp	r5, #71	; 0x47
 8006bfa:	d101      	bne.n	8006c00 <__cvt+0x56>
 8006bfc:	07fb      	lsls	r3, r7, #31
 8006bfe:	d51a      	bpl.n	8006c36 <__cvt+0x8c>
 8006c00:	2d46      	cmp	r5, #70	; 0x46
 8006c02:	eb00 0204 	add.w	r2, r0, r4
 8006c06:	d10c      	bne.n	8006c22 <__cvt+0x78>
 8006c08:	7803      	ldrb	r3, [r0, #0]
 8006c0a:	2b30      	cmp	r3, #48	; 0x30
 8006c0c:	d107      	bne.n	8006c1e <__cvt+0x74>
 8006c0e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c16:	bf1c      	itt	ne
 8006c18:	f1c4 0401 	rsbne	r4, r4, #1
 8006c1c:	6034      	strne	r4, [r6, #0]
 8006c1e:	6833      	ldr	r3, [r6, #0]
 8006c20:	441a      	add	r2, r3
 8006c22:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c2a:	bf08      	it	eq
 8006c2c:	9203      	streq	r2, [sp, #12]
 8006c2e:	2130      	movs	r1, #48	; 0x30
 8006c30:	9b03      	ldr	r3, [sp, #12]
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d307      	bcc.n	8006c46 <__cvt+0x9c>
 8006c36:	9b03      	ldr	r3, [sp, #12]
 8006c38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c3a:	1a1b      	subs	r3, r3, r0
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	b005      	add	sp, #20
 8006c40:	ecbd 8b02 	vpop	{d8}
 8006c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c46:	1c5c      	adds	r4, r3, #1
 8006c48:	9403      	str	r4, [sp, #12]
 8006c4a:	7019      	strb	r1, [r3, #0]
 8006c4c:	e7f0      	b.n	8006c30 <__cvt+0x86>

08006c4e <__exponent>:
 8006c4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c50:	4603      	mov	r3, r0
 8006c52:	2900      	cmp	r1, #0
 8006c54:	bfb8      	it	lt
 8006c56:	4249      	neglt	r1, r1
 8006c58:	f803 2b02 	strb.w	r2, [r3], #2
 8006c5c:	bfb4      	ite	lt
 8006c5e:	222d      	movlt	r2, #45	; 0x2d
 8006c60:	222b      	movge	r2, #43	; 0x2b
 8006c62:	2909      	cmp	r1, #9
 8006c64:	7042      	strb	r2, [r0, #1]
 8006c66:	dd2a      	ble.n	8006cbe <__exponent+0x70>
 8006c68:	f10d 0207 	add.w	r2, sp, #7
 8006c6c:	4617      	mov	r7, r2
 8006c6e:	260a      	movs	r6, #10
 8006c70:	4694      	mov	ip, r2
 8006c72:	fb91 f5f6 	sdiv	r5, r1, r6
 8006c76:	fb06 1415 	mls	r4, r6, r5, r1
 8006c7a:	3430      	adds	r4, #48	; 0x30
 8006c7c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006c80:	460c      	mov	r4, r1
 8006c82:	2c63      	cmp	r4, #99	; 0x63
 8006c84:	f102 32ff 	add.w	r2, r2, #4294967295
 8006c88:	4629      	mov	r1, r5
 8006c8a:	dcf1      	bgt.n	8006c70 <__exponent+0x22>
 8006c8c:	3130      	adds	r1, #48	; 0x30
 8006c8e:	f1ac 0402 	sub.w	r4, ip, #2
 8006c92:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006c96:	1c41      	adds	r1, r0, #1
 8006c98:	4622      	mov	r2, r4
 8006c9a:	42ba      	cmp	r2, r7
 8006c9c:	d30a      	bcc.n	8006cb4 <__exponent+0x66>
 8006c9e:	f10d 0209 	add.w	r2, sp, #9
 8006ca2:	eba2 020c 	sub.w	r2, r2, ip
 8006ca6:	42bc      	cmp	r4, r7
 8006ca8:	bf88      	it	hi
 8006caa:	2200      	movhi	r2, #0
 8006cac:	4413      	add	r3, r2
 8006cae:	1a18      	subs	r0, r3, r0
 8006cb0:	b003      	add	sp, #12
 8006cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cb4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006cb8:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006cbc:	e7ed      	b.n	8006c9a <__exponent+0x4c>
 8006cbe:	2330      	movs	r3, #48	; 0x30
 8006cc0:	3130      	adds	r1, #48	; 0x30
 8006cc2:	7083      	strb	r3, [r0, #2]
 8006cc4:	70c1      	strb	r1, [r0, #3]
 8006cc6:	1d03      	adds	r3, r0, #4
 8006cc8:	e7f1      	b.n	8006cae <__exponent+0x60>
 8006cca:	0000      	movs	r0, r0
 8006ccc:	0000      	movs	r0, r0
	...

08006cd0 <_printf_float>:
 8006cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	b08b      	sub	sp, #44	; 0x2c
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006cdc:	4616      	mov	r6, r2
 8006cde:	461f      	mov	r7, r3
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	f000 fcef 	bl	80076c4 <_localeconv_r>
 8006ce6:	f8d0 b000 	ldr.w	fp, [r0]
 8006cea:	4658      	mov	r0, fp
 8006cec:	f7f9 faf8 	bl	80002e0 <strlen>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9308      	str	r3, [sp, #32]
 8006cf4:	f8d8 3000 	ldr.w	r3, [r8]
 8006cf8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006cfc:	6822      	ldr	r2, [r4, #0]
 8006cfe:	3307      	adds	r3, #7
 8006d00:	f023 0307 	bic.w	r3, r3, #7
 8006d04:	f103 0108 	add.w	r1, r3, #8
 8006d08:	f8c8 1000 	str.w	r1, [r8]
 8006d0c:	ed93 0b00 	vldr	d0, [r3]
 8006d10:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8006f70 <_printf_float+0x2a0>
 8006d14:	eeb0 7bc0 	vabs.f64	d7, d0
 8006d18:	eeb4 7b46 	vcmp.f64	d7, d6
 8006d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d20:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8006d24:	4682      	mov	sl, r0
 8006d26:	dd24      	ble.n	8006d72 <_printf_float+0xa2>
 8006d28:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d30:	d502      	bpl.n	8006d38 <_printf_float+0x68>
 8006d32:	232d      	movs	r3, #45	; 0x2d
 8006d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d38:	498f      	ldr	r1, [pc, #572]	; (8006f78 <_printf_float+0x2a8>)
 8006d3a:	4b90      	ldr	r3, [pc, #576]	; (8006f7c <_printf_float+0x2ac>)
 8006d3c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006d40:	bf94      	ite	ls
 8006d42:	4688      	movls	r8, r1
 8006d44:	4698      	movhi	r8, r3
 8006d46:	2303      	movs	r3, #3
 8006d48:	6123      	str	r3, [r4, #16]
 8006d4a:	f022 0204 	bic.w	r2, r2, #4
 8006d4e:	2300      	movs	r3, #0
 8006d50:	6022      	str	r2, [r4, #0]
 8006d52:	9304      	str	r3, [sp, #16]
 8006d54:	9700      	str	r7, [sp, #0]
 8006d56:	4633      	mov	r3, r6
 8006d58:	aa09      	add	r2, sp, #36	; 0x24
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f000 f9d1 	bl	8007104 <_printf_common>
 8006d62:	3001      	adds	r0, #1
 8006d64:	f040 808a 	bne.w	8006e7c <_printf_float+0x1ac>
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6c:	b00b      	add	sp, #44	; 0x2c
 8006d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d72:	eeb4 0b40 	vcmp.f64	d0, d0
 8006d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d7a:	d709      	bvc.n	8006d90 <_printf_float+0xc0>
 8006d7c:	ee10 3a90 	vmov	r3, s1
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	bfbc      	itt	lt
 8006d84:	232d      	movlt	r3, #45	; 0x2d
 8006d86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d8a:	497d      	ldr	r1, [pc, #500]	; (8006f80 <_printf_float+0x2b0>)
 8006d8c:	4b7d      	ldr	r3, [pc, #500]	; (8006f84 <_printf_float+0x2b4>)
 8006d8e:	e7d5      	b.n	8006d3c <_printf_float+0x6c>
 8006d90:	6863      	ldr	r3, [r4, #4]
 8006d92:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006d96:	9104      	str	r1, [sp, #16]
 8006d98:	1c59      	adds	r1, r3, #1
 8006d9a:	d13c      	bne.n	8006e16 <_printf_float+0x146>
 8006d9c:	2306      	movs	r3, #6
 8006d9e:	6063      	str	r3, [r4, #4]
 8006da0:	2300      	movs	r3, #0
 8006da2:	9303      	str	r3, [sp, #12]
 8006da4:	ab08      	add	r3, sp, #32
 8006da6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006daa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006dae:	ab07      	add	r3, sp, #28
 8006db0:	6861      	ldr	r1, [r4, #4]
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	6022      	str	r2, [r4, #0]
 8006db6:	f10d 031b 	add.w	r3, sp, #27
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f7ff fef5 	bl	8006baa <__cvt>
 8006dc0:	9b04      	ldr	r3, [sp, #16]
 8006dc2:	9907      	ldr	r1, [sp, #28]
 8006dc4:	2b47      	cmp	r3, #71	; 0x47
 8006dc6:	4680      	mov	r8, r0
 8006dc8:	d108      	bne.n	8006ddc <_printf_float+0x10c>
 8006dca:	1cc8      	adds	r0, r1, #3
 8006dcc:	db02      	blt.n	8006dd4 <_printf_float+0x104>
 8006dce:	6863      	ldr	r3, [r4, #4]
 8006dd0:	4299      	cmp	r1, r3
 8006dd2:	dd41      	ble.n	8006e58 <_printf_float+0x188>
 8006dd4:	f1a9 0902 	sub.w	r9, r9, #2
 8006dd8:	fa5f f989 	uxtb.w	r9, r9
 8006ddc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006de0:	d820      	bhi.n	8006e24 <_printf_float+0x154>
 8006de2:	3901      	subs	r1, #1
 8006de4:	464a      	mov	r2, r9
 8006de6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006dea:	9107      	str	r1, [sp, #28]
 8006dec:	f7ff ff2f 	bl	8006c4e <__exponent>
 8006df0:	9a08      	ldr	r2, [sp, #32]
 8006df2:	9004      	str	r0, [sp, #16]
 8006df4:	1813      	adds	r3, r2, r0
 8006df6:	2a01      	cmp	r2, #1
 8006df8:	6123      	str	r3, [r4, #16]
 8006dfa:	dc02      	bgt.n	8006e02 <_printf_float+0x132>
 8006dfc:	6822      	ldr	r2, [r4, #0]
 8006dfe:	07d2      	lsls	r2, r2, #31
 8006e00:	d501      	bpl.n	8006e06 <_printf_float+0x136>
 8006e02:	3301      	adds	r3, #1
 8006e04:	6123      	str	r3, [r4, #16]
 8006e06:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0a2      	beq.n	8006d54 <_printf_float+0x84>
 8006e0e:	232d      	movs	r3, #45	; 0x2d
 8006e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e14:	e79e      	b.n	8006d54 <_printf_float+0x84>
 8006e16:	9904      	ldr	r1, [sp, #16]
 8006e18:	2947      	cmp	r1, #71	; 0x47
 8006e1a:	d1c1      	bne.n	8006da0 <_printf_float+0xd0>
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1bf      	bne.n	8006da0 <_printf_float+0xd0>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e7bc      	b.n	8006d9e <_printf_float+0xce>
 8006e24:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006e28:	d118      	bne.n	8006e5c <_printf_float+0x18c>
 8006e2a:	2900      	cmp	r1, #0
 8006e2c:	6863      	ldr	r3, [r4, #4]
 8006e2e:	dd0b      	ble.n	8006e48 <_printf_float+0x178>
 8006e30:	6121      	str	r1, [r4, #16]
 8006e32:	b913      	cbnz	r3, 8006e3a <_printf_float+0x16a>
 8006e34:	6822      	ldr	r2, [r4, #0]
 8006e36:	07d0      	lsls	r0, r2, #31
 8006e38:	d502      	bpl.n	8006e40 <_printf_float+0x170>
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	440b      	add	r3, r1
 8006e3e:	6123      	str	r3, [r4, #16]
 8006e40:	2300      	movs	r3, #0
 8006e42:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e44:	9304      	str	r3, [sp, #16]
 8006e46:	e7de      	b.n	8006e06 <_printf_float+0x136>
 8006e48:	b913      	cbnz	r3, 8006e50 <_printf_float+0x180>
 8006e4a:	6822      	ldr	r2, [r4, #0]
 8006e4c:	07d2      	lsls	r2, r2, #31
 8006e4e:	d501      	bpl.n	8006e54 <_printf_float+0x184>
 8006e50:	3302      	adds	r3, #2
 8006e52:	e7f4      	b.n	8006e3e <_printf_float+0x16e>
 8006e54:	2301      	movs	r3, #1
 8006e56:	e7f2      	b.n	8006e3e <_printf_float+0x16e>
 8006e58:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006e5c:	9b08      	ldr	r3, [sp, #32]
 8006e5e:	4299      	cmp	r1, r3
 8006e60:	db05      	blt.n	8006e6e <_printf_float+0x19e>
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	6121      	str	r1, [r4, #16]
 8006e66:	07d8      	lsls	r0, r3, #31
 8006e68:	d5ea      	bpl.n	8006e40 <_printf_float+0x170>
 8006e6a:	1c4b      	adds	r3, r1, #1
 8006e6c:	e7e7      	b.n	8006e3e <_printf_float+0x16e>
 8006e6e:	2900      	cmp	r1, #0
 8006e70:	bfd4      	ite	le
 8006e72:	f1c1 0202 	rsble	r2, r1, #2
 8006e76:	2201      	movgt	r2, #1
 8006e78:	4413      	add	r3, r2
 8006e7a:	e7e0      	b.n	8006e3e <_printf_float+0x16e>
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	055a      	lsls	r2, r3, #21
 8006e80:	d407      	bmi.n	8006e92 <_printf_float+0x1c2>
 8006e82:	6923      	ldr	r3, [r4, #16]
 8006e84:	4642      	mov	r2, r8
 8006e86:	4631      	mov	r1, r6
 8006e88:	4628      	mov	r0, r5
 8006e8a:	47b8      	blx	r7
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	d12a      	bne.n	8006ee6 <_printf_float+0x216>
 8006e90:	e76a      	b.n	8006d68 <_printf_float+0x98>
 8006e92:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006e96:	f240 80e0 	bls.w	800705a <_printf_float+0x38a>
 8006e9a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006e9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ea6:	d133      	bne.n	8006f10 <_printf_float+0x240>
 8006ea8:	4a37      	ldr	r2, [pc, #220]	; (8006f88 <_printf_float+0x2b8>)
 8006eaa:	2301      	movs	r3, #1
 8006eac:	4631      	mov	r1, r6
 8006eae:	4628      	mov	r0, r5
 8006eb0:	47b8      	blx	r7
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	f43f af58 	beq.w	8006d68 <_printf_float+0x98>
 8006eb8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	db02      	blt.n	8006ec6 <_printf_float+0x1f6>
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	07d8      	lsls	r0, r3, #31
 8006ec4:	d50f      	bpl.n	8006ee6 <_printf_float+0x216>
 8006ec6:	4653      	mov	r3, sl
 8006ec8:	465a      	mov	r2, fp
 8006eca:	4631      	mov	r1, r6
 8006ecc:	4628      	mov	r0, r5
 8006ece:	47b8      	blx	r7
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	f43f af49 	beq.w	8006d68 <_printf_float+0x98>
 8006ed6:	f04f 0800 	mov.w	r8, #0
 8006eda:	f104 091a 	add.w	r9, r4, #26
 8006ede:	9b08      	ldr	r3, [sp, #32]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	4543      	cmp	r3, r8
 8006ee4:	dc09      	bgt.n	8006efa <_printf_float+0x22a>
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	079b      	lsls	r3, r3, #30
 8006eea:	f100 8106 	bmi.w	80070fa <_printf_float+0x42a>
 8006eee:	68e0      	ldr	r0, [r4, #12]
 8006ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef2:	4298      	cmp	r0, r3
 8006ef4:	bfb8      	it	lt
 8006ef6:	4618      	movlt	r0, r3
 8006ef8:	e738      	b.n	8006d6c <_printf_float+0x9c>
 8006efa:	2301      	movs	r3, #1
 8006efc:	464a      	mov	r2, r9
 8006efe:	4631      	mov	r1, r6
 8006f00:	4628      	mov	r0, r5
 8006f02:	47b8      	blx	r7
 8006f04:	3001      	adds	r0, #1
 8006f06:	f43f af2f 	beq.w	8006d68 <_printf_float+0x98>
 8006f0a:	f108 0801 	add.w	r8, r8, #1
 8006f0e:	e7e6      	b.n	8006ede <_printf_float+0x20e>
 8006f10:	9b07      	ldr	r3, [sp, #28]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	dc3a      	bgt.n	8006f8c <_printf_float+0x2bc>
 8006f16:	4a1c      	ldr	r2, [pc, #112]	; (8006f88 <_printf_float+0x2b8>)
 8006f18:	2301      	movs	r3, #1
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	47b8      	blx	r7
 8006f20:	3001      	adds	r0, #1
 8006f22:	f43f af21 	beq.w	8006d68 <_printf_float+0x98>
 8006f26:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	d102      	bne.n	8006f34 <_printf_float+0x264>
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	07d9      	lsls	r1, r3, #31
 8006f32:	d5d8      	bpl.n	8006ee6 <_printf_float+0x216>
 8006f34:	4653      	mov	r3, sl
 8006f36:	465a      	mov	r2, fp
 8006f38:	4631      	mov	r1, r6
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	47b8      	blx	r7
 8006f3e:	3001      	adds	r0, #1
 8006f40:	f43f af12 	beq.w	8006d68 <_printf_float+0x98>
 8006f44:	f04f 0900 	mov.w	r9, #0
 8006f48:	f104 0a1a 	add.w	sl, r4, #26
 8006f4c:	9b07      	ldr	r3, [sp, #28]
 8006f4e:	425b      	negs	r3, r3
 8006f50:	454b      	cmp	r3, r9
 8006f52:	dc01      	bgt.n	8006f58 <_printf_float+0x288>
 8006f54:	9b08      	ldr	r3, [sp, #32]
 8006f56:	e795      	b.n	8006e84 <_printf_float+0x1b4>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	4652      	mov	r2, sl
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4628      	mov	r0, r5
 8006f60:	47b8      	blx	r7
 8006f62:	3001      	adds	r0, #1
 8006f64:	f43f af00 	beq.w	8006d68 <_printf_float+0x98>
 8006f68:	f109 0901 	add.w	r9, r9, #1
 8006f6c:	e7ee      	b.n	8006f4c <_printf_float+0x27c>
 8006f6e:	bf00      	nop
 8006f70:	ffffffff 	.word	0xffffffff
 8006f74:	7fefffff 	.word	0x7fefffff
 8006f78:	08009af0 	.word	0x08009af0
 8006f7c:	08009af4 	.word	0x08009af4
 8006f80:	08009af8 	.word	0x08009af8
 8006f84:	08009afc 	.word	0x08009afc
 8006f88:	08009b00 	.word	0x08009b00
 8006f8c:	9a08      	ldr	r2, [sp, #32]
 8006f8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f90:	429a      	cmp	r2, r3
 8006f92:	bfa8      	it	ge
 8006f94:	461a      	movge	r2, r3
 8006f96:	2a00      	cmp	r2, #0
 8006f98:	4691      	mov	r9, r2
 8006f9a:	dc38      	bgt.n	800700e <_printf_float+0x33e>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	9305      	str	r3, [sp, #20]
 8006fa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fa4:	f104 021a 	add.w	r2, r4, #26
 8006fa8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006faa:	9905      	ldr	r1, [sp, #20]
 8006fac:	9304      	str	r3, [sp, #16]
 8006fae:	eba3 0309 	sub.w	r3, r3, r9
 8006fb2:	428b      	cmp	r3, r1
 8006fb4:	dc33      	bgt.n	800701e <_printf_float+0x34e>
 8006fb6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	db3c      	blt.n	8007038 <_printf_float+0x368>
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	07da      	lsls	r2, r3, #31
 8006fc2:	d439      	bmi.n	8007038 <_printf_float+0x368>
 8006fc4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006fc8:	eba2 0903 	sub.w	r9, r2, r3
 8006fcc:	9b04      	ldr	r3, [sp, #16]
 8006fce:	1ad2      	subs	r2, r2, r3
 8006fd0:	4591      	cmp	r9, r2
 8006fd2:	bfa8      	it	ge
 8006fd4:	4691      	movge	r9, r2
 8006fd6:	f1b9 0f00 	cmp.w	r9, #0
 8006fda:	dc35      	bgt.n	8007048 <_printf_float+0x378>
 8006fdc:	f04f 0800 	mov.w	r8, #0
 8006fe0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fe4:	f104 0a1a 	add.w	sl, r4, #26
 8006fe8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006fec:	1a9b      	subs	r3, r3, r2
 8006fee:	eba3 0309 	sub.w	r3, r3, r9
 8006ff2:	4543      	cmp	r3, r8
 8006ff4:	f77f af77 	ble.w	8006ee6 <_printf_float+0x216>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	4652      	mov	r2, sl
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4628      	mov	r0, r5
 8007000:	47b8      	blx	r7
 8007002:	3001      	adds	r0, #1
 8007004:	f43f aeb0 	beq.w	8006d68 <_printf_float+0x98>
 8007008:	f108 0801 	add.w	r8, r8, #1
 800700c:	e7ec      	b.n	8006fe8 <_printf_float+0x318>
 800700e:	4613      	mov	r3, r2
 8007010:	4631      	mov	r1, r6
 8007012:	4642      	mov	r2, r8
 8007014:	4628      	mov	r0, r5
 8007016:	47b8      	blx	r7
 8007018:	3001      	adds	r0, #1
 800701a:	d1bf      	bne.n	8006f9c <_printf_float+0x2cc>
 800701c:	e6a4      	b.n	8006d68 <_printf_float+0x98>
 800701e:	2301      	movs	r3, #1
 8007020:	4631      	mov	r1, r6
 8007022:	4628      	mov	r0, r5
 8007024:	9204      	str	r2, [sp, #16]
 8007026:	47b8      	blx	r7
 8007028:	3001      	adds	r0, #1
 800702a:	f43f ae9d 	beq.w	8006d68 <_printf_float+0x98>
 800702e:	9b05      	ldr	r3, [sp, #20]
 8007030:	9a04      	ldr	r2, [sp, #16]
 8007032:	3301      	adds	r3, #1
 8007034:	9305      	str	r3, [sp, #20]
 8007036:	e7b7      	b.n	8006fa8 <_printf_float+0x2d8>
 8007038:	4653      	mov	r3, sl
 800703a:	465a      	mov	r2, fp
 800703c:	4631      	mov	r1, r6
 800703e:	4628      	mov	r0, r5
 8007040:	47b8      	blx	r7
 8007042:	3001      	adds	r0, #1
 8007044:	d1be      	bne.n	8006fc4 <_printf_float+0x2f4>
 8007046:	e68f      	b.n	8006d68 <_printf_float+0x98>
 8007048:	9a04      	ldr	r2, [sp, #16]
 800704a:	464b      	mov	r3, r9
 800704c:	4442      	add	r2, r8
 800704e:	4631      	mov	r1, r6
 8007050:	4628      	mov	r0, r5
 8007052:	47b8      	blx	r7
 8007054:	3001      	adds	r0, #1
 8007056:	d1c1      	bne.n	8006fdc <_printf_float+0x30c>
 8007058:	e686      	b.n	8006d68 <_printf_float+0x98>
 800705a:	9a08      	ldr	r2, [sp, #32]
 800705c:	2a01      	cmp	r2, #1
 800705e:	dc01      	bgt.n	8007064 <_printf_float+0x394>
 8007060:	07db      	lsls	r3, r3, #31
 8007062:	d537      	bpl.n	80070d4 <_printf_float+0x404>
 8007064:	2301      	movs	r3, #1
 8007066:	4642      	mov	r2, r8
 8007068:	4631      	mov	r1, r6
 800706a:	4628      	mov	r0, r5
 800706c:	47b8      	blx	r7
 800706e:	3001      	adds	r0, #1
 8007070:	f43f ae7a 	beq.w	8006d68 <_printf_float+0x98>
 8007074:	4653      	mov	r3, sl
 8007076:	465a      	mov	r2, fp
 8007078:	4631      	mov	r1, r6
 800707a:	4628      	mov	r0, r5
 800707c:	47b8      	blx	r7
 800707e:	3001      	adds	r0, #1
 8007080:	f43f ae72 	beq.w	8006d68 <_printf_float+0x98>
 8007084:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007088:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800708c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007090:	9b08      	ldr	r3, [sp, #32]
 8007092:	d01a      	beq.n	80070ca <_printf_float+0x3fa>
 8007094:	3b01      	subs	r3, #1
 8007096:	f108 0201 	add.w	r2, r8, #1
 800709a:	4631      	mov	r1, r6
 800709c:	4628      	mov	r0, r5
 800709e:	47b8      	blx	r7
 80070a0:	3001      	adds	r0, #1
 80070a2:	d10e      	bne.n	80070c2 <_printf_float+0x3f2>
 80070a4:	e660      	b.n	8006d68 <_printf_float+0x98>
 80070a6:	2301      	movs	r3, #1
 80070a8:	464a      	mov	r2, r9
 80070aa:	4631      	mov	r1, r6
 80070ac:	4628      	mov	r0, r5
 80070ae:	47b8      	blx	r7
 80070b0:	3001      	adds	r0, #1
 80070b2:	f43f ae59 	beq.w	8006d68 <_printf_float+0x98>
 80070b6:	f108 0801 	add.w	r8, r8, #1
 80070ba:	9b08      	ldr	r3, [sp, #32]
 80070bc:	3b01      	subs	r3, #1
 80070be:	4543      	cmp	r3, r8
 80070c0:	dcf1      	bgt.n	80070a6 <_printf_float+0x3d6>
 80070c2:	9b04      	ldr	r3, [sp, #16]
 80070c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80070c8:	e6dd      	b.n	8006e86 <_printf_float+0x1b6>
 80070ca:	f04f 0800 	mov.w	r8, #0
 80070ce:	f104 091a 	add.w	r9, r4, #26
 80070d2:	e7f2      	b.n	80070ba <_printf_float+0x3ea>
 80070d4:	2301      	movs	r3, #1
 80070d6:	4642      	mov	r2, r8
 80070d8:	e7df      	b.n	800709a <_printf_float+0x3ca>
 80070da:	2301      	movs	r3, #1
 80070dc:	464a      	mov	r2, r9
 80070de:	4631      	mov	r1, r6
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b8      	blx	r7
 80070e4:	3001      	adds	r0, #1
 80070e6:	f43f ae3f 	beq.w	8006d68 <_printf_float+0x98>
 80070ea:	f108 0801 	add.w	r8, r8, #1
 80070ee:	68e3      	ldr	r3, [r4, #12]
 80070f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070f2:	1a5b      	subs	r3, r3, r1
 80070f4:	4543      	cmp	r3, r8
 80070f6:	dcf0      	bgt.n	80070da <_printf_float+0x40a>
 80070f8:	e6f9      	b.n	8006eee <_printf_float+0x21e>
 80070fa:	f04f 0800 	mov.w	r8, #0
 80070fe:	f104 0919 	add.w	r9, r4, #25
 8007102:	e7f4      	b.n	80070ee <_printf_float+0x41e>

08007104 <_printf_common>:
 8007104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007108:	4616      	mov	r6, r2
 800710a:	4699      	mov	r9, r3
 800710c:	688a      	ldr	r2, [r1, #8]
 800710e:	690b      	ldr	r3, [r1, #16]
 8007110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007114:	4293      	cmp	r3, r2
 8007116:	bfb8      	it	lt
 8007118:	4613      	movlt	r3, r2
 800711a:	6033      	str	r3, [r6, #0]
 800711c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007120:	4607      	mov	r7, r0
 8007122:	460c      	mov	r4, r1
 8007124:	b10a      	cbz	r2, 800712a <_printf_common+0x26>
 8007126:	3301      	adds	r3, #1
 8007128:	6033      	str	r3, [r6, #0]
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	0699      	lsls	r1, r3, #26
 800712e:	bf42      	ittt	mi
 8007130:	6833      	ldrmi	r3, [r6, #0]
 8007132:	3302      	addmi	r3, #2
 8007134:	6033      	strmi	r3, [r6, #0]
 8007136:	6825      	ldr	r5, [r4, #0]
 8007138:	f015 0506 	ands.w	r5, r5, #6
 800713c:	d106      	bne.n	800714c <_printf_common+0x48>
 800713e:	f104 0a19 	add.w	sl, r4, #25
 8007142:	68e3      	ldr	r3, [r4, #12]
 8007144:	6832      	ldr	r2, [r6, #0]
 8007146:	1a9b      	subs	r3, r3, r2
 8007148:	42ab      	cmp	r3, r5
 800714a:	dc26      	bgt.n	800719a <_printf_common+0x96>
 800714c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007150:	1e13      	subs	r3, r2, #0
 8007152:	6822      	ldr	r2, [r4, #0]
 8007154:	bf18      	it	ne
 8007156:	2301      	movne	r3, #1
 8007158:	0692      	lsls	r2, r2, #26
 800715a:	d42b      	bmi.n	80071b4 <_printf_common+0xb0>
 800715c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007160:	4649      	mov	r1, r9
 8007162:	4638      	mov	r0, r7
 8007164:	47c0      	blx	r8
 8007166:	3001      	adds	r0, #1
 8007168:	d01e      	beq.n	80071a8 <_printf_common+0xa4>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	6922      	ldr	r2, [r4, #16]
 800716e:	f003 0306 	and.w	r3, r3, #6
 8007172:	2b04      	cmp	r3, #4
 8007174:	bf02      	ittt	eq
 8007176:	68e5      	ldreq	r5, [r4, #12]
 8007178:	6833      	ldreq	r3, [r6, #0]
 800717a:	1aed      	subeq	r5, r5, r3
 800717c:	68a3      	ldr	r3, [r4, #8]
 800717e:	bf0c      	ite	eq
 8007180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007184:	2500      	movne	r5, #0
 8007186:	4293      	cmp	r3, r2
 8007188:	bfc4      	itt	gt
 800718a:	1a9b      	subgt	r3, r3, r2
 800718c:	18ed      	addgt	r5, r5, r3
 800718e:	2600      	movs	r6, #0
 8007190:	341a      	adds	r4, #26
 8007192:	42b5      	cmp	r5, r6
 8007194:	d11a      	bne.n	80071cc <_printf_common+0xc8>
 8007196:	2000      	movs	r0, #0
 8007198:	e008      	b.n	80071ac <_printf_common+0xa8>
 800719a:	2301      	movs	r3, #1
 800719c:	4652      	mov	r2, sl
 800719e:	4649      	mov	r1, r9
 80071a0:	4638      	mov	r0, r7
 80071a2:	47c0      	blx	r8
 80071a4:	3001      	adds	r0, #1
 80071a6:	d103      	bne.n	80071b0 <_printf_common+0xac>
 80071a8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b0:	3501      	adds	r5, #1
 80071b2:	e7c6      	b.n	8007142 <_printf_common+0x3e>
 80071b4:	18e1      	adds	r1, r4, r3
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	2030      	movs	r0, #48	; 0x30
 80071ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071be:	4422      	add	r2, r4
 80071c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071c8:	3302      	adds	r3, #2
 80071ca:	e7c7      	b.n	800715c <_printf_common+0x58>
 80071cc:	2301      	movs	r3, #1
 80071ce:	4622      	mov	r2, r4
 80071d0:	4649      	mov	r1, r9
 80071d2:	4638      	mov	r0, r7
 80071d4:	47c0      	blx	r8
 80071d6:	3001      	adds	r0, #1
 80071d8:	d0e6      	beq.n	80071a8 <_printf_common+0xa4>
 80071da:	3601      	adds	r6, #1
 80071dc:	e7d9      	b.n	8007192 <_printf_common+0x8e>
	...

080071e0 <_printf_i>:
 80071e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	7e0f      	ldrb	r7, [r1, #24]
 80071e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071e8:	2f78      	cmp	r7, #120	; 0x78
 80071ea:	4691      	mov	r9, r2
 80071ec:	4680      	mov	r8, r0
 80071ee:	460c      	mov	r4, r1
 80071f0:	469a      	mov	sl, r3
 80071f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071f6:	d807      	bhi.n	8007208 <_printf_i+0x28>
 80071f8:	2f62      	cmp	r7, #98	; 0x62
 80071fa:	d80a      	bhi.n	8007212 <_printf_i+0x32>
 80071fc:	2f00      	cmp	r7, #0
 80071fe:	f000 80d4 	beq.w	80073aa <_printf_i+0x1ca>
 8007202:	2f58      	cmp	r7, #88	; 0x58
 8007204:	f000 80c0 	beq.w	8007388 <_printf_i+0x1a8>
 8007208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800720c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007210:	e03a      	b.n	8007288 <_printf_i+0xa8>
 8007212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007216:	2b15      	cmp	r3, #21
 8007218:	d8f6      	bhi.n	8007208 <_printf_i+0x28>
 800721a:	a101      	add	r1, pc, #4	; (adr r1, 8007220 <_printf_i+0x40>)
 800721c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007220:	08007279 	.word	0x08007279
 8007224:	0800728d 	.word	0x0800728d
 8007228:	08007209 	.word	0x08007209
 800722c:	08007209 	.word	0x08007209
 8007230:	08007209 	.word	0x08007209
 8007234:	08007209 	.word	0x08007209
 8007238:	0800728d 	.word	0x0800728d
 800723c:	08007209 	.word	0x08007209
 8007240:	08007209 	.word	0x08007209
 8007244:	08007209 	.word	0x08007209
 8007248:	08007209 	.word	0x08007209
 800724c:	08007391 	.word	0x08007391
 8007250:	080072b9 	.word	0x080072b9
 8007254:	0800734b 	.word	0x0800734b
 8007258:	08007209 	.word	0x08007209
 800725c:	08007209 	.word	0x08007209
 8007260:	080073b3 	.word	0x080073b3
 8007264:	08007209 	.word	0x08007209
 8007268:	080072b9 	.word	0x080072b9
 800726c:	08007209 	.word	0x08007209
 8007270:	08007209 	.word	0x08007209
 8007274:	08007353 	.word	0x08007353
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	1d1a      	adds	r2, r3, #4
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	602a      	str	r2, [r5, #0]
 8007280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007288:	2301      	movs	r3, #1
 800728a:	e09f      	b.n	80073cc <_printf_i+0x1ec>
 800728c:	6820      	ldr	r0, [r4, #0]
 800728e:	682b      	ldr	r3, [r5, #0]
 8007290:	0607      	lsls	r7, r0, #24
 8007292:	f103 0104 	add.w	r1, r3, #4
 8007296:	6029      	str	r1, [r5, #0]
 8007298:	d501      	bpl.n	800729e <_printf_i+0xbe>
 800729a:	681e      	ldr	r6, [r3, #0]
 800729c:	e003      	b.n	80072a6 <_printf_i+0xc6>
 800729e:	0646      	lsls	r6, r0, #25
 80072a0:	d5fb      	bpl.n	800729a <_printf_i+0xba>
 80072a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80072a6:	2e00      	cmp	r6, #0
 80072a8:	da03      	bge.n	80072b2 <_printf_i+0xd2>
 80072aa:	232d      	movs	r3, #45	; 0x2d
 80072ac:	4276      	negs	r6, r6
 80072ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072b2:	485a      	ldr	r0, [pc, #360]	; (800741c <_printf_i+0x23c>)
 80072b4:	230a      	movs	r3, #10
 80072b6:	e012      	b.n	80072de <_printf_i+0xfe>
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	6820      	ldr	r0, [r4, #0]
 80072bc:	1d19      	adds	r1, r3, #4
 80072be:	6029      	str	r1, [r5, #0]
 80072c0:	0605      	lsls	r5, r0, #24
 80072c2:	d501      	bpl.n	80072c8 <_printf_i+0xe8>
 80072c4:	681e      	ldr	r6, [r3, #0]
 80072c6:	e002      	b.n	80072ce <_printf_i+0xee>
 80072c8:	0641      	lsls	r1, r0, #25
 80072ca:	d5fb      	bpl.n	80072c4 <_printf_i+0xe4>
 80072cc:	881e      	ldrh	r6, [r3, #0]
 80072ce:	4853      	ldr	r0, [pc, #332]	; (800741c <_printf_i+0x23c>)
 80072d0:	2f6f      	cmp	r7, #111	; 0x6f
 80072d2:	bf0c      	ite	eq
 80072d4:	2308      	moveq	r3, #8
 80072d6:	230a      	movne	r3, #10
 80072d8:	2100      	movs	r1, #0
 80072da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072de:	6865      	ldr	r5, [r4, #4]
 80072e0:	60a5      	str	r5, [r4, #8]
 80072e2:	2d00      	cmp	r5, #0
 80072e4:	bfa2      	ittt	ge
 80072e6:	6821      	ldrge	r1, [r4, #0]
 80072e8:	f021 0104 	bicge.w	r1, r1, #4
 80072ec:	6021      	strge	r1, [r4, #0]
 80072ee:	b90e      	cbnz	r6, 80072f4 <_printf_i+0x114>
 80072f0:	2d00      	cmp	r5, #0
 80072f2:	d04b      	beq.n	800738c <_printf_i+0x1ac>
 80072f4:	4615      	mov	r5, r2
 80072f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80072fa:	fb03 6711 	mls	r7, r3, r1, r6
 80072fe:	5dc7      	ldrb	r7, [r0, r7]
 8007300:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007304:	4637      	mov	r7, r6
 8007306:	42bb      	cmp	r3, r7
 8007308:	460e      	mov	r6, r1
 800730a:	d9f4      	bls.n	80072f6 <_printf_i+0x116>
 800730c:	2b08      	cmp	r3, #8
 800730e:	d10b      	bne.n	8007328 <_printf_i+0x148>
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	07de      	lsls	r6, r3, #31
 8007314:	d508      	bpl.n	8007328 <_printf_i+0x148>
 8007316:	6923      	ldr	r3, [r4, #16]
 8007318:	6861      	ldr	r1, [r4, #4]
 800731a:	4299      	cmp	r1, r3
 800731c:	bfde      	ittt	le
 800731e:	2330      	movle	r3, #48	; 0x30
 8007320:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007324:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007328:	1b52      	subs	r2, r2, r5
 800732a:	6122      	str	r2, [r4, #16]
 800732c:	f8cd a000 	str.w	sl, [sp]
 8007330:	464b      	mov	r3, r9
 8007332:	aa03      	add	r2, sp, #12
 8007334:	4621      	mov	r1, r4
 8007336:	4640      	mov	r0, r8
 8007338:	f7ff fee4 	bl	8007104 <_printf_common>
 800733c:	3001      	adds	r0, #1
 800733e:	d14a      	bne.n	80073d6 <_printf_i+0x1f6>
 8007340:	f04f 30ff 	mov.w	r0, #4294967295
 8007344:	b004      	add	sp, #16
 8007346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	f043 0320 	orr.w	r3, r3, #32
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	4833      	ldr	r0, [pc, #204]	; (8007420 <_printf_i+0x240>)
 8007354:	2778      	movs	r7, #120	; 0x78
 8007356:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	6829      	ldr	r1, [r5, #0]
 800735e:	061f      	lsls	r7, r3, #24
 8007360:	f851 6b04 	ldr.w	r6, [r1], #4
 8007364:	d402      	bmi.n	800736c <_printf_i+0x18c>
 8007366:	065f      	lsls	r7, r3, #25
 8007368:	bf48      	it	mi
 800736a:	b2b6      	uxthmi	r6, r6
 800736c:	07df      	lsls	r7, r3, #31
 800736e:	bf48      	it	mi
 8007370:	f043 0320 	orrmi.w	r3, r3, #32
 8007374:	6029      	str	r1, [r5, #0]
 8007376:	bf48      	it	mi
 8007378:	6023      	strmi	r3, [r4, #0]
 800737a:	b91e      	cbnz	r6, 8007384 <_printf_i+0x1a4>
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	f023 0320 	bic.w	r3, r3, #32
 8007382:	6023      	str	r3, [r4, #0]
 8007384:	2310      	movs	r3, #16
 8007386:	e7a7      	b.n	80072d8 <_printf_i+0xf8>
 8007388:	4824      	ldr	r0, [pc, #144]	; (800741c <_printf_i+0x23c>)
 800738a:	e7e4      	b.n	8007356 <_printf_i+0x176>
 800738c:	4615      	mov	r5, r2
 800738e:	e7bd      	b.n	800730c <_printf_i+0x12c>
 8007390:	682b      	ldr	r3, [r5, #0]
 8007392:	6826      	ldr	r6, [r4, #0]
 8007394:	6961      	ldr	r1, [r4, #20]
 8007396:	1d18      	adds	r0, r3, #4
 8007398:	6028      	str	r0, [r5, #0]
 800739a:	0635      	lsls	r5, r6, #24
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	d501      	bpl.n	80073a4 <_printf_i+0x1c4>
 80073a0:	6019      	str	r1, [r3, #0]
 80073a2:	e002      	b.n	80073aa <_printf_i+0x1ca>
 80073a4:	0670      	lsls	r0, r6, #25
 80073a6:	d5fb      	bpl.n	80073a0 <_printf_i+0x1c0>
 80073a8:	8019      	strh	r1, [r3, #0]
 80073aa:	2300      	movs	r3, #0
 80073ac:	6123      	str	r3, [r4, #16]
 80073ae:	4615      	mov	r5, r2
 80073b0:	e7bc      	b.n	800732c <_printf_i+0x14c>
 80073b2:	682b      	ldr	r3, [r5, #0]
 80073b4:	1d1a      	adds	r2, r3, #4
 80073b6:	602a      	str	r2, [r5, #0]
 80073b8:	681d      	ldr	r5, [r3, #0]
 80073ba:	6862      	ldr	r2, [r4, #4]
 80073bc:	2100      	movs	r1, #0
 80073be:	4628      	mov	r0, r5
 80073c0:	f7f8 ff3e 	bl	8000240 <memchr>
 80073c4:	b108      	cbz	r0, 80073ca <_printf_i+0x1ea>
 80073c6:	1b40      	subs	r0, r0, r5
 80073c8:	6060      	str	r0, [r4, #4]
 80073ca:	6863      	ldr	r3, [r4, #4]
 80073cc:	6123      	str	r3, [r4, #16]
 80073ce:	2300      	movs	r3, #0
 80073d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d4:	e7aa      	b.n	800732c <_printf_i+0x14c>
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	462a      	mov	r2, r5
 80073da:	4649      	mov	r1, r9
 80073dc:	4640      	mov	r0, r8
 80073de:	47d0      	blx	sl
 80073e0:	3001      	adds	r0, #1
 80073e2:	d0ad      	beq.n	8007340 <_printf_i+0x160>
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	079b      	lsls	r3, r3, #30
 80073e8:	d413      	bmi.n	8007412 <_printf_i+0x232>
 80073ea:	68e0      	ldr	r0, [r4, #12]
 80073ec:	9b03      	ldr	r3, [sp, #12]
 80073ee:	4298      	cmp	r0, r3
 80073f0:	bfb8      	it	lt
 80073f2:	4618      	movlt	r0, r3
 80073f4:	e7a6      	b.n	8007344 <_printf_i+0x164>
 80073f6:	2301      	movs	r3, #1
 80073f8:	4632      	mov	r2, r6
 80073fa:	4649      	mov	r1, r9
 80073fc:	4640      	mov	r0, r8
 80073fe:	47d0      	blx	sl
 8007400:	3001      	adds	r0, #1
 8007402:	d09d      	beq.n	8007340 <_printf_i+0x160>
 8007404:	3501      	adds	r5, #1
 8007406:	68e3      	ldr	r3, [r4, #12]
 8007408:	9903      	ldr	r1, [sp, #12]
 800740a:	1a5b      	subs	r3, r3, r1
 800740c:	42ab      	cmp	r3, r5
 800740e:	dcf2      	bgt.n	80073f6 <_printf_i+0x216>
 8007410:	e7eb      	b.n	80073ea <_printf_i+0x20a>
 8007412:	2500      	movs	r5, #0
 8007414:	f104 0619 	add.w	r6, r4, #25
 8007418:	e7f5      	b.n	8007406 <_printf_i+0x226>
 800741a:	bf00      	nop
 800741c:	08009b02 	.word	0x08009b02
 8007420:	08009b13 	.word	0x08009b13

08007424 <std>:
 8007424:	2300      	movs	r3, #0
 8007426:	b510      	push	{r4, lr}
 8007428:	4604      	mov	r4, r0
 800742a:	e9c0 3300 	strd	r3, r3, [r0]
 800742e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007432:	6083      	str	r3, [r0, #8]
 8007434:	8181      	strh	r1, [r0, #12]
 8007436:	6643      	str	r3, [r0, #100]	; 0x64
 8007438:	81c2      	strh	r2, [r0, #14]
 800743a:	6183      	str	r3, [r0, #24]
 800743c:	4619      	mov	r1, r3
 800743e:	2208      	movs	r2, #8
 8007440:	305c      	adds	r0, #92	; 0x5c
 8007442:	f000 f936 	bl	80076b2 <memset>
 8007446:	4b05      	ldr	r3, [pc, #20]	; (800745c <std+0x38>)
 8007448:	6263      	str	r3, [r4, #36]	; 0x24
 800744a:	4b05      	ldr	r3, [pc, #20]	; (8007460 <std+0x3c>)
 800744c:	62a3      	str	r3, [r4, #40]	; 0x28
 800744e:	4b05      	ldr	r3, [pc, #20]	; (8007464 <std+0x40>)
 8007450:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007452:	4b05      	ldr	r3, [pc, #20]	; (8007468 <std+0x44>)
 8007454:	6224      	str	r4, [r4, #32]
 8007456:	6323      	str	r3, [r4, #48]	; 0x30
 8007458:	bd10      	pop	{r4, pc}
 800745a:	bf00      	nop
 800745c:	0800762d 	.word	0x0800762d
 8007460:	0800764f 	.word	0x0800764f
 8007464:	08007687 	.word	0x08007687
 8007468:	080076ab 	.word	0x080076ab

0800746c <stdio_exit_handler>:
 800746c:	4a02      	ldr	r2, [pc, #8]	; (8007478 <stdio_exit_handler+0xc>)
 800746e:	4903      	ldr	r1, [pc, #12]	; (800747c <stdio_exit_handler+0x10>)
 8007470:	4803      	ldr	r0, [pc, #12]	; (8007480 <stdio_exit_handler+0x14>)
 8007472:	f000 b869 	b.w	8007548 <_fwalk_sglue>
 8007476:	bf00      	nop
 8007478:	20000064 	.word	0x20000064
 800747c:	0800904d 	.word	0x0800904d
 8007480:	20000070 	.word	0x20000070

08007484 <cleanup_stdio>:
 8007484:	6841      	ldr	r1, [r0, #4]
 8007486:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <cleanup_stdio+0x34>)
 8007488:	4299      	cmp	r1, r3
 800748a:	b510      	push	{r4, lr}
 800748c:	4604      	mov	r4, r0
 800748e:	d001      	beq.n	8007494 <cleanup_stdio+0x10>
 8007490:	f001 fddc 	bl	800904c <_fflush_r>
 8007494:	68a1      	ldr	r1, [r4, #8]
 8007496:	4b09      	ldr	r3, [pc, #36]	; (80074bc <cleanup_stdio+0x38>)
 8007498:	4299      	cmp	r1, r3
 800749a:	d002      	beq.n	80074a2 <cleanup_stdio+0x1e>
 800749c:	4620      	mov	r0, r4
 800749e:	f001 fdd5 	bl	800904c <_fflush_r>
 80074a2:	68e1      	ldr	r1, [r4, #12]
 80074a4:	4b06      	ldr	r3, [pc, #24]	; (80074c0 <cleanup_stdio+0x3c>)
 80074a6:	4299      	cmp	r1, r3
 80074a8:	d004      	beq.n	80074b4 <cleanup_stdio+0x30>
 80074aa:	4620      	mov	r0, r4
 80074ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074b0:	f001 bdcc 	b.w	800904c <_fflush_r>
 80074b4:	bd10      	pop	{r4, pc}
 80074b6:	bf00      	nop
 80074b8:	20000590 	.word	0x20000590
 80074bc:	200005f8 	.word	0x200005f8
 80074c0:	20000660 	.word	0x20000660

080074c4 <global_stdio_init.part.0>:
 80074c4:	b510      	push	{r4, lr}
 80074c6:	4b0b      	ldr	r3, [pc, #44]	; (80074f4 <global_stdio_init.part.0+0x30>)
 80074c8:	4c0b      	ldr	r4, [pc, #44]	; (80074f8 <global_stdio_init.part.0+0x34>)
 80074ca:	4a0c      	ldr	r2, [pc, #48]	; (80074fc <global_stdio_init.part.0+0x38>)
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	4620      	mov	r0, r4
 80074d0:	2200      	movs	r2, #0
 80074d2:	2104      	movs	r1, #4
 80074d4:	f7ff ffa6 	bl	8007424 <std>
 80074d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80074dc:	2201      	movs	r2, #1
 80074de:	2109      	movs	r1, #9
 80074e0:	f7ff ffa0 	bl	8007424 <std>
 80074e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80074e8:	2202      	movs	r2, #2
 80074ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ee:	2112      	movs	r1, #18
 80074f0:	f7ff bf98 	b.w	8007424 <std>
 80074f4:	200006c8 	.word	0x200006c8
 80074f8:	20000590 	.word	0x20000590
 80074fc:	0800746d 	.word	0x0800746d

08007500 <__sfp_lock_acquire>:
 8007500:	4801      	ldr	r0, [pc, #4]	; (8007508 <__sfp_lock_acquire+0x8>)
 8007502:	f000 b953 	b.w	80077ac <__retarget_lock_acquire_recursive>
 8007506:	bf00      	nop
 8007508:	200006d1 	.word	0x200006d1

0800750c <__sfp_lock_release>:
 800750c:	4801      	ldr	r0, [pc, #4]	; (8007514 <__sfp_lock_release+0x8>)
 800750e:	f000 b94e 	b.w	80077ae <__retarget_lock_release_recursive>
 8007512:	bf00      	nop
 8007514:	200006d1 	.word	0x200006d1

08007518 <__sinit>:
 8007518:	b510      	push	{r4, lr}
 800751a:	4604      	mov	r4, r0
 800751c:	f7ff fff0 	bl	8007500 <__sfp_lock_acquire>
 8007520:	6a23      	ldr	r3, [r4, #32]
 8007522:	b11b      	cbz	r3, 800752c <__sinit+0x14>
 8007524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007528:	f7ff bff0 	b.w	800750c <__sfp_lock_release>
 800752c:	4b04      	ldr	r3, [pc, #16]	; (8007540 <__sinit+0x28>)
 800752e:	6223      	str	r3, [r4, #32]
 8007530:	4b04      	ldr	r3, [pc, #16]	; (8007544 <__sinit+0x2c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1f5      	bne.n	8007524 <__sinit+0xc>
 8007538:	f7ff ffc4 	bl	80074c4 <global_stdio_init.part.0>
 800753c:	e7f2      	b.n	8007524 <__sinit+0xc>
 800753e:	bf00      	nop
 8007540:	08007485 	.word	0x08007485
 8007544:	200006c8 	.word	0x200006c8

08007548 <_fwalk_sglue>:
 8007548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800754c:	4607      	mov	r7, r0
 800754e:	4688      	mov	r8, r1
 8007550:	4614      	mov	r4, r2
 8007552:	2600      	movs	r6, #0
 8007554:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007558:	f1b9 0901 	subs.w	r9, r9, #1
 800755c:	d505      	bpl.n	800756a <_fwalk_sglue+0x22>
 800755e:	6824      	ldr	r4, [r4, #0]
 8007560:	2c00      	cmp	r4, #0
 8007562:	d1f7      	bne.n	8007554 <_fwalk_sglue+0xc>
 8007564:	4630      	mov	r0, r6
 8007566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800756a:	89ab      	ldrh	r3, [r5, #12]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d907      	bls.n	8007580 <_fwalk_sglue+0x38>
 8007570:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007574:	3301      	adds	r3, #1
 8007576:	d003      	beq.n	8007580 <_fwalk_sglue+0x38>
 8007578:	4629      	mov	r1, r5
 800757a:	4638      	mov	r0, r7
 800757c:	47c0      	blx	r8
 800757e:	4306      	orrs	r6, r0
 8007580:	3568      	adds	r5, #104	; 0x68
 8007582:	e7e9      	b.n	8007558 <_fwalk_sglue+0x10>

08007584 <sniprintf>:
 8007584:	b40c      	push	{r2, r3}
 8007586:	b530      	push	{r4, r5, lr}
 8007588:	4b17      	ldr	r3, [pc, #92]	; (80075e8 <sniprintf+0x64>)
 800758a:	1e0c      	subs	r4, r1, #0
 800758c:	681d      	ldr	r5, [r3, #0]
 800758e:	b09d      	sub	sp, #116	; 0x74
 8007590:	da08      	bge.n	80075a4 <sniprintf+0x20>
 8007592:	238b      	movs	r3, #139	; 0x8b
 8007594:	602b      	str	r3, [r5, #0]
 8007596:	f04f 30ff 	mov.w	r0, #4294967295
 800759a:	b01d      	add	sp, #116	; 0x74
 800759c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075a0:	b002      	add	sp, #8
 80075a2:	4770      	bx	lr
 80075a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80075a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80075ac:	bf14      	ite	ne
 80075ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80075b2:	4623      	moveq	r3, r4
 80075b4:	9304      	str	r3, [sp, #16]
 80075b6:	9307      	str	r3, [sp, #28]
 80075b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075bc:	9002      	str	r0, [sp, #8]
 80075be:	9006      	str	r0, [sp, #24]
 80075c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80075c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80075c6:	ab21      	add	r3, sp, #132	; 0x84
 80075c8:	a902      	add	r1, sp, #8
 80075ca:	4628      	mov	r0, r5
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	f001 fbb9 	bl	8008d44 <_svfiprintf_r>
 80075d2:	1c43      	adds	r3, r0, #1
 80075d4:	bfbc      	itt	lt
 80075d6:	238b      	movlt	r3, #139	; 0x8b
 80075d8:	602b      	strlt	r3, [r5, #0]
 80075da:	2c00      	cmp	r4, #0
 80075dc:	d0dd      	beq.n	800759a <sniprintf+0x16>
 80075de:	9b02      	ldr	r3, [sp, #8]
 80075e0:	2200      	movs	r2, #0
 80075e2:	701a      	strb	r2, [r3, #0]
 80075e4:	e7d9      	b.n	800759a <sniprintf+0x16>
 80075e6:	bf00      	nop
 80075e8:	200000bc 	.word	0x200000bc

080075ec <siprintf>:
 80075ec:	b40e      	push	{r1, r2, r3}
 80075ee:	b500      	push	{lr}
 80075f0:	b09c      	sub	sp, #112	; 0x70
 80075f2:	ab1d      	add	r3, sp, #116	; 0x74
 80075f4:	9002      	str	r0, [sp, #8]
 80075f6:	9006      	str	r0, [sp, #24]
 80075f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075fc:	4809      	ldr	r0, [pc, #36]	; (8007624 <siprintf+0x38>)
 80075fe:	9107      	str	r1, [sp, #28]
 8007600:	9104      	str	r1, [sp, #16]
 8007602:	4909      	ldr	r1, [pc, #36]	; (8007628 <siprintf+0x3c>)
 8007604:	f853 2b04 	ldr.w	r2, [r3], #4
 8007608:	9105      	str	r1, [sp, #20]
 800760a:	6800      	ldr	r0, [r0, #0]
 800760c:	9301      	str	r3, [sp, #4]
 800760e:	a902      	add	r1, sp, #8
 8007610:	f001 fb98 	bl	8008d44 <_svfiprintf_r>
 8007614:	9b02      	ldr	r3, [sp, #8]
 8007616:	2200      	movs	r2, #0
 8007618:	701a      	strb	r2, [r3, #0]
 800761a:	b01c      	add	sp, #112	; 0x70
 800761c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007620:	b003      	add	sp, #12
 8007622:	4770      	bx	lr
 8007624:	200000bc 	.word	0x200000bc
 8007628:	ffff0208 	.word	0xffff0208

0800762c <__sread>:
 800762c:	b510      	push	{r4, lr}
 800762e:	460c      	mov	r4, r1
 8007630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007634:	f000 f86c 	bl	8007710 <_read_r>
 8007638:	2800      	cmp	r0, #0
 800763a:	bfab      	itete	ge
 800763c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800763e:	89a3      	ldrhlt	r3, [r4, #12]
 8007640:	181b      	addge	r3, r3, r0
 8007642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007646:	bfac      	ite	ge
 8007648:	6563      	strge	r3, [r4, #84]	; 0x54
 800764a:	81a3      	strhlt	r3, [r4, #12]
 800764c:	bd10      	pop	{r4, pc}

0800764e <__swrite>:
 800764e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007652:	461f      	mov	r7, r3
 8007654:	898b      	ldrh	r3, [r1, #12]
 8007656:	05db      	lsls	r3, r3, #23
 8007658:	4605      	mov	r5, r0
 800765a:	460c      	mov	r4, r1
 800765c:	4616      	mov	r6, r2
 800765e:	d505      	bpl.n	800766c <__swrite+0x1e>
 8007660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007664:	2302      	movs	r3, #2
 8007666:	2200      	movs	r2, #0
 8007668:	f000 f840 	bl	80076ec <_lseek_r>
 800766c:	89a3      	ldrh	r3, [r4, #12]
 800766e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007676:	81a3      	strh	r3, [r4, #12]
 8007678:	4632      	mov	r2, r6
 800767a:	463b      	mov	r3, r7
 800767c:	4628      	mov	r0, r5
 800767e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007682:	f000 b857 	b.w	8007734 <_write_r>

08007686 <__sseek>:
 8007686:	b510      	push	{r4, lr}
 8007688:	460c      	mov	r4, r1
 800768a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800768e:	f000 f82d 	bl	80076ec <_lseek_r>
 8007692:	1c43      	adds	r3, r0, #1
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	bf15      	itete	ne
 8007698:	6560      	strne	r0, [r4, #84]	; 0x54
 800769a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800769e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076a2:	81a3      	strheq	r3, [r4, #12]
 80076a4:	bf18      	it	ne
 80076a6:	81a3      	strhne	r3, [r4, #12]
 80076a8:	bd10      	pop	{r4, pc}

080076aa <__sclose>:
 80076aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ae:	f000 b80d 	b.w	80076cc <_close_r>

080076b2 <memset>:
 80076b2:	4402      	add	r2, r0
 80076b4:	4603      	mov	r3, r0
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d100      	bne.n	80076bc <memset+0xa>
 80076ba:	4770      	bx	lr
 80076bc:	f803 1b01 	strb.w	r1, [r3], #1
 80076c0:	e7f9      	b.n	80076b6 <memset+0x4>
	...

080076c4 <_localeconv_r>:
 80076c4:	4800      	ldr	r0, [pc, #0]	; (80076c8 <_localeconv_r+0x4>)
 80076c6:	4770      	bx	lr
 80076c8:	200001b0 	.word	0x200001b0

080076cc <_close_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4d06      	ldr	r5, [pc, #24]	; (80076e8 <_close_r+0x1c>)
 80076d0:	2300      	movs	r3, #0
 80076d2:	4604      	mov	r4, r0
 80076d4:	4608      	mov	r0, r1
 80076d6:	602b      	str	r3, [r5, #0]
 80076d8:	f7fa fabb 	bl	8001c52 <_close>
 80076dc:	1c43      	adds	r3, r0, #1
 80076de:	d102      	bne.n	80076e6 <_close_r+0x1a>
 80076e0:	682b      	ldr	r3, [r5, #0]
 80076e2:	b103      	cbz	r3, 80076e6 <_close_r+0x1a>
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	bd38      	pop	{r3, r4, r5, pc}
 80076e8:	200006cc 	.word	0x200006cc

080076ec <_lseek_r>:
 80076ec:	b538      	push	{r3, r4, r5, lr}
 80076ee:	4d07      	ldr	r5, [pc, #28]	; (800770c <_lseek_r+0x20>)
 80076f0:	4604      	mov	r4, r0
 80076f2:	4608      	mov	r0, r1
 80076f4:	4611      	mov	r1, r2
 80076f6:	2200      	movs	r2, #0
 80076f8:	602a      	str	r2, [r5, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	f7fa fad0 	bl	8001ca0 <_lseek>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	d102      	bne.n	800770a <_lseek_r+0x1e>
 8007704:	682b      	ldr	r3, [r5, #0]
 8007706:	b103      	cbz	r3, 800770a <_lseek_r+0x1e>
 8007708:	6023      	str	r3, [r4, #0]
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	200006cc 	.word	0x200006cc

08007710 <_read_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	4d07      	ldr	r5, [pc, #28]	; (8007730 <_read_r+0x20>)
 8007714:	4604      	mov	r4, r0
 8007716:	4608      	mov	r0, r1
 8007718:	4611      	mov	r1, r2
 800771a:	2200      	movs	r2, #0
 800771c:	602a      	str	r2, [r5, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	f7fa fa5e 	bl	8001be0 <_read>
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	d102      	bne.n	800772e <_read_r+0x1e>
 8007728:	682b      	ldr	r3, [r5, #0]
 800772a:	b103      	cbz	r3, 800772e <_read_r+0x1e>
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	bd38      	pop	{r3, r4, r5, pc}
 8007730:	200006cc 	.word	0x200006cc

08007734 <_write_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4d07      	ldr	r5, [pc, #28]	; (8007754 <_write_r+0x20>)
 8007738:	4604      	mov	r4, r0
 800773a:	4608      	mov	r0, r1
 800773c:	4611      	mov	r1, r2
 800773e:	2200      	movs	r2, #0
 8007740:	602a      	str	r2, [r5, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	f7fa fa69 	bl	8001c1a <_write>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d102      	bne.n	8007752 <_write_r+0x1e>
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	b103      	cbz	r3, 8007752 <_write_r+0x1e>
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	bd38      	pop	{r3, r4, r5, pc}
 8007754:	200006cc 	.word	0x200006cc

08007758 <__errno>:
 8007758:	4b01      	ldr	r3, [pc, #4]	; (8007760 <__errno+0x8>)
 800775a:	6818      	ldr	r0, [r3, #0]
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	200000bc 	.word	0x200000bc

08007764 <__libc_init_array>:
 8007764:	b570      	push	{r4, r5, r6, lr}
 8007766:	4d0d      	ldr	r5, [pc, #52]	; (800779c <__libc_init_array+0x38>)
 8007768:	4c0d      	ldr	r4, [pc, #52]	; (80077a0 <__libc_init_array+0x3c>)
 800776a:	1b64      	subs	r4, r4, r5
 800776c:	10a4      	asrs	r4, r4, #2
 800776e:	2600      	movs	r6, #0
 8007770:	42a6      	cmp	r6, r4
 8007772:	d109      	bne.n	8007788 <__libc_init_array+0x24>
 8007774:	4d0b      	ldr	r5, [pc, #44]	; (80077a4 <__libc_init_array+0x40>)
 8007776:	4c0c      	ldr	r4, [pc, #48]	; (80077a8 <__libc_init_array+0x44>)
 8007778:	f002 f80c 	bl	8009794 <_init>
 800777c:	1b64      	subs	r4, r4, r5
 800777e:	10a4      	asrs	r4, r4, #2
 8007780:	2600      	movs	r6, #0
 8007782:	42a6      	cmp	r6, r4
 8007784:	d105      	bne.n	8007792 <__libc_init_array+0x2e>
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	f855 3b04 	ldr.w	r3, [r5], #4
 800778c:	4798      	blx	r3
 800778e:	3601      	adds	r6, #1
 8007790:	e7ee      	b.n	8007770 <__libc_init_array+0xc>
 8007792:	f855 3b04 	ldr.w	r3, [r5], #4
 8007796:	4798      	blx	r3
 8007798:	3601      	adds	r6, #1
 800779a:	e7f2      	b.n	8007782 <__libc_init_array+0x1e>
 800779c:	08009e6c 	.word	0x08009e6c
 80077a0:	08009e6c 	.word	0x08009e6c
 80077a4:	08009e6c 	.word	0x08009e6c
 80077a8:	08009e70 	.word	0x08009e70

080077ac <__retarget_lock_acquire_recursive>:
 80077ac:	4770      	bx	lr

080077ae <__retarget_lock_release_recursive>:
 80077ae:	4770      	bx	lr

080077b0 <quorem>:
 80077b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b4:	6903      	ldr	r3, [r0, #16]
 80077b6:	690c      	ldr	r4, [r1, #16]
 80077b8:	42a3      	cmp	r3, r4
 80077ba:	4607      	mov	r7, r0
 80077bc:	db7e      	blt.n	80078bc <quorem+0x10c>
 80077be:	3c01      	subs	r4, #1
 80077c0:	f101 0814 	add.w	r8, r1, #20
 80077c4:	f100 0514 	add.w	r5, r0, #20
 80077c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077cc:	9301      	str	r3, [sp, #4]
 80077ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077d6:	3301      	adds	r3, #1
 80077d8:	429a      	cmp	r2, r3
 80077da:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80077de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80077e6:	d331      	bcc.n	800784c <quorem+0x9c>
 80077e8:	f04f 0e00 	mov.w	lr, #0
 80077ec:	4640      	mov	r0, r8
 80077ee:	46ac      	mov	ip, r5
 80077f0:	46f2      	mov	sl, lr
 80077f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80077f6:	b293      	uxth	r3, r2
 80077f8:	fb06 e303 	mla	r3, r6, r3, lr
 80077fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007800:	0c1a      	lsrs	r2, r3, #16
 8007802:	b29b      	uxth	r3, r3
 8007804:	ebaa 0303 	sub.w	r3, sl, r3
 8007808:	f8dc a000 	ldr.w	sl, [ip]
 800780c:	fa13 f38a 	uxtah	r3, r3, sl
 8007810:	fb06 220e 	mla	r2, r6, lr, r2
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	9b00      	ldr	r3, [sp, #0]
 8007818:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800781c:	b292      	uxth	r2, r2
 800781e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007822:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007826:	f8bd 3000 	ldrh.w	r3, [sp]
 800782a:	4581      	cmp	r9, r0
 800782c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007830:	f84c 3b04 	str.w	r3, [ip], #4
 8007834:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007838:	d2db      	bcs.n	80077f2 <quorem+0x42>
 800783a:	f855 300b 	ldr.w	r3, [r5, fp]
 800783e:	b92b      	cbnz	r3, 800784c <quorem+0x9c>
 8007840:	9b01      	ldr	r3, [sp, #4]
 8007842:	3b04      	subs	r3, #4
 8007844:	429d      	cmp	r5, r3
 8007846:	461a      	mov	r2, r3
 8007848:	d32c      	bcc.n	80078a4 <quorem+0xf4>
 800784a:	613c      	str	r4, [r7, #16]
 800784c:	4638      	mov	r0, r7
 800784e:	f001 f91f 	bl	8008a90 <__mcmp>
 8007852:	2800      	cmp	r0, #0
 8007854:	db22      	blt.n	800789c <quorem+0xec>
 8007856:	3601      	adds	r6, #1
 8007858:	4629      	mov	r1, r5
 800785a:	2000      	movs	r0, #0
 800785c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007860:	f8d1 c000 	ldr.w	ip, [r1]
 8007864:	b293      	uxth	r3, r2
 8007866:	1ac3      	subs	r3, r0, r3
 8007868:	0c12      	lsrs	r2, r2, #16
 800786a:	fa13 f38c 	uxtah	r3, r3, ip
 800786e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007872:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007876:	b29b      	uxth	r3, r3
 8007878:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800787c:	45c1      	cmp	r9, r8
 800787e:	f841 3b04 	str.w	r3, [r1], #4
 8007882:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007886:	d2e9      	bcs.n	800785c <quorem+0xac>
 8007888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800788c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007890:	b922      	cbnz	r2, 800789c <quorem+0xec>
 8007892:	3b04      	subs	r3, #4
 8007894:	429d      	cmp	r5, r3
 8007896:	461a      	mov	r2, r3
 8007898:	d30a      	bcc.n	80078b0 <quorem+0x100>
 800789a:	613c      	str	r4, [r7, #16]
 800789c:	4630      	mov	r0, r6
 800789e:	b003      	add	sp, #12
 80078a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a4:	6812      	ldr	r2, [r2, #0]
 80078a6:	3b04      	subs	r3, #4
 80078a8:	2a00      	cmp	r2, #0
 80078aa:	d1ce      	bne.n	800784a <quorem+0x9a>
 80078ac:	3c01      	subs	r4, #1
 80078ae:	e7c9      	b.n	8007844 <quorem+0x94>
 80078b0:	6812      	ldr	r2, [r2, #0]
 80078b2:	3b04      	subs	r3, #4
 80078b4:	2a00      	cmp	r2, #0
 80078b6:	d1f0      	bne.n	800789a <quorem+0xea>
 80078b8:	3c01      	subs	r4, #1
 80078ba:	e7eb      	b.n	8007894 <quorem+0xe4>
 80078bc:	2000      	movs	r0, #0
 80078be:	e7ee      	b.n	800789e <quorem+0xee>

080078c0 <_dtoa_r>:
 80078c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	ed2d 8b02 	vpush	{d8}
 80078c8:	69c5      	ldr	r5, [r0, #28]
 80078ca:	b091      	sub	sp, #68	; 0x44
 80078cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80078d0:	ec59 8b10 	vmov	r8, r9, d0
 80078d4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80078d6:	9106      	str	r1, [sp, #24]
 80078d8:	4606      	mov	r6, r0
 80078da:	9208      	str	r2, [sp, #32]
 80078dc:	930c      	str	r3, [sp, #48]	; 0x30
 80078de:	b975      	cbnz	r5, 80078fe <_dtoa_r+0x3e>
 80078e0:	2010      	movs	r0, #16
 80078e2:	f000 fda5 	bl	8008430 <malloc>
 80078e6:	4602      	mov	r2, r0
 80078e8:	61f0      	str	r0, [r6, #28]
 80078ea:	b920      	cbnz	r0, 80078f6 <_dtoa_r+0x36>
 80078ec:	4ba6      	ldr	r3, [pc, #664]	; (8007b88 <_dtoa_r+0x2c8>)
 80078ee:	21ef      	movs	r1, #239	; 0xef
 80078f0:	48a6      	ldr	r0, [pc, #664]	; (8007b8c <_dtoa_r+0x2cc>)
 80078f2:	f001 fc0b 	bl	800910c <__assert_func>
 80078f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80078fa:	6005      	str	r5, [r0, #0]
 80078fc:	60c5      	str	r5, [r0, #12]
 80078fe:	69f3      	ldr	r3, [r6, #28]
 8007900:	6819      	ldr	r1, [r3, #0]
 8007902:	b151      	cbz	r1, 800791a <_dtoa_r+0x5a>
 8007904:	685a      	ldr	r2, [r3, #4]
 8007906:	604a      	str	r2, [r1, #4]
 8007908:	2301      	movs	r3, #1
 800790a:	4093      	lsls	r3, r2
 800790c:	608b      	str	r3, [r1, #8]
 800790e:	4630      	mov	r0, r6
 8007910:	f000 fe82 	bl	8008618 <_Bfree>
 8007914:	69f3      	ldr	r3, [r6, #28]
 8007916:	2200      	movs	r2, #0
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	f1b9 0300 	subs.w	r3, r9, #0
 800791e:	bfbb      	ittet	lt
 8007920:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007924:	9303      	strlt	r3, [sp, #12]
 8007926:	2300      	movge	r3, #0
 8007928:	2201      	movlt	r2, #1
 800792a:	bfac      	ite	ge
 800792c:	6023      	strge	r3, [r4, #0]
 800792e:	6022      	strlt	r2, [r4, #0]
 8007930:	4b97      	ldr	r3, [pc, #604]	; (8007b90 <_dtoa_r+0x2d0>)
 8007932:	9c03      	ldr	r4, [sp, #12]
 8007934:	43a3      	bics	r3, r4
 8007936:	d11c      	bne.n	8007972 <_dtoa_r+0xb2>
 8007938:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800793a:	f242 730f 	movw	r3, #9999	; 0x270f
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007944:	ea53 0308 	orrs.w	r3, r3, r8
 8007948:	f000 84fb 	beq.w	8008342 <_dtoa_r+0xa82>
 800794c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800794e:	b963      	cbnz	r3, 800796a <_dtoa_r+0xaa>
 8007950:	4b90      	ldr	r3, [pc, #576]	; (8007b94 <_dtoa_r+0x2d4>)
 8007952:	e020      	b.n	8007996 <_dtoa_r+0xd6>
 8007954:	4b90      	ldr	r3, [pc, #576]	; (8007b98 <_dtoa_r+0x2d8>)
 8007956:	9301      	str	r3, [sp, #4]
 8007958:	3308      	adds	r3, #8
 800795a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	9801      	ldr	r0, [sp, #4]
 8007960:	b011      	add	sp, #68	; 0x44
 8007962:	ecbd 8b02 	vpop	{d8}
 8007966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796a:	4b8a      	ldr	r3, [pc, #552]	; (8007b94 <_dtoa_r+0x2d4>)
 800796c:	9301      	str	r3, [sp, #4]
 800796e:	3303      	adds	r3, #3
 8007970:	e7f3      	b.n	800795a <_dtoa_r+0x9a>
 8007972:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007976:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800797a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800797e:	d10c      	bne.n	800799a <_dtoa_r+0xda>
 8007980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007982:	2301      	movs	r3, #1
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 84d7 	beq.w	800833c <_dtoa_r+0xa7c>
 800798e:	4b83      	ldr	r3, [pc, #524]	; (8007b9c <_dtoa_r+0x2dc>)
 8007990:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	3b01      	subs	r3, #1
 8007996:	9301      	str	r3, [sp, #4]
 8007998:	e7e1      	b.n	800795e <_dtoa_r+0x9e>
 800799a:	aa0e      	add	r2, sp, #56	; 0x38
 800799c:	a90f      	add	r1, sp, #60	; 0x3c
 800799e:	4630      	mov	r0, r6
 80079a0:	eeb0 0b48 	vmov.f64	d0, d8
 80079a4:	f001 f91a 	bl	8008bdc <__d2b>
 80079a8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80079ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079ae:	4605      	mov	r5, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d046      	beq.n	8007a42 <_dtoa_r+0x182>
 80079b4:	eeb0 7b48 	vmov.f64	d7, d8
 80079b8:	ee18 1a90 	vmov	r1, s17
 80079bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80079c0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80079c4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80079c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80079cc:	2000      	movs	r0, #0
 80079ce:	ee07 1a90 	vmov	s15, r1
 80079d2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80079d6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007b70 <_dtoa_r+0x2b0>
 80079da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80079de:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007b78 <_dtoa_r+0x2b8>
 80079e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80079e6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007b80 <_dtoa_r+0x2c0>
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80079f2:	eeb0 7b46 	vmov.f64	d7, d6
 80079f6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80079fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80079fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a06:	ee16 ba90 	vmov	fp, s13
 8007a0a:	9009      	str	r0, [sp, #36]	; 0x24
 8007a0c:	d508      	bpl.n	8007a20 <_dtoa_r+0x160>
 8007a0e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007a12:	eeb4 6b47 	vcmp.f64	d6, d7
 8007a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1a:	bf18      	it	ne
 8007a1c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007a20:	f1bb 0f16 	cmp.w	fp, #22
 8007a24:	d82b      	bhi.n	8007a7e <_dtoa_r+0x1be>
 8007a26:	495e      	ldr	r1, [pc, #376]	; (8007ba0 <_dtoa_r+0x2e0>)
 8007a28:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007a2c:	ed91 7b00 	vldr	d7, [r1]
 8007a30:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a38:	d501      	bpl.n	8007a3e <_dtoa_r+0x17e>
 8007a3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a3e:	2100      	movs	r1, #0
 8007a40:	e01e      	b.n	8007a80 <_dtoa_r+0x1c0>
 8007a42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a44:	4413      	add	r3, r2
 8007a46:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8007a4a:	2920      	cmp	r1, #32
 8007a4c:	bfc1      	itttt	gt
 8007a4e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8007a52:	408c      	lslgt	r4, r1
 8007a54:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8007a58:	fa28 f101 	lsrgt.w	r1, r8, r1
 8007a5c:	bfd6      	itet	le
 8007a5e:	f1c1 0120 	rsble	r1, r1, #32
 8007a62:	4321      	orrgt	r1, r4
 8007a64:	fa08 f101 	lslle.w	r1, r8, r1
 8007a68:	ee07 1a90 	vmov	s15, r1
 8007a6c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007a70:	3b01      	subs	r3, #1
 8007a72:	ee17 1a90 	vmov	r1, s15
 8007a76:	2001      	movs	r0, #1
 8007a78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007a7c:	e7a7      	b.n	80079ce <_dtoa_r+0x10e>
 8007a7e:	2101      	movs	r1, #1
 8007a80:	1ad2      	subs	r2, r2, r3
 8007a82:	1e53      	subs	r3, r2, #1
 8007a84:	9305      	str	r3, [sp, #20]
 8007a86:	bf45      	ittet	mi
 8007a88:	f1c2 0301 	rsbmi	r3, r2, #1
 8007a8c:	9304      	strmi	r3, [sp, #16]
 8007a8e:	2300      	movpl	r3, #0
 8007a90:	2300      	movmi	r3, #0
 8007a92:	bf4c      	ite	mi
 8007a94:	9305      	strmi	r3, [sp, #20]
 8007a96:	9304      	strpl	r3, [sp, #16]
 8007a98:	f1bb 0f00 	cmp.w	fp, #0
 8007a9c:	910b      	str	r1, [sp, #44]	; 0x2c
 8007a9e:	db18      	blt.n	8007ad2 <_dtoa_r+0x212>
 8007aa0:	9b05      	ldr	r3, [sp, #20]
 8007aa2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007aa6:	445b      	add	r3, fp
 8007aa8:	9305      	str	r3, [sp, #20]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	9a06      	ldr	r2, [sp, #24]
 8007aae:	2a09      	cmp	r2, #9
 8007ab0:	d848      	bhi.n	8007b44 <_dtoa_r+0x284>
 8007ab2:	2a05      	cmp	r2, #5
 8007ab4:	bfc4      	itt	gt
 8007ab6:	3a04      	subgt	r2, #4
 8007ab8:	9206      	strgt	r2, [sp, #24]
 8007aba:	9a06      	ldr	r2, [sp, #24]
 8007abc:	f1a2 0202 	sub.w	r2, r2, #2
 8007ac0:	bfcc      	ite	gt
 8007ac2:	2400      	movgt	r4, #0
 8007ac4:	2401      	movle	r4, #1
 8007ac6:	2a03      	cmp	r2, #3
 8007ac8:	d847      	bhi.n	8007b5a <_dtoa_r+0x29a>
 8007aca:	e8df f002 	tbb	[pc, r2]
 8007ace:	2d0b      	.short	0x2d0b
 8007ad0:	392b      	.short	0x392b
 8007ad2:	9b04      	ldr	r3, [sp, #16]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	eba3 030b 	sub.w	r3, r3, fp
 8007ada:	9304      	str	r3, [sp, #16]
 8007adc:	920a      	str	r2, [sp, #40]	; 0x28
 8007ade:	f1cb 0300 	rsb	r3, fp, #0
 8007ae2:	e7e3      	b.n	8007aac <_dtoa_r+0x1ec>
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	9207      	str	r2, [sp, #28]
 8007ae8:	9a08      	ldr	r2, [sp, #32]
 8007aea:	2a00      	cmp	r2, #0
 8007aec:	dc38      	bgt.n	8007b60 <_dtoa_r+0x2a0>
 8007aee:	f04f 0a01 	mov.w	sl, #1
 8007af2:	46d1      	mov	r9, sl
 8007af4:	4652      	mov	r2, sl
 8007af6:	f8cd a020 	str.w	sl, [sp, #32]
 8007afa:	69f7      	ldr	r7, [r6, #28]
 8007afc:	2100      	movs	r1, #0
 8007afe:	2004      	movs	r0, #4
 8007b00:	f100 0c14 	add.w	ip, r0, #20
 8007b04:	4594      	cmp	ip, r2
 8007b06:	d930      	bls.n	8007b6a <_dtoa_r+0x2aa>
 8007b08:	6079      	str	r1, [r7, #4]
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	930d      	str	r3, [sp, #52]	; 0x34
 8007b0e:	f000 fd43 	bl	8008598 <_Balloc>
 8007b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b14:	9001      	str	r0, [sp, #4]
 8007b16:	4602      	mov	r2, r0
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d145      	bne.n	8007ba8 <_dtoa_r+0x2e8>
 8007b1c:	4b21      	ldr	r3, [pc, #132]	; (8007ba4 <_dtoa_r+0x2e4>)
 8007b1e:	f240 11af 	movw	r1, #431	; 0x1af
 8007b22:	e6e5      	b.n	80078f0 <_dtoa_r+0x30>
 8007b24:	2201      	movs	r2, #1
 8007b26:	e7de      	b.n	8007ae6 <_dtoa_r+0x226>
 8007b28:	2200      	movs	r2, #0
 8007b2a:	9207      	str	r2, [sp, #28]
 8007b2c:	9a08      	ldr	r2, [sp, #32]
 8007b2e:	eb0b 0a02 	add.w	sl, fp, r2
 8007b32:	f10a 0901 	add.w	r9, sl, #1
 8007b36:	464a      	mov	r2, r9
 8007b38:	2a01      	cmp	r2, #1
 8007b3a:	bfb8      	it	lt
 8007b3c:	2201      	movlt	r2, #1
 8007b3e:	e7dc      	b.n	8007afa <_dtoa_r+0x23a>
 8007b40:	2201      	movs	r2, #1
 8007b42:	e7f2      	b.n	8007b2a <_dtoa_r+0x26a>
 8007b44:	2401      	movs	r4, #1
 8007b46:	2200      	movs	r2, #0
 8007b48:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007b4c:	f04f 3aff 	mov.w	sl, #4294967295
 8007b50:	2100      	movs	r1, #0
 8007b52:	46d1      	mov	r9, sl
 8007b54:	2212      	movs	r2, #18
 8007b56:	9108      	str	r1, [sp, #32]
 8007b58:	e7cf      	b.n	8007afa <_dtoa_r+0x23a>
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	9207      	str	r2, [sp, #28]
 8007b5e:	e7f5      	b.n	8007b4c <_dtoa_r+0x28c>
 8007b60:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007b64:	46d1      	mov	r9, sl
 8007b66:	4652      	mov	r2, sl
 8007b68:	e7c7      	b.n	8007afa <_dtoa_r+0x23a>
 8007b6a:	3101      	adds	r1, #1
 8007b6c:	0040      	lsls	r0, r0, #1
 8007b6e:	e7c7      	b.n	8007b00 <_dtoa_r+0x240>
 8007b70:	636f4361 	.word	0x636f4361
 8007b74:	3fd287a7 	.word	0x3fd287a7
 8007b78:	8b60c8b3 	.word	0x8b60c8b3
 8007b7c:	3fc68a28 	.word	0x3fc68a28
 8007b80:	509f79fb 	.word	0x509f79fb
 8007b84:	3fd34413 	.word	0x3fd34413
 8007b88:	08009b31 	.word	0x08009b31
 8007b8c:	08009b48 	.word	0x08009b48
 8007b90:	7ff00000 	.word	0x7ff00000
 8007b94:	08009b2d 	.word	0x08009b2d
 8007b98:	08009b24 	.word	0x08009b24
 8007b9c:	08009b01 	.word	0x08009b01
 8007ba0:	08009c38 	.word	0x08009c38
 8007ba4:	08009ba0 	.word	0x08009ba0
 8007ba8:	69f2      	ldr	r2, [r6, #28]
 8007baa:	9901      	ldr	r1, [sp, #4]
 8007bac:	6011      	str	r1, [r2, #0]
 8007bae:	f1b9 0f0e 	cmp.w	r9, #14
 8007bb2:	d86c      	bhi.n	8007c8e <_dtoa_r+0x3ce>
 8007bb4:	2c00      	cmp	r4, #0
 8007bb6:	d06a      	beq.n	8007c8e <_dtoa_r+0x3ce>
 8007bb8:	f1bb 0f00 	cmp.w	fp, #0
 8007bbc:	f340 80a0 	ble.w	8007d00 <_dtoa_r+0x440>
 8007bc0:	4ac1      	ldr	r2, [pc, #772]	; (8007ec8 <_dtoa_r+0x608>)
 8007bc2:	f00b 010f 	and.w	r1, fp, #15
 8007bc6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007bca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007bce:	ed92 7b00 	vldr	d7, [r2]
 8007bd2:	ea4f 122b 	mov.w	r2, fp, asr #4
 8007bd6:	f000 8087 	beq.w	8007ce8 <_dtoa_r+0x428>
 8007bda:	49bc      	ldr	r1, [pc, #752]	; (8007ecc <_dtoa_r+0x60c>)
 8007bdc:	ed91 6b08 	vldr	d6, [r1, #32]
 8007be0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007be4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007be8:	f002 020f 	and.w	r2, r2, #15
 8007bec:	2103      	movs	r1, #3
 8007bee:	48b7      	ldr	r0, [pc, #732]	; (8007ecc <_dtoa_r+0x60c>)
 8007bf0:	2a00      	cmp	r2, #0
 8007bf2:	d17b      	bne.n	8007cec <_dtoa_r+0x42c>
 8007bf4:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007bf8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007bfc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c06:	2a00      	cmp	r2, #0
 8007c08:	f000 80a0 	beq.w	8007d4c <_dtoa_r+0x48c>
 8007c0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007c10:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c18:	f140 8098 	bpl.w	8007d4c <_dtoa_r+0x48c>
 8007c1c:	f1b9 0f00 	cmp.w	r9, #0
 8007c20:	f000 8094 	beq.w	8007d4c <_dtoa_r+0x48c>
 8007c24:	f1ba 0f00 	cmp.w	sl, #0
 8007c28:	dd2f      	ble.n	8007c8a <_dtoa_r+0x3ca>
 8007c2a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007c2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c32:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c36:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007c3a:	3101      	adds	r1, #1
 8007c3c:	4654      	mov	r4, sl
 8007c3e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007c42:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007c46:	ee07 1a90 	vmov	s15, r1
 8007c4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007c4e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007c52:	ee15 7a90 	vmov	r7, s11
 8007c56:	ec51 0b15 	vmov	r0, r1, d5
 8007c5a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8007c5e:	2c00      	cmp	r4, #0
 8007c60:	d177      	bne.n	8007d52 <_dtoa_r+0x492>
 8007c62:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007c66:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007c6a:	ec41 0b17 	vmov	d7, r0, r1
 8007c6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c76:	f300 826a 	bgt.w	800814e <_dtoa_r+0x88e>
 8007c7a:	eeb1 7b47 	vneg.f64	d7, d7
 8007c7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c86:	f100 8260 	bmi.w	800814a <_dtoa_r+0x88a>
 8007c8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007c8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	f2c0 811d 	blt.w	8007ed0 <_dtoa_r+0x610>
 8007c96:	f1bb 0f0e 	cmp.w	fp, #14
 8007c9a:	f300 8119 	bgt.w	8007ed0 <_dtoa_r+0x610>
 8007c9e:	4b8a      	ldr	r3, [pc, #552]	; (8007ec8 <_dtoa_r+0x608>)
 8007ca0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ca4:	ed93 6b00 	vldr	d6, [r3]
 8007ca8:	9b08      	ldr	r3, [sp, #32]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f280 80b7 	bge.w	8007e1e <_dtoa_r+0x55e>
 8007cb0:	f1b9 0f00 	cmp.w	r9, #0
 8007cb4:	f300 80b3 	bgt.w	8007e1e <_dtoa_r+0x55e>
 8007cb8:	f040 8246 	bne.w	8008148 <_dtoa_r+0x888>
 8007cbc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007cc0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007cc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007cc8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd0:	464c      	mov	r4, r9
 8007cd2:	464f      	mov	r7, r9
 8007cd4:	f280 821c 	bge.w	8008110 <_dtoa_r+0x850>
 8007cd8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007cdc:	2331      	movs	r3, #49	; 0x31
 8007cde:	f808 3b01 	strb.w	r3, [r8], #1
 8007ce2:	f10b 0b01 	add.w	fp, fp, #1
 8007ce6:	e218      	b.n	800811a <_dtoa_r+0x85a>
 8007ce8:	2102      	movs	r1, #2
 8007cea:	e780      	b.n	8007bee <_dtoa_r+0x32e>
 8007cec:	07d4      	lsls	r4, r2, #31
 8007cee:	d504      	bpl.n	8007cfa <_dtoa_r+0x43a>
 8007cf0:	ed90 6b00 	vldr	d6, [r0]
 8007cf4:	3101      	adds	r1, #1
 8007cf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007cfa:	1052      	asrs	r2, r2, #1
 8007cfc:	3008      	adds	r0, #8
 8007cfe:	e777      	b.n	8007bf0 <_dtoa_r+0x330>
 8007d00:	d022      	beq.n	8007d48 <_dtoa_r+0x488>
 8007d02:	f1cb 0200 	rsb	r2, fp, #0
 8007d06:	4970      	ldr	r1, [pc, #448]	; (8007ec8 <_dtoa_r+0x608>)
 8007d08:	f002 000f 	and.w	r0, r2, #15
 8007d0c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007d10:	ed91 7b00 	vldr	d7, [r1]
 8007d14:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007d18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d1c:	486b      	ldr	r0, [pc, #428]	; (8007ecc <_dtoa_r+0x60c>)
 8007d1e:	1112      	asrs	r2, r2, #4
 8007d20:	2400      	movs	r4, #0
 8007d22:	2102      	movs	r1, #2
 8007d24:	b92a      	cbnz	r2, 8007d32 <_dtoa_r+0x472>
 8007d26:	2c00      	cmp	r4, #0
 8007d28:	f43f af6a 	beq.w	8007c00 <_dtoa_r+0x340>
 8007d2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d30:	e766      	b.n	8007c00 <_dtoa_r+0x340>
 8007d32:	07d7      	lsls	r7, r2, #31
 8007d34:	d505      	bpl.n	8007d42 <_dtoa_r+0x482>
 8007d36:	ed90 6b00 	vldr	d6, [r0]
 8007d3a:	3101      	adds	r1, #1
 8007d3c:	2401      	movs	r4, #1
 8007d3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d42:	1052      	asrs	r2, r2, #1
 8007d44:	3008      	adds	r0, #8
 8007d46:	e7ed      	b.n	8007d24 <_dtoa_r+0x464>
 8007d48:	2102      	movs	r1, #2
 8007d4a:	e759      	b.n	8007c00 <_dtoa_r+0x340>
 8007d4c:	465a      	mov	r2, fp
 8007d4e:	464c      	mov	r4, r9
 8007d50:	e775      	b.n	8007c3e <_dtoa_r+0x37e>
 8007d52:	ec41 0b17 	vmov	d7, r0, r1
 8007d56:	495c      	ldr	r1, [pc, #368]	; (8007ec8 <_dtoa_r+0x608>)
 8007d58:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007d5c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007d60:	9901      	ldr	r1, [sp, #4]
 8007d62:	440c      	add	r4, r1
 8007d64:	9907      	ldr	r1, [sp, #28]
 8007d66:	b351      	cbz	r1, 8007dbe <_dtoa_r+0x4fe>
 8007d68:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007d6c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007d70:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d74:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007d78:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007d7c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007d80:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007d84:	ee14 1a90 	vmov	r1, s9
 8007d88:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007d8c:	3130      	adds	r1, #48	; 0x30
 8007d8e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007d92:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d9a:	f808 1b01 	strb.w	r1, [r8], #1
 8007d9e:	d439      	bmi.n	8007e14 <_dtoa_r+0x554>
 8007da0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007da4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dac:	d472      	bmi.n	8007e94 <_dtoa_r+0x5d4>
 8007dae:	45a0      	cmp	r8, r4
 8007db0:	f43f af6b 	beq.w	8007c8a <_dtoa_r+0x3ca>
 8007db4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007db8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007dbc:	e7e0      	b.n	8007d80 <_dtoa_r+0x4c0>
 8007dbe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007dc2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007dcc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007dd0:	ee14 1a90 	vmov	r1, s9
 8007dd4:	3130      	adds	r1, #48	; 0x30
 8007dd6:	f808 1b01 	strb.w	r1, [r8], #1
 8007dda:	45a0      	cmp	r8, r4
 8007ddc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007de0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007de4:	d118      	bne.n	8007e18 <_dtoa_r+0x558>
 8007de6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007dea:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007dee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007df6:	dc4d      	bgt.n	8007e94 <_dtoa_r+0x5d4>
 8007df8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007dfc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e04:	f57f af41 	bpl.w	8007c8a <_dtoa_r+0x3ca>
 8007e08:	4680      	mov	r8, r0
 8007e0a:	3801      	subs	r0, #1
 8007e0c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007e10:	2b30      	cmp	r3, #48	; 0x30
 8007e12:	d0f9      	beq.n	8007e08 <_dtoa_r+0x548>
 8007e14:	4693      	mov	fp, r2
 8007e16:	e02a      	b.n	8007e6e <_dtoa_r+0x5ae>
 8007e18:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007e1c:	e7d6      	b.n	8007dcc <_dtoa_r+0x50c>
 8007e1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e22:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007e26:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e2a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007e2e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007e32:	ee15 3a10 	vmov	r3, s10
 8007e36:	3330      	adds	r3, #48	; 0x30
 8007e38:	f808 3b01 	strb.w	r3, [r8], #1
 8007e3c:	9b01      	ldr	r3, [sp, #4]
 8007e3e:	eba8 0303 	sub.w	r3, r8, r3
 8007e42:	4599      	cmp	r9, r3
 8007e44:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007e48:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007e4c:	d133      	bne.n	8007eb6 <_dtoa_r+0x5f6>
 8007e4e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007e52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e5a:	dc1a      	bgt.n	8007e92 <_dtoa_r+0x5d2>
 8007e5c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e64:	d103      	bne.n	8007e6e <_dtoa_r+0x5ae>
 8007e66:	ee15 3a10 	vmov	r3, s10
 8007e6a:	07d9      	lsls	r1, r3, #31
 8007e6c:	d411      	bmi.n	8007e92 <_dtoa_r+0x5d2>
 8007e6e:	4629      	mov	r1, r5
 8007e70:	4630      	mov	r0, r6
 8007e72:	f000 fbd1 	bl	8008618 <_Bfree>
 8007e76:	2300      	movs	r3, #0
 8007e78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e7a:	f888 3000 	strb.w	r3, [r8]
 8007e7e:	f10b 0301 	add.w	r3, fp, #1
 8007e82:	6013      	str	r3, [r2, #0]
 8007e84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f43f ad69 	beq.w	800795e <_dtoa_r+0x9e>
 8007e8c:	f8c3 8000 	str.w	r8, [r3]
 8007e90:	e565      	b.n	800795e <_dtoa_r+0x9e>
 8007e92:	465a      	mov	r2, fp
 8007e94:	4643      	mov	r3, r8
 8007e96:	4698      	mov	r8, r3
 8007e98:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8007e9c:	2939      	cmp	r1, #57	; 0x39
 8007e9e:	d106      	bne.n	8007eae <_dtoa_r+0x5ee>
 8007ea0:	9901      	ldr	r1, [sp, #4]
 8007ea2:	4299      	cmp	r1, r3
 8007ea4:	d1f7      	bne.n	8007e96 <_dtoa_r+0x5d6>
 8007ea6:	9801      	ldr	r0, [sp, #4]
 8007ea8:	2130      	movs	r1, #48	; 0x30
 8007eaa:	3201      	adds	r2, #1
 8007eac:	7001      	strb	r1, [r0, #0]
 8007eae:	7819      	ldrb	r1, [r3, #0]
 8007eb0:	3101      	adds	r1, #1
 8007eb2:	7019      	strb	r1, [r3, #0]
 8007eb4:	e7ae      	b.n	8007e14 <_dtoa_r+0x554>
 8007eb6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007eba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ec2:	d1b2      	bne.n	8007e2a <_dtoa_r+0x56a>
 8007ec4:	e7d3      	b.n	8007e6e <_dtoa_r+0x5ae>
 8007ec6:	bf00      	nop
 8007ec8:	08009c38 	.word	0x08009c38
 8007ecc:	08009c10 	.word	0x08009c10
 8007ed0:	9907      	ldr	r1, [sp, #28]
 8007ed2:	2900      	cmp	r1, #0
 8007ed4:	f000 80d0 	beq.w	8008078 <_dtoa_r+0x7b8>
 8007ed8:	9906      	ldr	r1, [sp, #24]
 8007eda:	2901      	cmp	r1, #1
 8007edc:	f300 80b4 	bgt.w	8008048 <_dtoa_r+0x788>
 8007ee0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ee2:	2900      	cmp	r1, #0
 8007ee4:	f000 80ac 	beq.w	8008040 <_dtoa_r+0x780>
 8007ee8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007eec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007ef0:	461c      	mov	r4, r3
 8007ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef4:	9b04      	ldr	r3, [sp, #16]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	9304      	str	r3, [sp, #16]
 8007efa:	9b05      	ldr	r3, [sp, #20]
 8007efc:	2101      	movs	r1, #1
 8007efe:	4413      	add	r3, r2
 8007f00:	4630      	mov	r0, r6
 8007f02:	9305      	str	r3, [sp, #20]
 8007f04:	f000 fc3e 	bl	8008784 <__i2b>
 8007f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f0a:	4607      	mov	r7, r0
 8007f0c:	f1b8 0f00 	cmp.w	r8, #0
 8007f10:	d00d      	beq.n	8007f2e <_dtoa_r+0x66e>
 8007f12:	9a05      	ldr	r2, [sp, #20]
 8007f14:	2a00      	cmp	r2, #0
 8007f16:	dd0a      	ble.n	8007f2e <_dtoa_r+0x66e>
 8007f18:	4542      	cmp	r2, r8
 8007f1a:	9904      	ldr	r1, [sp, #16]
 8007f1c:	bfa8      	it	ge
 8007f1e:	4642      	movge	r2, r8
 8007f20:	1a89      	subs	r1, r1, r2
 8007f22:	9104      	str	r1, [sp, #16]
 8007f24:	9905      	ldr	r1, [sp, #20]
 8007f26:	eba8 0802 	sub.w	r8, r8, r2
 8007f2a:	1a8a      	subs	r2, r1, r2
 8007f2c:	9205      	str	r2, [sp, #20]
 8007f2e:	b303      	cbz	r3, 8007f72 <_dtoa_r+0x6b2>
 8007f30:	9a07      	ldr	r2, [sp, #28]
 8007f32:	2a00      	cmp	r2, #0
 8007f34:	f000 80a5 	beq.w	8008082 <_dtoa_r+0x7c2>
 8007f38:	2c00      	cmp	r4, #0
 8007f3a:	dd13      	ble.n	8007f64 <_dtoa_r+0x6a4>
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	4622      	mov	r2, r4
 8007f40:	4630      	mov	r0, r6
 8007f42:	930d      	str	r3, [sp, #52]	; 0x34
 8007f44:	f000 fcde 	bl	8008904 <__pow5mult>
 8007f48:	462a      	mov	r2, r5
 8007f4a:	4601      	mov	r1, r0
 8007f4c:	4607      	mov	r7, r0
 8007f4e:	4630      	mov	r0, r6
 8007f50:	f000 fc2e 	bl	80087b0 <__multiply>
 8007f54:	4629      	mov	r1, r5
 8007f56:	9009      	str	r0, [sp, #36]	; 0x24
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f000 fb5d 	bl	8008618 <_Bfree>
 8007f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f62:	4615      	mov	r5, r2
 8007f64:	1b1a      	subs	r2, r3, r4
 8007f66:	d004      	beq.n	8007f72 <_dtoa_r+0x6b2>
 8007f68:	4629      	mov	r1, r5
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f000 fcca 	bl	8008904 <__pow5mult>
 8007f70:	4605      	mov	r5, r0
 8007f72:	2101      	movs	r1, #1
 8007f74:	4630      	mov	r0, r6
 8007f76:	f000 fc05 	bl	8008784 <__i2b>
 8007f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	4604      	mov	r4, r0
 8007f80:	f340 8081 	ble.w	8008086 <_dtoa_r+0x7c6>
 8007f84:	461a      	mov	r2, r3
 8007f86:	4601      	mov	r1, r0
 8007f88:	4630      	mov	r0, r6
 8007f8a:	f000 fcbb 	bl	8008904 <__pow5mult>
 8007f8e:	9b06      	ldr	r3, [sp, #24]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	4604      	mov	r4, r0
 8007f94:	dd7a      	ble.n	800808c <_dtoa_r+0x7cc>
 8007f96:	2300      	movs	r3, #0
 8007f98:	9309      	str	r3, [sp, #36]	; 0x24
 8007f9a:	6922      	ldr	r2, [r4, #16]
 8007f9c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007fa0:	6910      	ldr	r0, [r2, #16]
 8007fa2:	f000 fba1 	bl	80086e8 <__hi0bits>
 8007fa6:	f1c0 0020 	rsb	r0, r0, #32
 8007faa:	9b05      	ldr	r3, [sp, #20]
 8007fac:	4418      	add	r0, r3
 8007fae:	f010 001f 	ands.w	r0, r0, #31
 8007fb2:	f000 8093 	beq.w	80080dc <_dtoa_r+0x81c>
 8007fb6:	f1c0 0220 	rsb	r2, r0, #32
 8007fba:	2a04      	cmp	r2, #4
 8007fbc:	f340 8085 	ble.w	80080ca <_dtoa_r+0x80a>
 8007fc0:	9b04      	ldr	r3, [sp, #16]
 8007fc2:	f1c0 001c 	rsb	r0, r0, #28
 8007fc6:	4403      	add	r3, r0
 8007fc8:	9304      	str	r3, [sp, #16]
 8007fca:	9b05      	ldr	r3, [sp, #20]
 8007fcc:	4480      	add	r8, r0
 8007fce:	4403      	add	r3, r0
 8007fd0:	9305      	str	r3, [sp, #20]
 8007fd2:	9b04      	ldr	r3, [sp, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	dd05      	ble.n	8007fe4 <_dtoa_r+0x724>
 8007fd8:	4629      	mov	r1, r5
 8007fda:	461a      	mov	r2, r3
 8007fdc:	4630      	mov	r0, r6
 8007fde:	f000 fceb 	bl	80089b8 <__lshift>
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	9b05      	ldr	r3, [sp, #20]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	dd05      	ble.n	8007ff6 <_dtoa_r+0x736>
 8007fea:	4621      	mov	r1, r4
 8007fec:	461a      	mov	r2, r3
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f000 fce2 	bl	80089b8 <__lshift>
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d071      	beq.n	80080e0 <_dtoa_r+0x820>
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4628      	mov	r0, r5
 8008000:	f000 fd46 	bl	8008a90 <__mcmp>
 8008004:	2800      	cmp	r0, #0
 8008006:	da6b      	bge.n	80080e0 <_dtoa_r+0x820>
 8008008:	2300      	movs	r3, #0
 800800a:	4629      	mov	r1, r5
 800800c:	220a      	movs	r2, #10
 800800e:	4630      	mov	r0, r6
 8008010:	f000 fb24 	bl	800865c <__multadd>
 8008014:	9b07      	ldr	r3, [sp, #28]
 8008016:	f10b 3bff 	add.w	fp, fp, #4294967295
 800801a:	4605      	mov	r5, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 8197 	beq.w	8008350 <_dtoa_r+0xa90>
 8008022:	4639      	mov	r1, r7
 8008024:	2300      	movs	r3, #0
 8008026:	220a      	movs	r2, #10
 8008028:	4630      	mov	r0, r6
 800802a:	f000 fb17 	bl	800865c <__multadd>
 800802e:	f1ba 0f00 	cmp.w	sl, #0
 8008032:	4607      	mov	r7, r0
 8008034:	f300 8093 	bgt.w	800815e <_dtoa_r+0x89e>
 8008038:	9b06      	ldr	r3, [sp, #24]
 800803a:	2b02      	cmp	r3, #2
 800803c:	dc57      	bgt.n	80080ee <_dtoa_r+0x82e>
 800803e:	e08e      	b.n	800815e <_dtoa_r+0x89e>
 8008040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008042:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008046:	e751      	b.n	8007eec <_dtoa_r+0x62c>
 8008048:	f109 34ff 	add.w	r4, r9, #4294967295
 800804c:	42a3      	cmp	r3, r4
 800804e:	bfbf      	itttt	lt
 8008050:	1ae2      	sublt	r2, r4, r3
 8008052:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008054:	189b      	addlt	r3, r3, r2
 8008056:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008058:	bfae      	itee	ge
 800805a:	1b1c      	subge	r4, r3, r4
 800805c:	4623      	movlt	r3, r4
 800805e:	2400      	movlt	r4, #0
 8008060:	f1b9 0f00 	cmp.w	r9, #0
 8008064:	bfb5      	itete	lt
 8008066:	9a04      	ldrlt	r2, [sp, #16]
 8008068:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800806c:	eba2 0809 	sublt.w	r8, r2, r9
 8008070:	464a      	movge	r2, r9
 8008072:	bfb8      	it	lt
 8008074:	2200      	movlt	r2, #0
 8008076:	e73c      	b.n	8007ef2 <_dtoa_r+0x632>
 8008078:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800807c:	9f07      	ldr	r7, [sp, #28]
 800807e:	461c      	mov	r4, r3
 8008080:	e744      	b.n	8007f0c <_dtoa_r+0x64c>
 8008082:	461a      	mov	r2, r3
 8008084:	e770      	b.n	8007f68 <_dtoa_r+0x6a8>
 8008086:	9b06      	ldr	r3, [sp, #24]
 8008088:	2b01      	cmp	r3, #1
 800808a:	dc18      	bgt.n	80080be <_dtoa_r+0x7fe>
 800808c:	9b02      	ldr	r3, [sp, #8]
 800808e:	b9b3      	cbnz	r3, 80080be <_dtoa_r+0x7fe>
 8008090:	9b03      	ldr	r3, [sp, #12]
 8008092:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008096:	b9a2      	cbnz	r2, 80080c2 <_dtoa_r+0x802>
 8008098:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800809c:	0d12      	lsrs	r2, r2, #20
 800809e:	0512      	lsls	r2, r2, #20
 80080a0:	b18a      	cbz	r2, 80080c6 <_dtoa_r+0x806>
 80080a2:	9b04      	ldr	r3, [sp, #16]
 80080a4:	3301      	adds	r3, #1
 80080a6:	9304      	str	r3, [sp, #16]
 80080a8:	9b05      	ldr	r3, [sp, #20]
 80080aa:	3301      	adds	r3, #1
 80080ac:	9305      	str	r3, [sp, #20]
 80080ae:	2301      	movs	r3, #1
 80080b0:	9309      	str	r3, [sp, #36]	; 0x24
 80080b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f47f af70 	bne.w	8007f9a <_dtoa_r+0x6da>
 80080ba:	2001      	movs	r0, #1
 80080bc:	e775      	b.n	8007faa <_dtoa_r+0x6ea>
 80080be:	2300      	movs	r3, #0
 80080c0:	e7f6      	b.n	80080b0 <_dtoa_r+0x7f0>
 80080c2:	9b02      	ldr	r3, [sp, #8]
 80080c4:	e7f4      	b.n	80080b0 <_dtoa_r+0x7f0>
 80080c6:	9209      	str	r2, [sp, #36]	; 0x24
 80080c8:	e7f3      	b.n	80080b2 <_dtoa_r+0x7f2>
 80080ca:	d082      	beq.n	8007fd2 <_dtoa_r+0x712>
 80080cc:	9b04      	ldr	r3, [sp, #16]
 80080ce:	321c      	adds	r2, #28
 80080d0:	4413      	add	r3, r2
 80080d2:	9304      	str	r3, [sp, #16]
 80080d4:	9b05      	ldr	r3, [sp, #20]
 80080d6:	4490      	add	r8, r2
 80080d8:	4413      	add	r3, r2
 80080da:	e779      	b.n	8007fd0 <_dtoa_r+0x710>
 80080dc:	4602      	mov	r2, r0
 80080de:	e7f5      	b.n	80080cc <_dtoa_r+0x80c>
 80080e0:	f1b9 0f00 	cmp.w	r9, #0
 80080e4:	dc36      	bgt.n	8008154 <_dtoa_r+0x894>
 80080e6:	9b06      	ldr	r3, [sp, #24]
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	dd33      	ble.n	8008154 <_dtoa_r+0x894>
 80080ec:	46ca      	mov	sl, r9
 80080ee:	f1ba 0f00 	cmp.w	sl, #0
 80080f2:	d10d      	bne.n	8008110 <_dtoa_r+0x850>
 80080f4:	4621      	mov	r1, r4
 80080f6:	4653      	mov	r3, sl
 80080f8:	2205      	movs	r2, #5
 80080fa:	4630      	mov	r0, r6
 80080fc:	f000 faae 	bl	800865c <__multadd>
 8008100:	4601      	mov	r1, r0
 8008102:	4604      	mov	r4, r0
 8008104:	4628      	mov	r0, r5
 8008106:	f000 fcc3 	bl	8008a90 <__mcmp>
 800810a:	2800      	cmp	r0, #0
 800810c:	f73f ade4 	bgt.w	8007cd8 <_dtoa_r+0x418>
 8008110:	9b08      	ldr	r3, [sp, #32]
 8008112:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008116:	ea6f 0b03 	mvn.w	fp, r3
 800811a:	f04f 0900 	mov.w	r9, #0
 800811e:	4621      	mov	r1, r4
 8008120:	4630      	mov	r0, r6
 8008122:	f000 fa79 	bl	8008618 <_Bfree>
 8008126:	2f00      	cmp	r7, #0
 8008128:	f43f aea1 	beq.w	8007e6e <_dtoa_r+0x5ae>
 800812c:	f1b9 0f00 	cmp.w	r9, #0
 8008130:	d005      	beq.n	800813e <_dtoa_r+0x87e>
 8008132:	45b9      	cmp	r9, r7
 8008134:	d003      	beq.n	800813e <_dtoa_r+0x87e>
 8008136:	4649      	mov	r1, r9
 8008138:	4630      	mov	r0, r6
 800813a:	f000 fa6d 	bl	8008618 <_Bfree>
 800813e:	4639      	mov	r1, r7
 8008140:	4630      	mov	r0, r6
 8008142:	f000 fa69 	bl	8008618 <_Bfree>
 8008146:	e692      	b.n	8007e6e <_dtoa_r+0x5ae>
 8008148:	2400      	movs	r4, #0
 800814a:	4627      	mov	r7, r4
 800814c:	e7e0      	b.n	8008110 <_dtoa_r+0x850>
 800814e:	4693      	mov	fp, r2
 8008150:	4627      	mov	r7, r4
 8008152:	e5c1      	b.n	8007cd8 <_dtoa_r+0x418>
 8008154:	9b07      	ldr	r3, [sp, #28]
 8008156:	46ca      	mov	sl, r9
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 8100 	beq.w	800835e <_dtoa_r+0xa9e>
 800815e:	f1b8 0f00 	cmp.w	r8, #0
 8008162:	dd05      	ble.n	8008170 <_dtoa_r+0x8b0>
 8008164:	4639      	mov	r1, r7
 8008166:	4642      	mov	r2, r8
 8008168:	4630      	mov	r0, r6
 800816a:	f000 fc25 	bl	80089b8 <__lshift>
 800816e:	4607      	mov	r7, r0
 8008170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008172:	2b00      	cmp	r3, #0
 8008174:	d05d      	beq.n	8008232 <_dtoa_r+0x972>
 8008176:	6879      	ldr	r1, [r7, #4]
 8008178:	4630      	mov	r0, r6
 800817a:	f000 fa0d 	bl	8008598 <_Balloc>
 800817e:	4680      	mov	r8, r0
 8008180:	b928      	cbnz	r0, 800818e <_dtoa_r+0x8ce>
 8008182:	4b82      	ldr	r3, [pc, #520]	; (800838c <_dtoa_r+0xacc>)
 8008184:	4602      	mov	r2, r0
 8008186:	f240 21ef 	movw	r1, #751	; 0x2ef
 800818a:	f7ff bbb1 	b.w	80078f0 <_dtoa_r+0x30>
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	3202      	adds	r2, #2
 8008192:	0092      	lsls	r2, r2, #2
 8008194:	f107 010c 	add.w	r1, r7, #12
 8008198:	300c      	adds	r0, #12
 800819a:	f000 ffa9 	bl	80090f0 <memcpy>
 800819e:	2201      	movs	r2, #1
 80081a0:	4641      	mov	r1, r8
 80081a2:	4630      	mov	r0, r6
 80081a4:	f000 fc08 	bl	80089b8 <__lshift>
 80081a8:	9b01      	ldr	r3, [sp, #4]
 80081aa:	3301      	adds	r3, #1
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	9b01      	ldr	r3, [sp, #4]
 80081b0:	4453      	add	r3, sl
 80081b2:	9308      	str	r3, [sp, #32]
 80081b4:	9b02      	ldr	r3, [sp, #8]
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	46b9      	mov	r9, r7
 80081bc:	9307      	str	r3, [sp, #28]
 80081be:	4607      	mov	r7, r0
 80081c0:	9b04      	ldr	r3, [sp, #16]
 80081c2:	4621      	mov	r1, r4
 80081c4:	3b01      	subs	r3, #1
 80081c6:	4628      	mov	r0, r5
 80081c8:	9302      	str	r3, [sp, #8]
 80081ca:	f7ff faf1 	bl	80077b0 <quorem>
 80081ce:	4603      	mov	r3, r0
 80081d0:	3330      	adds	r3, #48	; 0x30
 80081d2:	9005      	str	r0, [sp, #20]
 80081d4:	4649      	mov	r1, r9
 80081d6:	4628      	mov	r0, r5
 80081d8:	9309      	str	r3, [sp, #36]	; 0x24
 80081da:	f000 fc59 	bl	8008a90 <__mcmp>
 80081de:	463a      	mov	r2, r7
 80081e0:	4682      	mov	sl, r0
 80081e2:	4621      	mov	r1, r4
 80081e4:	4630      	mov	r0, r6
 80081e6:	f000 fc6f 	bl	8008ac8 <__mdiff>
 80081ea:	68c2      	ldr	r2, [r0, #12]
 80081ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ee:	4680      	mov	r8, r0
 80081f0:	bb0a      	cbnz	r2, 8008236 <_dtoa_r+0x976>
 80081f2:	4601      	mov	r1, r0
 80081f4:	4628      	mov	r0, r5
 80081f6:	f000 fc4b 	bl	8008a90 <__mcmp>
 80081fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fc:	4602      	mov	r2, r0
 80081fe:	4641      	mov	r1, r8
 8008200:	4630      	mov	r0, r6
 8008202:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008206:	f000 fa07 	bl	8008618 <_Bfree>
 800820a:	9b06      	ldr	r3, [sp, #24]
 800820c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800820e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008212:	ea43 0102 	orr.w	r1, r3, r2
 8008216:	9b07      	ldr	r3, [sp, #28]
 8008218:	4319      	orrs	r1, r3
 800821a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800821c:	d10d      	bne.n	800823a <_dtoa_r+0x97a>
 800821e:	2b39      	cmp	r3, #57	; 0x39
 8008220:	d029      	beq.n	8008276 <_dtoa_r+0x9b6>
 8008222:	f1ba 0f00 	cmp.w	sl, #0
 8008226:	dd01      	ble.n	800822c <_dtoa_r+0x96c>
 8008228:	9b05      	ldr	r3, [sp, #20]
 800822a:	3331      	adds	r3, #49	; 0x31
 800822c:	9a02      	ldr	r2, [sp, #8]
 800822e:	7013      	strb	r3, [r2, #0]
 8008230:	e775      	b.n	800811e <_dtoa_r+0x85e>
 8008232:	4638      	mov	r0, r7
 8008234:	e7b8      	b.n	80081a8 <_dtoa_r+0x8e8>
 8008236:	2201      	movs	r2, #1
 8008238:	e7e1      	b.n	80081fe <_dtoa_r+0x93e>
 800823a:	f1ba 0f00 	cmp.w	sl, #0
 800823e:	db06      	blt.n	800824e <_dtoa_r+0x98e>
 8008240:	9906      	ldr	r1, [sp, #24]
 8008242:	ea41 0a0a 	orr.w	sl, r1, sl
 8008246:	9907      	ldr	r1, [sp, #28]
 8008248:	ea5a 0a01 	orrs.w	sl, sl, r1
 800824c:	d120      	bne.n	8008290 <_dtoa_r+0x9d0>
 800824e:	2a00      	cmp	r2, #0
 8008250:	ddec      	ble.n	800822c <_dtoa_r+0x96c>
 8008252:	4629      	mov	r1, r5
 8008254:	2201      	movs	r2, #1
 8008256:	4630      	mov	r0, r6
 8008258:	9304      	str	r3, [sp, #16]
 800825a:	f000 fbad 	bl	80089b8 <__lshift>
 800825e:	4621      	mov	r1, r4
 8008260:	4605      	mov	r5, r0
 8008262:	f000 fc15 	bl	8008a90 <__mcmp>
 8008266:	2800      	cmp	r0, #0
 8008268:	9b04      	ldr	r3, [sp, #16]
 800826a:	dc02      	bgt.n	8008272 <_dtoa_r+0x9b2>
 800826c:	d1de      	bne.n	800822c <_dtoa_r+0x96c>
 800826e:	07da      	lsls	r2, r3, #31
 8008270:	d5dc      	bpl.n	800822c <_dtoa_r+0x96c>
 8008272:	2b39      	cmp	r3, #57	; 0x39
 8008274:	d1d8      	bne.n	8008228 <_dtoa_r+0x968>
 8008276:	9a02      	ldr	r2, [sp, #8]
 8008278:	2339      	movs	r3, #57	; 0x39
 800827a:	7013      	strb	r3, [r2, #0]
 800827c:	4643      	mov	r3, r8
 800827e:	4698      	mov	r8, r3
 8008280:	3b01      	subs	r3, #1
 8008282:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008286:	2a39      	cmp	r2, #57	; 0x39
 8008288:	d051      	beq.n	800832e <_dtoa_r+0xa6e>
 800828a:	3201      	adds	r2, #1
 800828c:	701a      	strb	r2, [r3, #0]
 800828e:	e746      	b.n	800811e <_dtoa_r+0x85e>
 8008290:	2a00      	cmp	r2, #0
 8008292:	dd03      	ble.n	800829c <_dtoa_r+0x9dc>
 8008294:	2b39      	cmp	r3, #57	; 0x39
 8008296:	d0ee      	beq.n	8008276 <_dtoa_r+0x9b6>
 8008298:	3301      	adds	r3, #1
 800829a:	e7c7      	b.n	800822c <_dtoa_r+0x96c>
 800829c:	9a04      	ldr	r2, [sp, #16]
 800829e:	9908      	ldr	r1, [sp, #32]
 80082a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80082a4:	428a      	cmp	r2, r1
 80082a6:	d02b      	beq.n	8008300 <_dtoa_r+0xa40>
 80082a8:	4629      	mov	r1, r5
 80082aa:	2300      	movs	r3, #0
 80082ac:	220a      	movs	r2, #10
 80082ae:	4630      	mov	r0, r6
 80082b0:	f000 f9d4 	bl	800865c <__multadd>
 80082b4:	45b9      	cmp	r9, r7
 80082b6:	4605      	mov	r5, r0
 80082b8:	f04f 0300 	mov.w	r3, #0
 80082bc:	f04f 020a 	mov.w	r2, #10
 80082c0:	4649      	mov	r1, r9
 80082c2:	4630      	mov	r0, r6
 80082c4:	d107      	bne.n	80082d6 <_dtoa_r+0xa16>
 80082c6:	f000 f9c9 	bl	800865c <__multadd>
 80082ca:	4681      	mov	r9, r0
 80082cc:	4607      	mov	r7, r0
 80082ce:	9b04      	ldr	r3, [sp, #16]
 80082d0:	3301      	adds	r3, #1
 80082d2:	9304      	str	r3, [sp, #16]
 80082d4:	e774      	b.n	80081c0 <_dtoa_r+0x900>
 80082d6:	f000 f9c1 	bl	800865c <__multadd>
 80082da:	4639      	mov	r1, r7
 80082dc:	4681      	mov	r9, r0
 80082de:	2300      	movs	r3, #0
 80082e0:	220a      	movs	r2, #10
 80082e2:	4630      	mov	r0, r6
 80082e4:	f000 f9ba 	bl	800865c <__multadd>
 80082e8:	4607      	mov	r7, r0
 80082ea:	e7f0      	b.n	80082ce <_dtoa_r+0xa0e>
 80082ec:	f1ba 0f00 	cmp.w	sl, #0
 80082f0:	9a01      	ldr	r2, [sp, #4]
 80082f2:	bfcc      	ite	gt
 80082f4:	46d0      	movgt	r8, sl
 80082f6:	f04f 0801 	movle.w	r8, #1
 80082fa:	4490      	add	r8, r2
 80082fc:	f04f 0900 	mov.w	r9, #0
 8008300:	4629      	mov	r1, r5
 8008302:	2201      	movs	r2, #1
 8008304:	4630      	mov	r0, r6
 8008306:	9302      	str	r3, [sp, #8]
 8008308:	f000 fb56 	bl	80089b8 <__lshift>
 800830c:	4621      	mov	r1, r4
 800830e:	4605      	mov	r5, r0
 8008310:	f000 fbbe 	bl	8008a90 <__mcmp>
 8008314:	2800      	cmp	r0, #0
 8008316:	dcb1      	bgt.n	800827c <_dtoa_r+0x9bc>
 8008318:	d102      	bne.n	8008320 <_dtoa_r+0xa60>
 800831a:	9b02      	ldr	r3, [sp, #8]
 800831c:	07db      	lsls	r3, r3, #31
 800831e:	d4ad      	bmi.n	800827c <_dtoa_r+0x9bc>
 8008320:	4643      	mov	r3, r8
 8008322:	4698      	mov	r8, r3
 8008324:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008328:	2a30      	cmp	r2, #48	; 0x30
 800832a:	d0fa      	beq.n	8008322 <_dtoa_r+0xa62>
 800832c:	e6f7      	b.n	800811e <_dtoa_r+0x85e>
 800832e:	9a01      	ldr	r2, [sp, #4]
 8008330:	429a      	cmp	r2, r3
 8008332:	d1a4      	bne.n	800827e <_dtoa_r+0x9be>
 8008334:	f10b 0b01 	add.w	fp, fp, #1
 8008338:	2331      	movs	r3, #49	; 0x31
 800833a:	e778      	b.n	800822e <_dtoa_r+0x96e>
 800833c:	4b14      	ldr	r3, [pc, #80]	; (8008390 <_dtoa_r+0xad0>)
 800833e:	f7ff bb2a 	b.w	8007996 <_dtoa_r+0xd6>
 8008342:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008344:	2b00      	cmp	r3, #0
 8008346:	f47f ab05 	bne.w	8007954 <_dtoa_r+0x94>
 800834a:	4b12      	ldr	r3, [pc, #72]	; (8008394 <_dtoa_r+0xad4>)
 800834c:	f7ff bb23 	b.w	8007996 <_dtoa_r+0xd6>
 8008350:	f1ba 0f00 	cmp.w	sl, #0
 8008354:	dc03      	bgt.n	800835e <_dtoa_r+0xa9e>
 8008356:	9b06      	ldr	r3, [sp, #24]
 8008358:	2b02      	cmp	r3, #2
 800835a:	f73f aec8 	bgt.w	80080ee <_dtoa_r+0x82e>
 800835e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008362:	4621      	mov	r1, r4
 8008364:	4628      	mov	r0, r5
 8008366:	f7ff fa23 	bl	80077b0 <quorem>
 800836a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800836e:	f808 3b01 	strb.w	r3, [r8], #1
 8008372:	9a01      	ldr	r2, [sp, #4]
 8008374:	eba8 0202 	sub.w	r2, r8, r2
 8008378:	4592      	cmp	sl, r2
 800837a:	ddb7      	ble.n	80082ec <_dtoa_r+0xa2c>
 800837c:	4629      	mov	r1, r5
 800837e:	2300      	movs	r3, #0
 8008380:	220a      	movs	r2, #10
 8008382:	4630      	mov	r0, r6
 8008384:	f000 f96a 	bl	800865c <__multadd>
 8008388:	4605      	mov	r5, r0
 800838a:	e7ea      	b.n	8008362 <_dtoa_r+0xaa2>
 800838c:	08009ba0 	.word	0x08009ba0
 8008390:	08009b00 	.word	0x08009b00
 8008394:	08009b24 	.word	0x08009b24

08008398 <_free_r>:
 8008398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800839a:	2900      	cmp	r1, #0
 800839c:	d044      	beq.n	8008428 <_free_r+0x90>
 800839e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083a2:	9001      	str	r0, [sp, #4]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f1a1 0404 	sub.w	r4, r1, #4
 80083aa:	bfb8      	it	lt
 80083ac:	18e4      	addlt	r4, r4, r3
 80083ae:	f000 f8e7 	bl	8008580 <__malloc_lock>
 80083b2:	4a1e      	ldr	r2, [pc, #120]	; (800842c <_free_r+0x94>)
 80083b4:	9801      	ldr	r0, [sp, #4]
 80083b6:	6813      	ldr	r3, [r2, #0]
 80083b8:	b933      	cbnz	r3, 80083c8 <_free_r+0x30>
 80083ba:	6063      	str	r3, [r4, #4]
 80083bc:	6014      	str	r4, [r2, #0]
 80083be:	b003      	add	sp, #12
 80083c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083c4:	f000 b8e2 	b.w	800858c <__malloc_unlock>
 80083c8:	42a3      	cmp	r3, r4
 80083ca:	d908      	bls.n	80083de <_free_r+0x46>
 80083cc:	6825      	ldr	r5, [r4, #0]
 80083ce:	1961      	adds	r1, r4, r5
 80083d0:	428b      	cmp	r3, r1
 80083d2:	bf01      	itttt	eq
 80083d4:	6819      	ldreq	r1, [r3, #0]
 80083d6:	685b      	ldreq	r3, [r3, #4]
 80083d8:	1949      	addeq	r1, r1, r5
 80083da:	6021      	streq	r1, [r4, #0]
 80083dc:	e7ed      	b.n	80083ba <_free_r+0x22>
 80083de:	461a      	mov	r2, r3
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	b10b      	cbz	r3, 80083e8 <_free_r+0x50>
 80083e4:	42a3      	cmp	r3, r4
 80083e6:	d9fa      	bls.n	80083de <_free_r+0x46>
 80083e8:	6811      	ldr	r1, [r2, #0]
 80083ea:	1855      	adds	r5, r2, r1
 80083ec:	42a5      	cmp	r5, r4
 80083ee:	d10b      	bne.n	8008408 <_free_r+0x70>
 80083f0:	6824      	ldr	r4, [r4, #0]
 80083f2:	4421      	add	r1, r4
 80083f4:	1854      	adds	r4, r2, r1
 80083f6:	42a3      	cmp	r3, r4
 80083f8:	6011      	str	r1, [r2, #0]
 80083fa:	d1e0      	bne.n	80083be <_free_r+0x26>
 80083fc:	681c      	ldr	r4, [r3, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	6053      	str	r3, [r2, #4]
 8008402:	440c      	add	r4, r1
 8008404:	6014      	str	r4, [r2, #0]
 8008406:	e7da      	b.n	80083be <_free_r+0x26>
 8008408:	d902      	bls.n	8008410 <_free_r+0x78>
 800840a:	230c      	movs	r3, #12
 800840c:	6003      	str	r3, [r0, #0]
 800840e:	e7d6      	b.n	80083be <_free_r+0x26>
 8008410:	6825      	ldr	r5, [r4, #0]
 8008412:	1961      	adds	r1, r4, r5
 8008414:	428b      	cmp	r3, r1
 8008416:	bf04      	itt	eq
 8008418:	6819      	ldreq	r1, [r3, #0]
 800841a:	685b      	ldreq	r3, [r3, #4]
 800841c:	6063      	str	r3, [r4, #4]
 800841e:	bf04      	itt	eq
 8008420:	1949      	addeq	r1, r1, r5
 8008422:	6021      	streq	r1, [r4, #0]
 8008424:	6054      	str	r4, [r2, #4]
 8008426:	e7ca      	b.n	80083be <_free_r+0x26>
 8008428:	b003      	add	sp, #12
 800842a:	bd30      	pop	{r4, r5, pc}
 800842c:	200006d4 	.word	0x200006d4

08008430 <malloc>:
 8008430:	4b02      	ldr	r3, [pc, #8]	; (800843c <malloc+0xc>)
 8008432:	4601      	mov	r1, r0
 8008434:	6818      	ldr	r0, [r3, #0]
 8008436:	f000 b823 	b.w	8008480 <_malloc_r>
 800843a:	bf00      	nop
 800843c:	200000bc 	.word	0x200000bc

08008440 <sbrk_aligned>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	4e0e      	ldr	r6, [pc, #56]	; (800847c <sbrk_aligned+0x3c>)
 8008444:	460c      	mov	r4, r1
 8008446:	6831      	ldr	r1, [r6, #0]
 8008448:	4605      	mov	r5, r0
 800844a:	b911      	cbnz	r1, 8008452 <sbrk_aligned+0x12>
 800844c:	f000 fe40 	bl	80090d0 <_sbrk_r>
 8008450:	6030      	str	r0, [r6, #0]
 8008452:	4621      	mov	r1, r4
 8008454:	4628      	mov	r0, r5
 8008456:	f000 fe3b 	bl	80090d0 <_sbrk_r>
 800845a:	1c43      	adds	r3, r0, #1
 800845c:	d00a      	beq.n	8008474 <sbrk_aligned+0x34>
 800845e:	1cc4      	adds	r4, r0, #3
 8008460:	f024 0403 	bic.w	r4, r4, #3
 8008464:	42a0      	cmp	r0, r4
 8008466:	d007      	beq.n	8008478 <sbrk_aligned+0x38>
 8008468:	1a21      	subs	r1, r4, r0
 800846a:	4628      	mov	r0, r5
 800846c:	f000 fe30 	bl	80090d0 <_sbrk_r>
 8008470:	3001      	adds	r0, #1
 8008472:	d101      	bne.n	8008478 <sbrk_aligned+0x38>
 8008474:	f04f 34ff 	mov.w	r4, #4294967295
 8008478:	4620      	mov	r0, r4
 800847a:	bd70      	pop	{r4, r5, r6, pc}
 800847c:	200006d8 	.word	0x200006d8

08008480 <_malloc_r>:
 8008480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008484:	1ccd      	adds	r5, r1, #3
 8008486:	f025 0503 	bic.w	r5, r5, #3
 800848a:	3508      	adds	r5, #8
 800848c:	2d0c      	cmp	r5, #12
 800848e:	bf38      	it	cc
 8008490:	250c      	movcc	r5, #12
 8008492:	2d00      	cmp	r5, #0
 8008494:	4607      	mov	r7, r0
 8008496:	db01      	blt.n	800849c <_malloc_r+0x1c>
 8008498:	42a9      	cmp	r1, r5
 800849a:	d905      	bls.n	80084a8 <_malloc_r+0x28>
 800849c:	230c      	movs	r3, #12
 800849e:	603b      	str	r3, [r7, #0]
 80084a0:	2600      	movs	r6, #0
 80084a2:	4630      	mov	r0, r6
 80084a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800857c <_malloc_r+0xfc>
 80084ac:	f000 f868 	bl	8008580 <__malloc_lock>
 80084b0:	f8d8 3000 	ldr.w	r3, [r8]
 80084b4:	461c      	mov	r4, r3
 80084b6:	bb5c      	cbnz	r4, 8008510 <_malloc_r+0x90>
 80084b8:	4629      	mov	r1, r5
 80084ba:	4638      	mov	r0, r7
 80084bc:	f7ff ffc0 	bl	8008440 <sbrk_aligned>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	4604      	mov	r4, r0
 80084c4:	d155      	bne.n	8008572 <_malloc_r+0xf2>
 80084c6:	f8d8 4000 	ldr.w	r4, [r8]
 80084ca:	4626      	mov	r6, r4
 80084cc:	2e00      	cmp	r6, #0
 80084ce:	d145      	bne.n	800855c <_malloc_r+0xdc>
 80084d0:	2c00      	cmp	r4, #0
 80084d2:	d048      	beq.n	8008566 <_malloc_r+0xe6>
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	4631      	mov	r1, r6
 80084d8:	4638      	mov	r0, r7
 80084da:	eb04 0903 	add.w	r9, r4, r3
 80084de:	f000 fdf7 	bl	80090d0 <_sbrk_r>
 80084e2:	4581      	cmp	r9, r0
 80084e4:	d13f      	bne.n	8008566 <_malloc_r+0xe6>
 80084e6:	6821      	ldr	r1, [r4, #0]
 80084e8:	1a6d      	subs	r5, r5, r1
 80084ea:	4629      	mov	r1, r5
 80084ec:	4638      	mov	r0, r7
 80084ee:	f7ff ffa7 	bl	8008440 <sbrk_aligned>
 80084f2:	3001      	adds	r0, #1
 80084f4:	d037      	beq.n	8008566 <_malloc_r+0xe6>
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	442b      	add	r3, r5
 80084fa:	6023      	str	r3, [r4, #0]
 80084fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d038      	beq.n	8008576 <_malloc_r+0xf6>
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	42a2      	cmp	r2, r4
 8008508:	d12b      	bne.n	8008562 <_malloc_r+0xe2>
 800850a:	2200      	movs	r2, #0
 800850c:	605a      	str	r2, [r3, #4]
 800850e:	e00f      	b.n	8008530 <_malloc_r+0xb0>
 8008510:	6822      	ldr	r2, [r4, #0]
 8008512:	1b52      	subs	r2, r2, r5
 8008514:	d41f      	bmi.n	8008556 <_malloc_r+0xd6>
 8008516:	2a0b      	cmp	r2, #11
 8008518:	d917      	bls.n	800854a <_malloc_r+0xca>
 800851a:	1961      	adds	r1, r4, r5
 800851c:	42a3      	cmp	r3, r4
 800851e:	6025      	str	r5, [r4, #0]
 8008520:	bf18      	it	ne
 8008522:	6059      	strne	r1, [r3, #4]
 8008524:	6863      	ldr	r3, [r4, #4]
 8008526:	bf08      	it	eq
 8008528:	f8c8 1000 	streq.w	r1, [r8]
 800852c:	5162      	str	r2, [r4, r5]
 800852e:	604b      	str	r3, [r1, #4]
 8008530:	4638      	mov	r0, r7
 8008532:	f104 060b 	add.w	r6, r4, #11
 8008536:	f000 f829 	bl	800858c <__malloc_unlock>
 800853a:	f026 0607 	bic.w	r6, r6, #7
 800853e:	1d23      	adds	r3, r4, #4
 8008540:	1af2      	subs	r2, r6, r3
 8008542:	d0ae      	beq.n	80084a2 <_malloc_r+0x22>
 8008544:	1b9b      	subs	r3, r3, r6
 8008546:	50a3      	str	r3, [r4, r2]
 8008548:	e7ab      	b.n	80084a2 <_malloc_r+0x22>
 800854a:	42a3      	cmp	r3, r4
 800854c:	6862      	ldr	r2, [r4, #4]
 800854e:	d1dd      	bne.n	800850c <_malloc_r+0x8c>
 8008550:	f8c8 2000 	str.w	r2, [r8]
 8008554:	e7ec      	b.n	8008530 <_malloc_r+0xb0>
 8008556:	4623      	mov	r3, r4
 8008558:	6864      	ldr	r4, [r4, #4]
 800855a:	e7ac      	b.n	80084b6 <_malloc_r+0x36>
 800855c:	4634      	mov	r4, r6
 800855e:	6876      	ldr	r6, [r6, #4]
 8008560:	e7b4      	b.n	80084cc <_malloc_r+0x4c>
 8008562:	4613      	mov	r3, r2
 8008564:	e7cc      	b.n	8008500 <_malloc_r+0x80>
 8008566:	230c      	movs	r3, #12
 8008568:	603b      	str	r3, [r7, #0]
 800856a:	4638      	mov	r0, r7
 800856c:	f000 f80e 	bl	800858c <__malloc_unlock>
 8008570:	e797      	b.n	80084a2 <_malloc_r+0x22>
 8008572:	6025      	str	r5, [r4, #0]
 8008574:	e7dc      	b.n	8008530 <_malloc_r+0xb0>
 8008576:	605b      	str	r3, [r3, #4]
 8008578:	deff      	udf	#255	; 0xff
 800857a:	bf00      	nop
 800857c:	200006d4 	.word	0x200006d4

08008580 <__malloc_lock>:
 8008580:	4801      	ldr	r0, [pc, #4]	; (8008588 <__malloc_lock+0x8>)
 8008582:	f7ff b913 	b.w	80077ac <__retarget_lock_acquire_recursive>
 8008586:	bf00      	nop
 8008588:	200006d0 	.word	0x200006d0

0800858c <__malloc_unlock>:
 800858c:	4801      	ldr	r0, [pc, #4]	; (8008594 <__malloc_unlock+0x8>)
 800858e:	f7ff b90e 	b.w	80077ae <__retarget_lock_release_recursive>
 8008592:	bf00      	nop
 8008594:	200006d0 	.word	0x200006d0

08008598 <_Balloc>:
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	69c6      	ldr	r6, [r0, #28]
 800859c:	4604      	mov	r4, r0
 800859e:	460d      	mov	r5, r1
 80085a0:	b976      	cbnz	r6, 80085c0 <_Balloc+0x28>
 80085a2:	2010      	movs	r0, #16
 80085a4:	f7ff ff44 	bl	8008430 <malloc>
 80085a8:	4602      	mov	r2, r0
 80085aa:	61e0      	str	r0, [r4, #28]
 80085ac:	b920      	cbnz	r0, 80085b8 <_Balloc+0x20>
 80085ae:	4b18      	ldr	r3, [pc, #96]	; (8008610 <_Balloc+0x78>)
 80085b0:	4818      	ldr	r0, [pc, #96]	; (8008614 <_Balloc+0x7c>)
 80085b2:	216b      	movs	r1, #107	; 0x6b
 80085b4:	f000 fdaa 	bl	800910c <__assert_func>
 80085b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085bc:	6006      	str	r6, [r0, #0]
 80085be:	60c6      	str	r6, [r0, #12]
 80085c0:	69e6      	ldr	r6, [r4, #28]
 80085c2:	68f3      	ldr	r3, [r6, #12]
 80085c4:	b183      	cbz	r3, 80085e8 <_Balloc+0x50>
 80085c6:	69e3      	ldr	r3, [r4, #28]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085ce:	b9b8      	cbnz	r0, 8008600 <_Balloc+0x68>
 80085d0:	2101      	movs	r1, #1
 80085d2:	fa01 f605 	lsl.w	r6, r1, r5
 80085d6:	1d72      	adds	r2, r6, #5
 80085d8:	0092      	lsls	r2, r2, #2
 80085da:	4620      	mov	r0, r4
 80085dc:	f000 fdb4 	bl	8009148 <_calloc_r>
 80085e0:	b160      	cbz	r0, 80085fc <_Balloc+0x64>
 80085e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085e6:	e00e      	b.n	8008606 <_Balloc+0x6e>
 80085e8:	2221      	movs	r2, #33	; 0x21
 80085ea:	2104      	movs	r1, #4
 80085ec:	4620      	mov	r0, r4
 80085ee:	f000 fdab 	bl	8009148 <_calloc_r>
 80085f2:	69e3      	ldr	r3, [r4, #28]
 80085f4:	60f0      	str	r0, [r6, #12]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e4      	bne.n	80085c6 <_Balloc+0x2e>
 80085fc:	2000      	movs	r0, #0
 80085fe:	bd70      	pop	{r4, r5, r6, pc}
 8008600:	6802      	ldr	r2, [r0, #0]
 8008602:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008606:	2300      	movs	r3, #0
 8008608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800860c:	e7f7      	b.n	80085fe <_Balloc+0x66>
 800860e:	bf00      	nop
 8008610:	08009b31 	.word	0x08009b31
 8008614:	08009bb1 	.word	0x08009bb1

08008618 <_Bfree>:
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	69c6      	ldr	r6, [r0, #28]
 800861c:	4605      	mov	r5, r0
 800861e:	460c      	mov	r4, r1
 8008620:	b976      	cbnz	r6, 8008640 <_Bfree+0x28>
 8008622:	2010      	movs	r0, #16
 8008624:	f7ff ff04 	bl	8008430 <malloc>
 8008628:	4602      	mov	r2, r0
 800862a:	61e8      	str	r0, [r5, #28]
 800862c:	b920      	cbnz	r0, 8008638 <_Bfree+0x20>
 800862e:	4b09      	ldr	r3, [pc, #36]	; (8008654 <_Bfree+0x3c>)
 8008630:	4809      	ldr	r0, [pc, #36]	; (8008658 <_Bfree+0x40>)
 8008632:	218f      	movs	r1, #143	; 0x8f
 8008634:	f000 fd6a 	bl	800910c <__assert_func>
 8008638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800863c:	6006      	str	r6, [r0, #0]
 800863e:	60c6      	str	r6, [r0, #12]
 8008640:	b13c      	cbz	r4, 8008652 <_Bfree+0x3a>
 8008642:	69eb      	ldr	r3, [r5, #28]
 8008644:	6862      	ldr	r2, [r4, #4]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800864c:	6021      	str	r1, [r4, #0]
 800864e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008652:	bd70      	pop	{r4, r5, r6, pc}
 8008654:	08009b31 	.word	0x08009b31
 8008658:	08009bb1 	.word	0x08009bb1

0800865c <__multadd>:
 800865c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008660:	690d      	ldr	r5, [r1, #16]
 8008662:	4607      	mov	r7, r0
 8008664:	460c      	mov	r4, r1
 8008666:	461e      	mov	r6, r3
 8008668:	f101 0c14 	add.w	ip, r1, #20
 800866c:	2000      	movs	r0, #0
 800866e:	f8dc 3000 	ldr.w	r3, [ip]
 8008672:	b299      	uxth	r1, r3
 8008674:	fb02 6101 	mla	r1, r2, r1, r6
 8008678:	0c1e      	lsrs	r6, r3, #16
 800867a:	0c0b      	lsrs	r3, r1, #16
 800867c:	fb02 3306 	mla	r3, r2, r6, r3
 8008680:	b289      	uxth	r1, r1
 8008682:	3001      	adds	r0, #1
 8008684:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008688:	4285      	cmp	r5, r0
 800868a:	f84c 1b04 	str.w	r1, [ip], #4
 800868e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008692:	dcec      	bgt.n	800866e <__multadd+0x12>
 8008694:	b30e      	cbz	r6, 80086da <__multadd+0x7e>
 8008696:	68a3      	ldr	r3, [r4, #8]
 8008698:	42ab      	cmp	r3, r5
 800869a:	dc19      	bgt.n	80086d0 <__multadd+0x74>
 800869c:	6861      	ldr	r1, [r4, #4]
 800869e:	4638      	mov	r0, r7
 80086a0:	3101      	adds	r1, #1
 80086a2:	f7ff ff79 	bl	8008598 <_Balloc>
 80086a6:	4680      	mov	r8, r0
 80086a8:	b928      	cbnz	r0, 80086b6 <__multadd+0x5a>
 80086aa:	4602      	mov	r2, r0
 80086ac:	4b0c      	ldr	r3, [pc, #48]	; (80086e0 <__multadd+0x84>)
 80086ae:	480d      	ldr	r0, [pc, #52]	; (80086e4 <__multadd+0x88>)
 80086b0:	21ba      	movs	r1, #186	; 0xba
 80086b2:	f000 fd2b 	bl	800910c <__assert_func>
 80086b6:	6922      	ldr	r2, [r4, #16]
 80086b8:	3202      	adds	r2, #2
 80086ba:	f104 010c 	add.w	r1, r4, #12
 80086be:	0092      	lsls	r2, r2, #2
 80086c0:	300c      	adds	r0, #12
 80086c2:	f000 fd15 	bl	80090f0 <memcpy>
 80086c6:	4621      	mov	r1, r4
 80086c8:	4638      	mov	r0, r7
 80086ca:	f7ff ffa5 	bl	8008618 <_Bfree>
 80086ce:	4644      	mov	r4, r8
 80086d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086d4:	3501      	adds	r5, #1
 80086d6:	615e      	str	r6, [r3, #20]
 80086d8:	6125      	str	r5, [r4, #16]
 80086da:	4620      	mov	r0, r4
 80086dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086e0:	08009ba0 	.word	0x08009ba0
 80086e4:	08009bb1 	.word	0x08009bb1

080086e8 <__hi0bits>:
 80086e8:	0c03      	lsrs	r3, r0, #16
 80086ea:	041b      	lsls	r3, r3, #16
 80086ec:	b9d3      	cbnz	r3, 8008724 <__hi0bits+0x3c>
 80086ee:	0400      	lsls	r0, r0, #16
 80086f0:	2310      	movs	r3, #16
 80086f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086f6:	bf04      	itt	eq
 80086f8:	0200      	lsleq	r0, r0, #8
 80086fa:	3308      	addeq	r3, #8
 80086fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008700:	bf04      	itt	eq
 8008702:	0100      	lsleq	r0, r0, #4
 8008704:	3304      	addeq	r3, #4
 8008706:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800870a:	bf04      	itt	eq
 800870c:	0080      	lsleq	r0, r0, #2
 800870e:	3302      	addeq	r3, #2
 8008710:	2800      	cmp	r0, #0
 8008712:	db05      	blt.n	8008720 <__hi0bits+0x38>
 8008714:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008718:	f103 0301 	add.w	r3, r3, #1
 800871c:	bf08      	it	eq
 800871e:	2320      	moveq	r3, #32
 8008720:	4618      	mov	r0, r3
 8008722:	4770      	bx	lr
 8008724:	2300      	movs	r3, #0
 8008726:	e7e4      	b.n	80086f2 <__hi0bits+0xa>

08008728 <__lo0bits>:
 8008728:	6803      	ldr	r3, [r0, #0]
 800872a:	f013 0207 	ands.w	r2, r3, #7
 800872e:	d00c      	beq.n	800874a <__lo0bits+0x22>
 8008730:	07d9      	lsls	r1, r3, #31
 8008732:	d422      	bmi.n	800877a <__lo0bits+0x52>
 8008734:	079a      	lsls	r2, r3, #30
 8008736:	bf49      	itett	mi
 8008738:	085b      	lsrmi	r3, r3, #1
 800873a:	089b      	lsrpl	r3, r3, #2
 800873c:	6003      	strmi	r3, [r0, #0]
 800873e:	2201      	movmi	r2, #1
 8008740:	bf5c      	itt	pl
 8008742:	6003      	strpl	r3, [r0, #0]
 8008744:	2202      	movpl	r2, #2
 8008746:	4610      	mov	r0, r2
 8008748:	4770      	bx	lr
 800874a:	b299      	uxth	r1, r3
 800874c:	b909      	cbnz	r1, 8008752 <__lo0bits+0x2a>
 800874e:	0c1b      	lsrs	r3, r3, #16
 8008750:	2210      	movs	r2, #16
 8008752:	b2d9      	uxtb	r1, r3
 8008754:	b909      	cbnz	r1, 800875a <__lo0bits+0x32>
 8008756:	3208      	adds	r2, #8
 8008758:	0a1b      	lsrs	r3, r3, #8
 800875a:	0719      	lsls	r1, r3, #28
 800875c:	bf04      	itt	eq
 800875e:	091b      	lsreq	r3, r3, #4
 8008760:	3204      	addeq	r2, #4
 8008762:	0799      	lsls	r1, r3, #30
 8008764:	bf04      	itt	eq
 8008766:	089b      	lsreq	r3, r3, #2
 8008768:	3202      	addeq	r2, #2
 800876a:	07d9      	lsls	r1, r3, #31
 800876c:	d403      	bmi.n	8008776 <__lo0bits+0x4e>
 800876e:	085b      	lsrs	r3, r3, #1
 8008770:	f102 0201 	add.w	r2, r2, #1
 8008774:	d003      	beq.n	800877e <__lo0bits+0x56>
 8008776:	6003      	str	r3, [r0, #0]
 8008778:	e7e5      	b.n	8008746 <__lo0bits+0x1e>
 800877a:	2200      	movs	r2, #0
 800877c:	e7e3      	b.n	8008746 <__lo0bits+0x1e>
 800877e:	2220      	movs	r2, #32
 8008780:	e7e1      	b.n	8008746 <__lo0bits+0x1e>
	...

08008784 <__i2b>:
 8008784:	b510      	push	{r4, lr}
 8008786:	460c      	mov	r4, r1
 8008788:	2101      	movs	r1, #1
 800878a:	f7ff ff05 	bl	8008598 <_Balloc>
 800878e:	4602      	mov	r2, r0
 8008790:	b928      	cbnz	r0, 800879e <__i2b+0x1a>
 8008792:	4b05      	ldr	r3, [pc, #20]	; (80087a8 <__i2b+0x24>)
 8008794:	4805      	ldr	r0, [pc, #20]	; (80087ac <__i2b+0x28>)
 8008796:	f240 1145 	movw	r1, #325	; 0x145
 800879a:	f000 fcb7 	bl	800910c <__assert_func>
 800879e:	2301      	movs	r3, #1
 80087a0:	6144      	str	r4, [r0, #20]
 80087a2:	6103      	str	r3, [r0, #16]
 80087a4:	bd10      	pop	{r4, pc}
 80087a6:	bf00      	nop
 80087a8:	08009ba0 	.word	0x08009ba0
 80087ac:	08009bb1 	.word	0x08009bb1

080087b0 <__multiply>:
 80087b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b4:	4691      	mov	r9, r2
 80087b6:	690a      	ldr	r2, [r1, #16]
 80087b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087bc:	429a      	cmp	r2, r3
 80087be:	bfb8      	it	lt
 80087c0:	460b      	movlt	r3, r1
 80087c2:	460c      	mov	r4, r1
 80087c4:	bfbc      	itt	lt
 80087c6:	464c      	movlt	r4, r9
 80087c8:	4699      	movlt	r9, r3
 80087ca:	6927      	ldr	r7, [r4, #16]
 80087cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80087d0:	68a3      	ldr	r3, [r4, #8]
 80087d2:	6861      	ldr	r1, [r4, #4]
 80087d4:	eb07 060a 	add.w	r6, r7, sl
 80087d8:	42b3      	cmp	r3, r6
 80087da:	b085      	sub	sp, #20
 80087dc:	bfb8      	it	lt
 80087de:	3101      	addlt	r1, #1
 80087e0:	f7ff feda 	bl	8008598 <_Balloc>
 80087e4:	b930      	cbnz	r0, 80087f4 <__multiply+0x44>
 80087e6:	4602      	mov	r2, r0
 80087e8:	4b44      	ldr	r3, [pc, #272]	; (80088fc <__multiply+0x14c>)
 80087ea:	4845      	ldr	r0, [pc, #276]	; (8008900 <__multiply+0x150>)
 80087ec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80087f0:	f000 fc8c 	bl	800910c <__assert_func>
 80087f4:	f100 0514 	add.w	r5, r0, #20
 80087f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087fc:	462b      	mov	r3, r5
 80087fe:	2200      	movs	r2, #0
 8008800:	4543      	cmp	r3, r8
 8008802:	d321      	bcc.n	8008848 <__multiply+0x98>
 8008804:	f104 0314 	add.w	r3, r4, #20
 8008808:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800880c:	f109 0314 	add.w	r3, r9, #20
 8008810:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008814:	9202      	str	r2, [sp, #8]
 8008816:	1b3a      	subs	r2, r7, r4
 8008818:	3a15      	subs	r2, #21
 800881a:	f022 0203 	bic.w	r2, r2, #3
 800881e:	3204      	adds	r2, #4
 8008820:	f104 0115 	add.w	r1, r4, #21
 8008824:	428f      	cmp	r7, r1
 8008826:	bf38      	it	cc
 8008828:	2204      	movcc	r2, #4
 800882a:	9201      	str	r2, [sp, #4]
 800882c:	9a02      	ldr	r2, [sp, #8]
 800882e:	9303      	str	r3, [sp, #12]
 8008830:	429a      	cmp	r2, r3
 8008832:	d80c      	bhi.n	800884e <__multiply+0x9e>
 8008834:	2e00      	cmp	r6, #0
 8008836:	dd03      	ble.n	8008840 <__multiply+0x90>
 8008838:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800883c:	2b00      	cmp	r3, #0
 800883e:	d05b      	beq.n	80088f8 <__multiply+0x148>
 8008840:	6106      	str	r6, [r0, #16]
 8008842:	b005      	add	sp, #20
 8008844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008848:	f843 2b04 	str.w	r2, [r3], #4
 800884c:	e7d8      	b.n	8008800 <__multiply+0x50>
 800884e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008852:	f1ba 0f00 	cmp.w	sl, #0
 8008856:	d024      	beq.n	80088a2 <__multiply+0xf2>
 8008858:	f104 0e14 	add.w	lr, r4, #20
 800885c:	46a9      	mov	r9, r5
 800885e:	f04f 0c00 	mov.w	ip, #0
 8008862:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008866:	f8d9 1000 	ldr.w	r1, [r9]
 800886a:	fa1f fb82 	uxth.w	fp, r2
 800886e:	b289      	uxth	r1, r1
 8008870:	fb0a 110b 	mla	r1, sl, fp, r1
 8008874:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008878:	f8d9 2000 	ldr.w	r2, [r9]
 800887c:	4461      	add	r1, ip
 800887e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008882:	fb0a c20b 	mla	r2, sl, fp, ip
 8008886:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800888a:	b289      	uxth	r1, r1
 800888c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008890:	4577      	cmp	r7, lr
 8008892:	f849 1b04 	str.w	r1, [r9], #4
 8008896:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800889a:	d8e2      	bhi.n	8008862 <__multiply+0xb2>
 800889c:	9a01      	ldr	r2, [sp, #4]
 800889e:	f845 c002 	str.w	ip, [r5, r2]
 80088a2:	9a03      	ldr	r2, [sp, #12]
 80088a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80088a8:	3304      	adds	r3, #4
 80088aa:	f1b9 0f00 	cmp.w	r9, #0
 80088ae:	d021      	beq.n	80088f4 <__multiply+0x144>
 80088b0:	6829      	ldr	r1, [r5, #0]
 80088b2:	f104 0c14 	add.w	ip, r4, #20
 80088b6:	46ae      	mov	lr, r5
 80088b8:	f04f 0a00 	mov.w	sl, #0
 80088bc:	f8bc b000 	ldrh.w	fp, [ip]
 80088c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80088c4:	fb09 220b 	mla	r2, r9, fp, r2
 80088c8:	4452      	add	r2, sl
 80088ca:	b289      	uxth	r1, r1
 80088cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088d0:	f84e 1b04 	str.w	r1, [lr], #4
 80088d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80088d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088dc:	f8be 1000 	ldrh.w	r1, [lr]
 80088e0:	fb09 110a 	mla	r1, r9, sl, r1
 80088e4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80088e8:	4567      	cmp	r7, ip
 80088ea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088ee:	d8e5      	bhi.n	80088bc <__multiply+0x10c>
 80088f0:	9a01      	ldr	r2, [sp, #4]
 80088f2:	50a9      	str	r1, [r5, r2]
 80088f4:	3504      	adds	r5, #4
 80088f6:	e799      	b.n	800882c <__multiply+0x7c>
 80088f8:	3e01      	subs	r6, #1
 80088fa:	e79b      	b.n	8008834 <__multiply+0x84>
 80088fc:	08009ba0 	.word	0x08009ba0
 8008900:	08009bb1 	.word	0x08009bb1

08008904 <__pow5mult>:
 8008904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008908:	4615      	mov	r5, r2
 800890a:	f012 0203 	ands.w	r2, r2, #3
 800890e:	4606      	mov	r6, r0
 8008910:	460f      	mov	r7, r1
 8008912:	d007      	beq.n	8008924 <__pow5mult+0x20>
 8008914:	4c25      	ldr	r4, [pc, #148]	; (80089ac <__pow5mult+0xa8>)
 8008916:	3a01      	subs	r2, #1
 8008918:	2300      	movs	r3, #0
 800891a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800891e:	f7ff fe9d 	bl	800865c <__multadd>
 8008922:	4607      	mov	r7, r0
 8008924:	10ad      	asrs	r5, r5, #2
 8008926:	d03d      	beq.n	80089a4 <__pow5mult+0xa0>
 8008928:	69f4      	ldr	r4, [r6, #28]
 800892a:	b97c      	cbnz	r4, 800894c <__pow5mult+0x48>
 800892c:	2010      	movs	r0, #16
 800892e:	f7ff fd7f 	bl	8008430 <malloc>
 8008932:	4602      	mov	r2, r0
 8008934:	61f0      	str	r0, [r6, #28]
 8008936:	b928      	cbnz	r0, 8008944 <__pow5mult+0x40>
 8008938:	4b1d      	ldr	r3, [pc, #116]	; (80089b0 <__pow5mult+0xac>)
 800893a:	481e      	ldr	r0, [pc, #120]	; (80089b4 <__pow5mult+0xb0>)
 800893c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008940:	f000 fbe4 	bl	800910c <__assert_func>
 8008944:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008948:	6004      	str	r4, [r0, #0]
 800894a:	60c4      	str	r4, [r0, #12]
 800894c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008950:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008954:	b94c      	cbnz	r4, 800896a <__pow5mult+0x66>
 8008956:	f240 2171 	movw	r1, #625	; 0x271
 800895a:	4630      	mov	r0, r6
 800895c:	f7ff ff12 	bl	8008784 <__i2b>
 8008960:	2300      	movs	r3, #0
 8008962:	f8c8 0008 	str.w	r0, [r8, #8]
 8008966:	4604      	mov	r4, r0
 8008968:	6003      	str	r3, [r0, #0]
 800896a:	f04f 0900 	mov.w	r9, #0
 800896e:	07eb      	lsls	r3, r5, #31
 8008970:	d50a      	bpl.n	8008988 <__pow5mult+0x84>
 8008972:	4639      	mov	r1, r7
 8008974:	4622      	mov	r2, r4
 8008976:	4630      	mov	r0, r6
 8008978:	f7ff ff1a 	bl	80087b0 <__multiply>
 800897c:	4639      	mov	r1, r7
 800897e:	4680      	mov	r8, r0
 8008980:	4630      	mov	r0, r6
 8008982:	f7ff fe49 	bl	8008618 <_Bfree>
 8008986:	4647      	mov	r7, r8
 8008988:	106d      	asrs	r5, r5, #1
 800898a:	d00b      	beq.n	80089a4 <__pow5mult+0xa0>
 800898c:	6820      	ldr	r0, [r4, #0]
 800898e:	b938      	cbnz	r0, 80089a0 <__pow5mult+0x9c>
 8008990:	4622      	mov	r2, r4
 8008992:	4621      	mov	r1, r4
 8008994:	4630      	mov	r0, r6
 8008996:	f7ff ff0b 	bl	80087b0 <__multiply>
 800899a:	6020      	str	r0, [r4, #0]
 800899c:	f8c0 9000 	str.w	r9, [r0]
 80089a0:	4604      	mov	r4, r0
 80089a2:	e7e4      	b.n	800896e <__pow5mult+0x6a>
 80089a4:	4638      	mov	r0, r7
 80089a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089aa:	bf00      	nop
 80089ac:	08009d00 	.word	0x08009d00
 80089b0:	08009b31 	.word	0x08009b31
 80089b4:	08009bb1 	.word	0x08009bb1

080089b8 <__lshift>:
 80089b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089bc:	460c      	mov	r4, r1
 80089be:	6849      	ldr	r1, [r1, #4]
 80089c0:	6923      	ldr	r3, [r4, #16]
 80089c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089c6:	68a3      	ldr	r3, [r4, #8]
 80089c8:	4607      	mov	r7, r0
 80089ca:	4691      	mov	r9, r2
 80089cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089d0:	f108 0601 	add.w	r6, r8, #1
 80089d4:	42b3      	cmp	r3, r6
 80089d6:	db0b      	blt.n	80089f0 <__lshift+0x38>
 80089d8:	4638      	mov	r0, r7
 80089da:	f7ff fddd 	bl	8008598 <_Balloc>
 80089de:	4605      	mov	r5, r0
 80089e0:	b948      	cbnz	r0, 80089f6 <__lshift+0x3e>
 80089e2:	4602      	mov	r2, r0
 80089e4:	4b28      	ldr	r3, [pc, #160]	; (8008a88 <__lshift+0xd0>)
 80089e6:	4829      	ldr	r0, [pc, #164]	; (8008a8c <__lshift+0xd4>)
 80089e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80089ec:	f000 fb8e 	bl	800910c <__assert_func>
 80089f0:	3101      	adds	r1, #1
 80089f2:	005b      	lsls	r3, r3, #1
 80089f4:	e7ee      	b.n	80089d4 <__lshift+0x1c>
 80089f6:	2300      	movs	r3, #0
 80089f8:	f100 0114 	add.w	r1, r0, #20
 80089fc:	f100 0210 	add.w	r2, r0, #16
 8008a00:	4618      	mov	r0, r3
 8008a02:	4553      	cmp	r3, sl
 8008a04:	db33      	blt.n	8008a6e <__lshift+0xb6>
 8008a06:	6920      	ldr	r0, [r4, #16]
 8008a08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a0c:	f104 0314 	add.w	r3, r4, #20
 8008a10:	f019 091f 	ands.w	r9, r9, #31
 8008a14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a1c:	d02b      	beq.n	8008a76 <__lshift+0xbe>
 8008a1e:	f1c9 0e20 	rsb	lr, r9, #32
 8008a22:	468a      	mov	sl, r1
 8008a24:	2200      	movs	r2, #0
 8008a26:	6818      	ldr	r0, [r3, #0]
 8008a28:	fa00 f009 	lsl.w	r0, r0, r9
 8008a2c:	4310      	orrs	r0, r2
 8008a2e:	f84a 0b04 	str.w	r0, [sl], #4
 8008a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a36:	459c      	cmp	ip, r3
 8008a38:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a3c:	d8f3      	bhi.n	8008a26 <__lshift+0x6e>
 8008a3e:	ebac 0304 	sub.w	r3, ip, r4
 8008a42:	3b15      	subs	r3, #21
 8008a44:	f023 0303 	bic.w	r3, r3, #3
 8008a48:	3304      	adds	r3, #4
 8008a4a:	f104 0015 	add.w	r0, r4, #21
 8008a4e:	4584      	cmp	ip, r0
 8008a50:	bf38      	it	cc
 8008a52:	2304      	movcc	r3, #4
 8008a54:	50ca      	str	r2, [r1, r3]
 8008a56:	b10a      	cbz	r2, 8008a5c <__lshift+0xa4>
 8008a58:	f108 0602 	add.w	r6, r8, #2
 8008a5c:	3e01      	subs	r6, #1
 8008a5e:	4638      	mov	r0, r7
 8008a60:	612e      	str	r6, [r5, #16]
 8008a62:	4621      	mov	r1, r4
 8008a64:	f7ff fdd8 	bl	8008618 <_Bfree>
 8008a68:	4628      	mov	r0, r5
 8008a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a72:	3301      	adds	r3, #1
 8008a74:	e7c5      	b.n	8008a02 <__lshift+0x4a>
 8008a76:	3904      	subs	r1, #4
 8008a78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a80:	459c      	cmp	ip, r3
 8008a82:	d8f9      	bhi.n	8008a78 <__lshift+0xc0>
 8008a84:	e7ea      	b.n	8008a5c <__lshift+0xa4>
 8008a86:	bf00      	nop
 8008a88:	08009ba0 	.word	0x08009ba0
 8008a8c:	08009bb1 	.word	0x08009bb1

08008a90 <__mcmp>:
 8008a90:	b530      	push	{r4, r5, lr}
 8008a92:	6902      	ldr	r2, [r0, #16]
 8008a94:	690c      	ldr	r4, [r1, #16]
 8008a96:	1b12      	subs	r2, r2, r4
 8008a98:	d10e      	bne.n	8008ab8 <__mcmp+0x28>
 8008a9a:	f100 0314 	add.w	r3, r0, #20
 8008a9e:	3114      	adds	r1, #20
 8008aa0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008aa4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008aa8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008aac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ab0:	42a5      	cmp	r5, r4
 8008ab2:	d003      	beq.n	8008abc <__mcmp+0x2c>
 8008ab4:	d305      	bcc.n	8008ac2 <__mcmp+0x32>
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	4610      	mov	r0, r2
 8008aba:	bd30      	pop	{r4, r5, pc}
 8008abc:	4283      	cmp	r3, r0
 8008abe:	d3f3      	bcc.n	8008aa8 <__mcmp+0x18>
 8008ac0:	e7fa      	b.n	8008ab8 <__mcmp+0x28>
 8008ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac6:	e7f7      	b.n	8008ab8 <__mcmp+0x28>

08008ac8 <__mdiff>:
 8008ac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	460c      	mov	r4, r1
 8008ace:	4606      	mov	r6, r0
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	4690      	mov	r8, r2
 8008ad6:	f7ff ffdb 	bl	8008a90 <__mcmp>
 8008ada:	1e05      	subs	r5, r0, #0
 8008adc:	d110      	bne.n	8008b00 <__mdiff+0x38>
 8008ade:	4629      	mov	r1, r5
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	f7ff fd59 	bl	8008598 <_Balloc>
 8008ae6:	b930      	cbnz	r0, 8008af6 <__mdiff+0x2e>
 8008ae8:	4b3a      	ldr	r3, [pc, #232]	; (8008bd4 <__mdiff+0x10c>)
 8008aea:	4602      	mov	r2, r0
 8008aec:	f240 2137 	movw	r1, #567	; 0x237
 8008af0:	4839      	ldr	r0, [pc, #228]	; (8008bd8 <__mdiff+0x110>)
 8008af2:	f000 fb0b 	bl	800910c <__assert_func>
 8008af6:	2301      	movs	r3, #1
 8008af8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008afc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b00:	bfa4      	itt	ge
 8008b02:	4643      	movge	r3, r8
 8008b04:	46a0      	movge	r8, r4
 8008b06:	4630      	mov	r0, r6
 8008b08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b0c:	bfa6      	itte	ge
 8008b0e:	461c      	movge	r4, r3
 8008b10:	2500      	movge	r5, #0
 8008b12:	2501      	movlt	r5, #1
 8008b14:	f7ff fd40 	bl	8008598 <_Balloc>
 8008b18:	b920      	cbnz	r0, 8008b24 <__mdiff+0x5c>
 8008b1a:	4b2e      	ldr	r3, [pc, #184]	; (8008bd4 <__mdiff+0x10c>)
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	f240 2145 	movw	r1, #581	; 0x245
 8008b22:	e7e5      	b.n	8008af0 <__mdiff+0x28>
 8008b24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b28:	6926      	ldr	r6, [r4, #16]
 8008b2a:	60c5      	str	r5, [r0, #12]
 8008b2c:	f104 0914 	add.w	r9, r4, #20
 8008b30:	f108 0514 	add.w	r5, r8, #20
 8008b34:	f100 0e14 	add.w	lr, r0, #20
 8008b38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b40:	f108 0210 	add.w	r2, r8, #16
 8008b44:	46f2      	mov	sl, lr
 8008b46:	2100      	movs	r1, #0
 8008b48:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b50:	fa11 f88b 	uxtah	r8, r1, fp
 8008b54:	b299      	uxth	r1, r3
 8008b56:	0c1b      	lsrs	r3, r3, #16
 8008b58:	eba8 0801 	sub.w	r8, r8, r1
 8008b5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b60:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b64:	fa1f f888 	uxth.w	r8, r8
 8008b68:	1419      	asrs	r1, r3, #16
 8008b6a:	454e      	cmp	r6, r9
 8008b6c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b70:	f84a 3b04 	str.w	r3, [sl], #4
 8008b74:	d8e8      	bhi.n	8008b48 <__mdiff+0x80>
 8008b76:	1b33      	subs	r3, r6, r4
 8008b78:	3b15      	subs	r3, #21
 8008b7a:	f023 0303 	bic.w	r3, r3, #3
 8008b7e:	3304      	adds	r3, #4
 8008b80:	3415      	adds	r4, #21
 8008b82:	42a6      	cmp	r6, r4
 8008b84:	bf38      	it	cc
 8008b86:	2304      	movcc	r3, #4
 8008b88:	441d      	add	r5, r3
 8008b8a:	4473      	add	r3, lr
 8008b8c:	469e      	mov	lr, r3
 8008b8e:	462e      	mov	r6, r5
 8008b90:	4566      	cmp	r6, ip
 8008b92:	d30e      	bcc.n	8008bb2 <__mdiff+0xea>
 8008b94:	f10c 0203 	add.w	r2, ip, #3
 8008b98:	1b52      	subs	r2, r2, r5
 8008b9a:	f022 0203 	bic.w	r2, r2, #3
 8008b9e:	3d03      	subs	r5, #3
 8008ba0:	45ac      	cmp	ip, r5
 8008ba2:	bf38      	it	cc
 8008ba4:	2200      	movcc	r2, #0
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008bac:	b17a      	cbz	r2, 8008bce <__mdiff+0x106>
 8008bae:	6107      	str	r7, [r0, #16]
 8008bb0:	e7a4      	b.n	8008afc <__mdiff+0x34>
 8008bb2:	f856 8b04 	ldr.w	r8, [r6], #4
 8008bb6:	fa11 f288 	uxtah	r2, r1, r8
 8008bba:	1414      	asrs	r4, r2, #16
 8008bbc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008bc0:	b292      	uxth	r2, r2
 8008bc2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008bc6:	f84e 2b04 	str.w	r2, [lr], #4
 8008bca:	1421      	asrs	r1, r4, #16
 8008bcc:	e7e0      	b.n	8008b90 <__mdiff+0xc8>
 8008bce:	3f01      	subs	r7, #1
 8008bd0:	e7ea      	b.n	8008ba8 <__mdiff+0xe0>
 8008bd2:	bf00      	nop
 8008bd4:	08009ba0 	.word	0x08009ba0
 8008bd8:	08009bb1 	.word	0x08009bb1

08008bdc <__d2b>:
 8008bdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008be0:	460f      	mov	r7, r1
 8008be2:	2101      	movs	r1, #1
 8008be4:	ec59 8b10 	vmov	r8, r9, d0
 8008be8:	4616      	mov	r6, r2
 8008bea:	f7ff fcd5 	bl	8008598 <_Balloc>
 8008bee:	4604      	mov	r4, r0
 8008bf0:	b930      	cbnz	r0, 8008c00 <__d2b+0x24>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	4b24      	ldr	r3, [pc, #144]	; (8008c88 <__d2b+0xac>)
 8008bf6:	4825      	ldr	r0, [pc, #148]	; (8008c8c <__d2b+0xb0>)
 8008bf8:	f240 310f 	movw	r1, #783	; 0x30f
 8008bfc:	f000 fa86 	bl	800910c <__assert_func>
 8008c00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c08:	bb2d      	cbnz	r5, 8008c56 <__d2b+0x7a>
 8008c0a:	9301      	str	r3, [sp, #4]
 8008c0c:	f1b8 0300 	subs.w	r3, r8, #0
 8008c10:	d026      	beq.n	8008c60 <__d2b+0x84>
 8008c12:	4668      	mov	r0, sp
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	f7ff fd87 	bl	8008728 <__lo0bits>
 8008c1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c1e:	b1e8      	cbz	r0, 8008c5c <__d2b+0x80>
 8008c20:	f1c0 0320 	rsb	r3, r0, #32
 8008c24:	fa02 f303 	lsl.w	r3, r2, r3
 8008c28:	430b      	orrs	r3, r1
 8008c2a:	40c2      	lsrs	r2, r0
 8008c2c:	6163      	str	r3, [r4, #20]
 8008c2e:	9201      	str	r2, [sp, #4]
 8008c30:	9b01      	ldr	r3, [sp, #4]
 8008c32:	61a3      	str	r3, [r4, #24]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	bf14      	ite	ne
 8008c38:	2202      	movne	r2, #2
 8008c3a:	2201      	moveq	r2, #1
 8008c3c:	6122      	str	r2, [r4, #16]
 8008c3e:	b1bd      	cbz	r5, 8008c70 <__d2b+0x94>
 8008c40:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c44:	4405      	add	r5, r0
 8008c46:	603d      	str	r5, [r7, #0]
 8008c48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c4c:	6030      	str	r0, [r6, #0]
 8008c4e:	4620      	mov	r0, r4
 8008c50:	b003      	add	sp, #12
 8008c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c5a:	e7d6      	b.n	8008c0a <__d2b+0x2e>
 8008c5c:	6161      	str	r1, [r4, #20]
 8008c5e:	e7e7      	b.n	8008c30 <__d2b+0x54>
 8008c60:	a801      	add	r0, sp, #4
 8008c62:	f7ff fd61 	bl	8008728 <__lo0bits>
 8008c66:	9b01      	ldr	r3, [sp, #4]
 8008c68:	6163      	str	r3, [r4, #20]
 8008c6a:	3020      	adds	r0, #32
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	e7e5      	b.n	8008c3c <__d2b+0x60>
 8008c70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c78:	6038      	str	r0, [r7, #0]
 8008c7a:	6918      	ldr	r0, [r3, #16]
 8008c7c:	f7ff fd34 	bl	80086e8 <__hi0bits>
 8008c80:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c84:	e7e2      	b.n	8008c4c <__d2b+0x70>
 8008c86:	bf00      	nop
 8008c88:	08009ba0 	.word	0x08009ba0
 8008c8c:	08009bb1 	.word	0x08009bb1

08008c90 <__ssputs_r>:
 8008c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c94:	688e      	ldr	r6, [r1, #8]
 8008c96:	461f      	mov	r7, r3
 8008c98:	42be      	cmp	r6, r7
 8008c9a:	680b      	ldr	r3, [r1, #0]
 8008c9c:	4682      	mov	sl, r0
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	4690      	mov	r8, r2
 8008ca2:	d82c      	bhi.n	8008cfe <__ssputs_r+0x6e>
 8008ca4:	898a      	ldrh	r2, [r1, #12]
 8008ca6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008caa:	d026      	beq.n	8008cfa <__ssputs_r+0x6a>
 8008cac:	6965      	ldr	r5, [r4, #20]
 8008cae:	6909      	ldr	r1, [r1, #16]
 8008cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cb4:	eba3 0901 	sub.w	r9, r3, r1
 8008cb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cbc:	1c7b      	adds	r3, r7, #1
 8008cbe:	444b      	add	r3, r9
 8008cc0:	106d      	asrs	r5, r5, #1
 8008cc2:	429d      	cmp	r5, r3
 8008cc4:	bf38      	it	cc
 8008cc6:	461d      	movcc	r5, r3
 8008cc8:	0553      	lsls	r3, r2, #21
 8008cca:	d527      	bpl.n	8008d1c <__ssputs_r+0x8c>
 8008ccc:	4629      	mov	r1, r5
 8008cce:	f7ff fbd7 	bl	8008480 <_malloc_r>
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	b360      	cbz	r0, 8008d30 <__ssputs_r+0xa0>
 8008cd6:	6921      	ldr	r1, [r4, #16]
 8008cd8:	464a      	mov	r2, r9
 8008cda:	f000 fa09 	bl	80090f0 <memcpy>
 8008cde:	89a3      	ldrh	r3, [r4, #12]
 8008ce0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	6126      	str	r6, [r4, #16]
 8008cec:	6165      	str	r5, [r4, #20]
 8008cee:	444e      	add	r6, r9
 8008cf0:	eba5 0509 	sub.w	r5, r5, r9
 8008cf4:	6026      	str	r6, [r4, #0]
 8008cf6:	60a5      	str	r5, [r4, #8]
 8008cf8:	463e      	mov	r6, r7
 8008cfa:	42be      	cmp	r6, r7
 8008cfc:	d900      	bls.n	8008d00 <__ssputs_r+0x70>
 8008cfe:	463e      	mov	r6, r7
 8008d00:	6820      	ldr	r0, [r4, #0]
 8008d02:	4632      	mov	r2, r6
 8008d04:	4641      	mov	r1, r8
 8008d06:	f000 f9c9 	bl	800909c <memmove>
 8008d0a:	68a3      	ldr	r3, [r4, #8]
 8008d0c:	1b9b      	subs	r3, r3, r6
 8008d0e:	60a3      	str	r3, [r4, #8]
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	4433      	add	r3, r6
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	2000      	movs	r0, #0
 8008d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d1c:	462a      	mov	r2, r5
 8008d1e:	f000 fa3b 	bl	8009198 <_realloc_r>
 8008d22:	4606      	mov	r6, r0
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d1e0      	bne.n	8008cea <__ssputs_r+0x5a>
 8008d28:	6921      	ldr	r1, [r4, #16]
 8008d2a:	4650      	mov	r0, sl
 8008d2c:	f7ff fb34 	bl	8008398 <_free_r>
 8008d30:	230c      	movs	r3, #12
 8008d32:	f8ca 3000 	str.w	r3, [sl]
 8008d36:	89a3      	ldrh	r3, [r4, #12]
 8008d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d3c:	81a3      	strh	r3, [r4, #12]
 8008d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d42:	e7e9      	b.n	8008d18 <__ssputs_r+0x88>

08008d44 <_svfiprintf_r>:
 8008d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d48:	4698      	mov	r8, r3
 8008d4a:	898b      	ldrh	r3, [r1, #12]
 8008d4c:	061b      	lsls	r3, r3, #24
 8008d4e:	b09d      	sub	sp, #116	; 0x74
 8008d50:	4607      	mov	r7, r0
 8008d52:	460d      	mov	r5, r1
 8008d54:	4614      	mov	r4, r2
 8008d56:	d50e      	bpl.n	8008d76 <_svfiprintf_r+0x32>
 8008d58:	690b      	ldr	r3, [r1, #16]
 8008d5a:	b963      	cbnz	r3, 8008d76 <_svfiprintf_r+0x32>
 8008d5c:	2140      	movs	r1, #64	; 0x40
 8008d5e:	f7ff fb8f 	bl	8008480 <_malloc_r>
 8008d62:	6028      	str	r0, [r5, #0]
 8008d64:	6128      	str	r0, [r5, #16]
 8008d66:	b920      	cbnz	r0, 8008d72 <_svfiprintf_r+0x2e>
 8008d68:	230c      	movs	r3, #12
 8008d6a:	603b      	str	r3, [r7, #0]
 8008d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d70:	e0d0      	b.n	8008f14 <_svfiprintf_r+0x1d0>
 8008d72:	2340      	movs	r3, #64	; 0x40
 8008d74:	616b      	str	r3, [r5, #20]
 8008d76:	2300      	movs	r3, #0
 8008d78:	9309      	str	r3, [sp, #36]	; 0x24
 8008d7a:	2320      	movs	r3, #32
 8008d7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d80:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d84:	2330      	movs	r3, #48	; 0x30
 8008d86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008f2c <_svfiprintf_r+0x1e8>
 8008d8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d8e:	f04f 0901 	mov.w	r9, #1
 8008d92:	4623      	mov	r3, r4
 8008d94:	469a      	mov	sl, r3
 8008d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d9a:	b10a      	cbz	r2, 8008da0 <_svfiprintf_r+0x5c>
 8008d9c:	2a25      	cmp	r2, #37	; 0x25
 8008d9e:	d1f9      	bne.n	8008d94 <_svfiprintf_r+0x50>
 8008da0:	ebba 0b04 	subs.w	fp, sl, r4
 8008da4:	d00b      	beq.n	8008dbe <_svfiprintf_r+0x7a>
 8008da6:	465b      	mov	r3, fp
 8008da8:	4622      	mov	r2, r4
 8008daa:	4629      	mov	r1, r5
 8008dac:	4638      	mov	r0, r7
 8008dae:	f7ff ff6f 	bl	8008c90 <__ssputs_r>
 8008db2:	3001      	adds	r0, #1
 8008db4:	f000 80a9 	beq.w	8008f0a <_svfiprintf_r+0x1c6>
 8008db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dba:	445a      	add	r2, fp
 8008dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f000 80a1 	beq.w	8008f0a <_svfiprintf_r+0x1c6>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f04f 32ff 	mov.w	r2, #4294967295
 8008dce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dd2:	f10a 0a01 	add.w	sl, sl, #1
 8008dd6:	9304      	str	r3, [sp, #16]
 8008dd8:	9307      	str	r3, [sp, #28]
 8008dda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dde:	931a      	str	r3, [sp, #104]	; 0x68
 8008de0:	4654      	mov	r4, sl
 8008de2:	2205      	movs	r2, #5
 8008de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de8:	4850      	ldr	r0, [pc, #320]	; (8008f2c <_svfiprintf_r+0x1e8>)
 8008dea:	f7f7 fa29 	bl	8000240 <memchr>
 8008dee:	9a04      	ldr	r2, [sp, #16]
 8008df0:	b9d8      	cbnz	r0, 8008e2a <_svfiprintf_r+0xe6>
 8008df2:	06d0      	lsls	r0, r2, #27
 8008df4:	bf44      	itt	mi
 8008df6:	2320      	movmi	r3, #32
 8008df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dfc:	0711      	lsls	r1, r2, #28
 8008dfe:	bf44      	itt	mi
 8008e00:	232b      	movmi	r3, #43	; 0x2b
 8008e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e06:	f89a 3000 	ldrb.w	r3, [sl]
 8008e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e0c:	d015      	beq.n	8008e3a <_svfiprintf_r+0xf6>
 8008e0e:	9a07      	ldr	r2, [sp, #28]
 8008e10:	4654      	mov	r4, sl
 8008e12:	2000      	movs	r0, #0
 8008e14:	f04f 0c0a 	mov.w	ip, #10
 8008e18:	4621      	mov	r1, r4
 8008e1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e1e:	3b30      	subs	r3, #48	; 0x30
 8008e20:	2b09      	cmp	r3, #9
 8008e22:	d94d      	bls.n	8008ec0 <_svfiprintf_r+0x17c>
 8008e24:	b1b0      	cbz	r0, 8008e54 <_svfiprintf_r+0x110>
 8008e26:	9207      	str	r2, [sp, #28]
 8008e28:	e014      	b.n	8008e54 <_svfiprintf_r+0x110>
 8008e2a:	eba0 0308 	sub.w	r3, r0, r8
 8008e2e:	fa09 f303 	lsl.w	r3, r9, r3
 8008e32:	4313      	orrs	r3, r2
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	46a2      	mov	sl, r4
 8008e38:	e7d2      	b.n	8008de0 <_svfiprintf_r+0x9c>
 8008e3a:	9b03      	ldr	r3, [sp, #12]
 8008e3c:	1d19      	adds	r1, r3, #4
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	9103      	str	r1, [sp, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	bfbb      	ittet	lt
 8008e46:	425b      	neglt	r3, r3
 8008e48:	f042 0202 	orrlt.w	r2, r2, #2
 8008e4c:	9307      	strge	r3, [sp, #28]
 8008e4e:	9307      	strlt	r3, [sp, #28]
 8008e50:	bfb8      	it	lt
 8008e52:	9204      	strlt	r2, [sp, #16]
 8008e54:	7823      	ldrb	r3, [r4, #0]
 8008e56:	2b2e      	cmp	r3, #46	; 0x2e
 8008e58:	d10c      	bne.n	8008e74 <_svfiprintf_r+0x130>
 8008e5a:	7863      	ldrb	r3, [r4, #1]
 8008e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e5e:	d134      	bne.n	8008eca <_svfiprintf_r+0x186>
 8008e60:	9b03      	ldr	r3, [sp, #12]
 8008e62:	1d1a      	adds	r2, r3, #4
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	9203      	str	r2, [sp, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	bfb8      	it	lt
 8008e6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e70:	3402      	adds	r4, #2
 8008e72:	9305      	str	r3, [sp, #20]
 8008e74:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008f3c <_svfiprintf_r+0x1f8>
 8008e78:	7821      	ldrb	r1, [r4, #0]
 8008e7a:	2203      	movs	r2, #3
 8008e7c:	4650      	mov	r0, sl
 8008e7e:	f7f7 f9df 	bl	8000240 <memchr>
 8008e82:	b138      	cbz	r0, 8008e94 <_svfiprintf_r+0x150>
 8008e84:	9b04      	ldr	r3, [sp, #16]
 8008e86:	eba0 000a 	sub.w	r0, r0, sl
 8008e8a:	2240      	movs	r2, #64	; 0x40
 8008e8c:	4082      	lsls	r2, r0
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	3401      	adds	r4, #1
 8008e92:	9304      	str	r3, [sp, #16]
 8008e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e98:	4825      	ldr	r0, [pc, #148]	; (8008f30 <_svfiprintf_r+0x1ec>)
 8008e9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e9e:	2206      	movs	r2, #6
 8008ea0:	f7f7 f9ce 	bl	8000240 <memchr>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	d038      	beq.n	8008f1a <_svfiprintf_r+0x1d6>
 8008ea8:	4b22      	ldr	r3, [pc, #136]	; (8008f34 <_svfiprintf_r+0x1f0>)
 8008eaa:	bb1b      	cbnz	r3, 8008ef4 <_svfiprintf_r+0x1b0>
 8008eac:	9b03      	ldr	r3, [sp, #12]
 8008eae:	3307      	adds	r3, #7
 8008eb0:	f023 0307 	bic.w	r3, r3, #7
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	9303      	str	r3, [sp, #12]
 8008eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eba:	4433      	add	r3, r6
 8008ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ebe:	e768      	b.n	8008d92 <_svfiprintf_r+0x4e>
 8008ec0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ec4:	460c      	mov	r4, r1
 8008ec6:	2001      	movs	r0, #1
 8008ec8:	e7a6      	b.n	8008e18 <_svfiprintf_r+0xd4>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	3401      	adds	r4, #1
 8008ece:	9305      	str	r3, [sp, #20]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	f04f 0c0a 	mov.w	ip, #10
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008edc:	3a30      	subs	r2, #48	; 0x30
 8008ede:	2a09      	cmp	r2, #9
 8008ee0:	d903      	bls.n	8008eea <_svfiprintf_r+0x1a6>
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0c6      	beq.n	8008e74 <_svfiprintf_r+0x130>
 8008ee6:	9105      	str	r1, [sp, #20]
 8008ee8:	e7c4      	b.n	8008e74 <_svfiprintf_r+0x130>
 8008eea:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eee:	4604      	mov	r4, r0
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e7f0      	b.n	8008ed6 <_svfiprintf_r+0x192>
 8008ef4:	ab03      	add	r3, sp, #12
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	462a      	mov	r2, r5
 8008efa:	4b0f      	ldr	r3, [pc, #60]	; (8008f38 <_svfiprintf_r+0x1f4>)
 8008efc:	a904      	add	r1, sp, #16
 8008efe:	4638      	mov	r0, r7
 8008f00:	f7fd fee6 	bl	8006cd0 <_printf_float>
 8008f04:	1c42      	adds	r2, r0, #1
 8008f06:	4606      	mov	r6, r0
 8008f08:	d1d6      	bne.n	8008eb8 <_svfiprintf_r+0x174>
 8008f0a:	89ab      	ldrh	r3, [r5, #12]
 8008f0c:	065b      	lsls	r3, r3, #25
 8008f0e:	f53f af2d 	bmi.w	8008d6c <_svfiprintf_r+0x28>
 8008f12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f14:	b01d      	add	sp, #116	; 0x74
 8008f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1a:	ab03      	add	r3, sp, #12
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	462a      	mov	r2, r5
 8008f20:	4b05      	ldr	r3, [pc, #20]	; (8008f38 <_svfiprintf_r+0x1f4>)
 8008f22:	a904      	add	r1, sp, #16
 8008f24:	4638      	mov	r0, r7
 8008f26:	f7fe f95b 	bl	80071e0 <_printf_i>
 8008f2a:	e7eb      	b.n	8008f04 <_svfiprintf_r+0x1c0>
 8008f2c:	08009d0c 	.word	0x08009d0c
 8008f30:	08009d16 	.word	0x08009d16
 8008f34:	08006cd1 	.word	0x08006cd1
 8008f38:	08008c91 	.word	0x08008c91
 8008f3c:	08009d12 	.word	0x08009d12

08008f40 <__sflush_r>:
 8008f40:	898a      	ldrh	r2, [r1, #12]
 8008f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f46:	4605      	mov	r5, r0
 8008f48:	0710      	lsls	r0, r2, #28
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	d458      	bmi.n	8009000 <__sflush_r+0xc0>
 8008f4e:	684b      	ldr	r3, [r1, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	dc05      	bgt.n	8008f60 <__sflush_r+0x20>
 8008f54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	dc02      	bgt.n	8008f60 <__sflush_r+0x20>
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f62:	2e00      	cmp	r6, #0
 8008f64:	d0f9      	beq.n	8008f5a <__sflush_r+0x1a>
 8008f66:	2300      	movs	r3, #0
 8008f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f6c:	682f      	ldr	r7, [r5, #0]
 8008f6e:	6a21      	ldr	r1, [r4, #32]
 8008f70:	602b      	str	r3, [r5, #0]
 8008f72:	d032      	beq.n	8008fda <__sflush_r+0x9a>
 8008f74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f76:	89a3      	ldrh	r3, [r4, #12]
 8008f78:	075a      	lsls	r2, r3, #29
 8008f7a:	d505      	bpl.n	8008f88 <__sflush_r+0x48>
 8008f7c:	6863      	ldr	r3, [r4, #4]
 8008f7e:	1ac0      	subs	r0, r0, r3
 8008f80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f82:	b10b      	cbz	r3, 8008f88 <__sflush_r+0x48>
 8008f84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f86:	1ac0      	subs	r0, r0, r3
 8008f88:	2300      	movs	r3, #0
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f8e:	6a21      	ldr	r1, [r4, #32]
 8008f90:	4628      	mov	r0, r5
 8008f92:	47b0      	blx	r6
 8008f94:	1c43      	adds	r3, r0, #1
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	d106      	bne.n	8008fa8 <__sflush_r+0x68>
 8008f9a:	6829      	ldr	r1, [r5, #0]
 8008f9c:	291d      	cmp	r1, #29
 8008f9e:	d82b      	bhi.n	8008ff8 <__sflush_r+0xb8>
 8008fa0:	4a29      	ldr	r2, [pc, #164]	; (8009048 <__sflush_r+0x108>)
 8008fa2:	410a      	asrs	r2, r1
 8008fa4:	07d6      	lsls	r6, r2, #31
 8008fa6:	d427      	bmi.n	8008ff8 <__sflush_r+0xb8>
 8008fa8:	2200      	movs	r2, #0
 8008faa:	6062      	str	r2, [r4, #4]
 8008fac:	04d9      	lsls	r1, r3, #19
 8008fae:	6922      	ldr	r2, [r4, #16]
 8008fb0:	6022      	str	r2, [r4, #0]
 8008fb2:	d504      	bpl.n	8008fbe <__sflush_r+0x7e>
 8008fb4:	1c42      	adds	r2, r0, #1
 8008fb6:	d101      	bne.n	8008fbc <__sflush_r+0x7c>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	b903      	cbnz	r3, 8008fbe <__sflush_r+0x7e>
 8008fbc:	6560      	str	r0, [r4, #84]	; 0x54
 8008fbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fc0:	602f      	str	r7, [r5, #0]
 8008fc2:	2900      	cmp	r1, #0
 8008fc4:	d0c9      	beq.n	8008f5a <__sflush_r+0x1a>
 8008fc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fca:	4299      	cmp	r1, r3
 8008fcc:	d002      	beq.n	8008fd4 <__sflush_r+0x94>
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f7ff f9e2 	bl	8008398 <_free_r>
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	6360      	str	r0, [r4, #52]	; 0x34
 8008fd8:	e7c0      	b.n	8008f5c <__sflush_r+0x1c>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4628      	mov	r0, r5
 8008fde:	47b0      	blx	r6
 8008fe0:	1c41      	adds	r1, r0, #1
 8008fe2:	d1c8      	bne.n	8008f76 <__sflush_r+0x36>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0c5      	beq.n	8008f76 <__sflush_r+0x36>
 8008fea:	2b1d      	cmp	r3, #29
 8008fec:	d001      	beq.n	8008ff2 <__sflush_r+0xb2>
 8008fee:	2b16      	cmp	r3, #22
 8008ff0:	d101      	bne.n	8008ff6 <__sflush_r+0xb6>
 8008ff2:	602f      	str	r7, [r5, #0]
 8008ff4:	e7b1      	b.n	8008f5a <__sflush_r+0x1a>
 8008ff6:	89a3      	ldrh	r3, [r4, #12]
 8008ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffc:	81a3      	strh	r3, [r4, #12]
 8008ffe:	e7ad      	b.n	8008f5c <__sflush_r+0x1c>
 8009000:	690f      	ldr	r7, [r1, #16]
 8009002:	2f00      	cmp	r7, #0
 8009004:	d0a9      	beq.n	8008f5a <__sflush_r+0x1a>
 8009006:	0793      	lsls	r3, r2, #30
 8009008:	680e      	ldr	r6, [r1, #0]
 800900a:	bf08      	it	eq
 800900c:	694b      	ldreq	r3, [r1, #20]
 800900e:	600f      	str	r7, [r1, #0]
 8009010:	bf18      	it	ne
 8009012:	2300      	movne	r3, #0
 8009014:	eba6 0807 	sub.w	r8, r6, r7
 8009018:	608b      	str	r3, [r1, #8]
 800901a:	f1b8 0f00 	cmp.w	r8, #0
 800901e:	dd9c      	ble.n	8008f5a <__sflush_r+0x1a>
 8009020:	6a21      	ldr	r1, [r4, #32]
 8009022:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009024:	4643      	mov	r3, r8
 8009026:	463a      	mov	r2, r7
 8009028:	4628      	mov	r0, r5
 800902a:	47b0      	blx	r6
 800902c:	2800      	cmp	r0, #0
 800902e:	dc06      	bgt.n	800903e <__sflush_r+0xfe>
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009036:	81a3      	strh	r3, [r4, #12]
 8009038:	f04f 30ff 	mov.w	r0, #4294967295
 800903c:	e78e      	b.n	8008f5c <__sflush_r+0x1c>
 800903e:	4407      	add	r7, r0
 8009040:	eba8 0800 	sub.w	r8, r8, r0
 8009044:	e7e9      	b.n	800901a <__sflush_r+0xda>
 8009046:	bf00      	nop
 8009048:	dfbffffe 	.word	0xdfbffffe

0800904c <_fflush_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	690b      	ldr	r3, [r1, #16]
 8009050:	4605      	mov	r5, r0
 8009052:	460c      	mov	r4, r1
 8009054:	b913      	cbnz	r3, 800905c <_fflush_r+0x10>
 8009056:	2500      	movs	r5, #0
 8009058:	4628      	mov	r0, r5
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	b118      	cbz	r0, 8009066 <_fflush_r+0x1a>
 800905e:	6a03      	ldr	r3, [r0, #32]
 8009060:	b90b      	cbnz	r3, 8009066 <_fflush_r+0x1a>
 8009062:	f7fe fa59 	bl	8007518 <__sinit>
 8009066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d0f3      	beq.n	8009056 <_fflush_r+0xa>
 800906e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009070:	07d0      	lsls	r0, r2, #31
 8009072:	d404      	bmi.n	800907e <_fflush_r+0x32>
 8009074:	0599      	lsls	r1, r3, #22
 8009076:	d402      	bmi.n	800907e <_fflush_r+0x32>
 8009078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800907a:	f7fe fb97 	bl	80077ac <__retarget_lock_acquire_recursive>
 800907e:	4628      	mov	r0, r5
 8009080:	4621      	mov	r1, r4
 8009082:	f7ff ff5d 	bl	8008f40 <__sflush_r>
 8009086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009088:	07da      	lsls	r2, r3, #31
 800908a:	4605      	mov	r5, r0
 800908c:	d4e4      	bmi.n	8009058 <_fflush_r+0xc>
 800908e:	89a3      	ldrh	r3, [r4, #12]
 8009090:	059b      	lsls	r3, r3, #22
 8009092:	d4e1      	bmi.n	8009058 <_fflush_r+0xc>
 8009094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009096:	f7fe fb8a 	bl	80077ae <__retarget_lock_release_recursive>
 800909a:	e7dd      	b.n	8009058 <_fflush_r+0xc>

0800909c <memmove>:
 800909c:	4288      	cmp	r0, r1
 800909e:	b510      	push	{r4, lr}
 80090a0:	eb01 0402 	add.w	r4, r1, r2
 80090a4:	d902      	bls.n	80090ac <memmove+0x10>
 80090a6:	4284      	cmp	r4, r0
 80090a8:	4623      	mov	r3, r4
 80090aa:	d807      	bhi.n	80090bc <memmove+0x20>
 80090ac:	1e43      	subs	r3, r0, #1
 80090ae:	42a1      	cmp	r1, r4
 80090b0:	d008      	beq.n	80090c4 <memmove+0x28>
 80090b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090ba:	e7f8      	b.n	80090ae <memmove+0x12>
 80090bc:	4402      	add	r2, r0
 80090be:	4601      	mov	r1, r0
 80090c0:	428a      	cmp	r2, r1
 80090c2:	d100      	bne.n	80090c6 <memmove+0x2a>
 80090c4:	bd10      	pop	{r4, pc}
 80090c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090ce:	e7f7      	b.n	80090c0 <memmove+0x24>

080090d0 <_sbrk_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4d06      	ldr	r5, [pc, #24]	; (80090ec <_sbrk_r+0x1c>)
 80090d4:	2300      	movs	r3, #0
 80090d6:	4604      	mov	r4, r0
 80090d8:	4608      	mov	r0, r1
 80090da:	602b      	str	r3, [r5, #0]
 80090dc:	f7f8 fdee 	bl	8001cbc <_sbrk>
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	d102      	bne.n	80090ea <_sbrk_r+0x1a>
 80090e4:	682b      	ldr	r3, [r5, #0]
 80090e6:	b103      	cbz	r3, 80090ea <_sbrk_r+0x1a>
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	bd38      	pop	{r3, r4, r5, pc}
 80090ec:	200006cc 	.word	0x200006cc

080090f0 <memcpy>:
 80090f0:	440a      	add	r2, r1
 80090f2:	4291      	cmp	r1, r2
 80090f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80090f8:	d100      	bne.n	80090fc <memcpy+0xc>
 80090fa:	4770      	bx	lr
 80090fc:	b510      	push	{r4, lr}
 80090fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009106:	4291      	cmp	r1, r2
 8009108:	d1f9      	bne.n	80090fe <memcpy+0xe>
 800910a:	bd10      	pop	{r4, pc}

0800910c <__assert_func>:
 800910c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800910e:	4614      	mov	r4, r2
 8009110:	461a      	mov	r2, r3
 8009112:	4b09      	ldr	r3, [pc, #36]	; (8009138 <__assert_func+0x2c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4605      	mov	r5, r0
 8009118:	68d8      	ldr	r0, [r3, #12]
 800911a:	b14c      	cbz	r4, 8009130 <__assert_func+0x24>
 800911c:	4b07      	ldr	r3, [pc, #28]	; (800913c <__assert_func+0x30>)
 800911e:	9100      	str	r1, [sp, #0]
 8009120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009124:	4906      	ldr	r1, [pc, #24]	; (8009140 <__assert_func+0x34>)
 8009126:	462b      	mov	r3, r5
 8009128:	f000 f872 	bl	8009210 <fiprintf>
 800912c:	f000 f882 	bl	8009234 <abort>
 8009130:	4b04      	ldr	r3, [pc, #16]	; (8009144 <__assert_func+0x38>)
 8009132:	461c      	mov	r4, r3
 8009134:	e7f3      	b.n	800911e <__assert_func+0x12>
 8009136:	bf00      	nop
 8009138:	200000bc 	.word	0x200000bc
 800913c:	08009d27 	.word	0x08009d27
 8009140:	08009d34 	.word	0x08009d34
 8009144:	08009d62 	.word	0x08009d62

08009148 <_calloc_r>:
 8009148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800914a:	fba1 2402 	umull	r2, r4, r1, r2
 800914e:	b94c      	cbnz	r4, 8009164 <_calloc_r+0x1c>
 8009150:	4611      	mov	r1, r2
 8009152:	9201      	str	r2, [sp, #4]
 8009154:	f7ff f994 	bl	8008480 <_malloc_r>
 8009158:	9a01      	ldr	r2, [sp, #4]
 800915a:	4605      	mov	r5, r0
 800915c:	b930      	cbnz	r0, 800916c <_calloc_r+0x24>
 800915e:	4628      	mov	r0, r5
 8009160:	b003      	add	sp, #12
 8009162:	bd30      	pop	{r4, r5, pc}
 8009164:	220c      	movs	r2, #12
 8009166:	6002      	str	r2, [r0, #0]
 8009168:	2500      	movs	r5, #0
 800916a:	e7f8      	b.n	800915e <_calloc_r+0x16>
 800916c:	4621      	mov	r1, r4
 800916e:	f7fe faa0 	bl	80076b2 <memset>
 8009172:	e7f4      	b.n	800915e <_calloc_r+0x16>

08009174 <__ascii_mbtowc>:
 8009174:	b082      	sub	sp, #8
 8009176:	b901      	cbnz	r1, 800917a <__ascii_mbtowc+0x6>
 8009178:	a901      	add	r1, sp, #4
 800917a:	b142      	cbz	r2, 800918e <__ascii_mbtowc+0x1a>
 800917c:	b14b      	cbz	r3, 8009192 <__ascii_mbtowc+0x1e>
 800917e:	7813      	ldrb	r3, [r2, #0]
 8009180:	600b      	str	r3, [r1, #0]
 8009182:	7812      	ldrb	r2, [r2, #0]
 8009184:	1e10      	subs	r0, r2, #0
 8009186:	bf18      	it	ne
 8009188:	2001      	movne	r0, #1
 800918a:	b002      	add	sp, #8
 800918c:	4770      	bx	lr
 800918e:	4610      	mov	r0, r2
 8009190:	e7fb      	b.n	800918a <__ascii_mbtowc+0x16>
 8009192:	f06f 0001 	mvn.w	r0, #1
 8009196:	e7f8      	b.n	800918a <__ascii_mbtowc+0x16>

08009198 <_realloc_r>:
 8009198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800919c:	4680      	mov	r8, r0
 800919e:	4614      	mov	r4, r2
 80091a0:	460e      	mov	r6, r1
 80091a2:	b921      	cbnz	r1, 80091ae <_realloc_r+0x16>
 80091a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091a8:	4611      	mov	r1, r2
 80091aa:	f7ff b969 	b.w	8008480 <_malloc_r>
 80091ae:	b92a      	cbnz	r2, 80091bc <_realloc_r+0x24>
 80091b0:	f7ff f8f2 	bl	8008398 <_free_r>
 80091b4:	4625      	mov	r5, r4
 80091b6:	4628      	mov	r0, r5
 80091b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091bc:	f000 f841 	bl	8009242 <_malloc_usable_size_r>
 80091c0:	4284      	cmp	r4, r0
 80091c2:	4607      	mov	r7, r0
 80091c4:	d802      	bhi.n	80091cc <_realloc_r+0x34>
 80091c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091ca:	d812      	bhi.n	80091f2 <_realloc_r+0x5a>
 80091cc:	4621      	mov	r1, r4
 80091ce:	4640      	mov	r0, r8
 80091d0:	f7ff f956 	bl	8008480 <_malloc_r>
 80091d4:	4605      	mov	r5, r0
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d0ed      	beq.n	80091b6 <_realloc_r+0x1e>
 80091da:	42bc      	cmp	r4, r7
 80091dc:	4622      	mov	r2, r4
 80091de:	4631      	mov	r1, r6
 80091e0:	bf28      	it	cs
 80091e2:	463a      	movcs	r2, r7
 80091e4:	f7ff ff84 	bl	80090f0 <memcpy>
 80091e8:	4631      	mov	r1, r6
 80091ea:	4640      	mov	r0, r8
 80091ec:	f7ff f8d4 	bl	8008398 <_free_r>
 80091f0:	e7e1      	b.n	80091b6 <_realloc_r+0x1e>
 80091f2:	4635      	mov	r5, r6
 80091f4:	e7df      	b.n	80091b6 <_realloc_r+0x1e>

080091f6 <__ascii_wctomb>:
 80091f6:	b149      	cbz	r1, 800920c <__ascii_wctomb+0x16>
 80091f8:	2aff      	cmp	r2, #255	; 0xff
 80091fa:	bf85      	ittet	hi
 80091fc:	238a      	movhi	r3, #138	; 0x8a
 80091fe:	6003      	strhi	r3, [r0, #0]
 8009200:	700a      	strbls	r2, [r1, #0]
 8009202:	f04f 30ff 	movhi.w	r0, #4294967295
 8009206:	bf98      	it	ls
 8009208:	2001      	movls	r0, #1
 800920a:	4770      	bx	lr
 800920c:	4608      	mov	r0, r1
 800920e:	4770      	bx	lr

08009210 <fiprintf>:
 8009210:	b40e      	push	{r1, r2, r3}
 8009212:	b503      	push	{r0, r1, lr}
 8009214:	4601      	mov	r1, r0
 8009216:	ab03      	add	r3, sp, #12
 8009218:	4805      	ldr	r0, [pc, #20]	; (8009230 <fiprintf+0x20>)
 800921a:	f853 2b04 	ldr.w	r2, [r3], #4
 800921e:	6800      	ldr	r0, [r0, #0]
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	f000 f83f 	bl	80092a4 <_vfiprintf_r>
 8009226:	b002      	add	sp, #8
 8009228:	f85d eb04 	ldr.w	lr, [sp], #4
 800922c:	b003      	add	sp, #12
 800922e:	4770      	bx	lr
 8009230:	200000bc 	.word	0x200000bc

08009234 <abort>:
 8009234:	b508      	push	{r3, lr}
 8009236:	2006      	movs	r0, #6
 8009238:	f000 fa0c 	bl	8009654 <raise>
 800923c:	2001      	movs	r0, #1
 800923e:	f7f8 fcc5 	bl	8001bcc <_exit>

08009242 <_malloc_usable_size_r>:
 8009242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009246:	1f18      	subs	r0, r3, #4
 8009248:	2b00      	cmp	r3, #0
 800924a:	bfbc      	itt	lt
 800924c:	580b      	ldrlt	r3, [r1, r0]
 800924e:	18c0      	addlt	r0, r0, r3
 8009250:	4770      	bx	lr

08009252 <__sfputc_r>:
 8009252:	6893      	ldr	r3, [r2, #8]
 8009254:	3b01      	subs	r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	b410      	push	{r4}
 800925a:	6093      	str	r3, [r2, #8]
 800925c:	da08      	bge.n	8009270 <__sfputc_r+0x1e>
 800925e:	6994      	ldr	r4, [r2, #24]
 8009260:	42a3      	cmp	r3, r4
 8009262:	db01      	blt.n	8009268 <__sfputc_r+0x16>
 8009264:	290a      	cmp	r1, #10
 8009266:	d103      	bne.n	8009270 <__sfputc_r+0x1e>
 8009268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800926c:	f000 b934 	b.w	80094d8 <__swbuf_r>
 8009270:	6813      	ldr	r3, [r2, #0]
 8009272:	1c58      	adds	r0, r3, #1
 8009274:	6010      	str	r0, [r2, #0]
 8009276:	7019      	strb	r1, [r3, #0]
 8009278:	4608      	mov	r0, r1
 800927a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800927e:	4770      	bx	lr

08009280 <__sfputs_r>:
 8009280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009282:	4606      	mov	r6, r0
 8009284:	460f      	mov	r7, r1
 8009286:	4614      	mov	r4, r2
 8009288:	18d5      	adds	r5, r2, r3
 800928a:	42ac      	cmp	r4, r5
 800928c:	d101      	bne.n	8009292 <__sfputs_r+0x12>
 800928e:	2000      	movs	r0, #0
 8009290:	e007      	b.n	80092a2 <__sfputs_r+0x22>
 8009292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009296:	463a      	mov	r2, r7
 8009298:	4630      	mov	r0, r6
 800929a:	f7ff ffda 	bl	8009252 <__sfputc_r>
 800929e:	1c43      	adds	r3, r0, #1
 80092a0:	d1f3      	bne.n	800928a <__sfputs_r+0xa>
 80092a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092a4 <_vfiprintf_r>:
 80092a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a8:	460d      	mov	r5, r1
 80092aa:	b09d      	sub	sp, #116	; 0x74
 80092ac:	4614      	mov	r4, r2
 80092ae:	4698      	mov	r8, r3
 80092b0:	4606      	mov	r6, r0
 80092b2:	b118      	cbz	r0, 80092bc <_vfiprintf_r+0x18>
 80092b4:	6a03      	ldr	r3, [r0, #32]
 80092b6:	b90b      	cbnz	r3, 80092bc <_vfiprintf_r+0x18>
 80092b8:	f7fe f92e 	bl	8007518 <__sinit>
 80092bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092be:	07d9      	lsls	r1, r3, #31
 80092c0:	d405      	bmi.n	80092ce <_vfiprintf_r+0x2a>
 80092c2:	89ab      	ldrh	r3, [r5, #12]
 80092c4:	059a      	lsls	r2, r3, #22
 80092c6:	d402      	bmi.n	80092ce <_vfiprintf_r+0x2a>
 80092c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ca:	f7fe fa6f 	bl	80077ac <__retarget_lock_acquire_recursive>
 80092ce:	89ab      	ldrh	r3, [r5, #12]
 80092d0:	071b      	lsls	r3, r3, #28
 80092d2:	d501      	bpl.n	80092d8 <_vfiprintf_r+0x34>
 80092d4:	692b      	ldr	r3, [r5, #16]
 80092d6:	b99b      	cbnz	r3, 8009300 <_vfiprintf_r+0x5c>
 80092d8:	4629      	mov	r1, r5
 80092da:	4630      	mov	r0, r6
 80092dc:	f000 f93a 	bl	8009554 <__swsetup_r>
 80092e0:	b170      	cbz	r0, 8009300 <_vfiprintf_r+0x5c>
 80092e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092e4:	07dc      	lsls	r4, r3, #31
 80092e6:	d504      	bpl.n	80092f2 <_vfiprintf_r+0x4e>
 80092e8:	f04f 30ff 	mov.w	r0, #4294967295
 80092ec:	b01d      	add	sp, #116	; 0x74
 80092ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f2:	89ab      	ldrh	r3, [r5, #12]
 80092f4:	0598      	lsls	r0, r3, #22
 80092f6:	d4f7      	bmi.n	80092e8 <_vfiprintf_r+0x44>
 80092f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092fa:	f7fe fa58 	bl	80077ae <__retarget_lock_release_recursive>
 80092fe:	e7f3      	b.n	80092e8 <_vfiprintf_r+0x44>
 8009300:	2300      	movs	r3, #0
 8009302:	9309      	str	r3, [sp, #36]	; 0x24
 8009304:	2320      	movs	r3, #32
 8009306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800930a:	f8cd 800c 	str.w	r8, [sp, #12]
 800930e:	2330      	movs	r3, #48	; 0x30
 8009310:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80094c4 <_vfiprintf_r+0x220>
 8009314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009318:	f04f 0901 	mov.w	r9, #1
 800931c:	4623      	mov	r3, r4
 800931e:	469a      	mov	sl, r3
 8009320:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009324:	b10a      	cbz	r2, 800932a <_vfiprintf_r+0x86>
 8009326:	2a25      	cmp	r2, #37	; 0x25
 8009328:	d1f9      	bne.n	800931e <_vfiprintf_r+0x7a>
 800932a:	ebba 0b04 	subs.w	fp, sl, r4
 800932e:	d00b      	beq.n	8009348 <_vfiprintf_r+0xa4>
 8009330:	465b      	mov	r3, fp
 8009332:	4622      	mov	r2, r4
 8009334:	4629      	mov	r1, r5
 8009336:	4630      	mov	r0, r6
 8009338:	f7ff ffa2 	bl	8009280 <__sfputs_r>
 800933c:	3001      	adds	r0, #1
 800933e:	f000 80a9 	beq.w	8009494 <_vfiprintf_r+0x1f0>
 8009342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009344:	445a      	add	r2, fp
 8009346:	9209      	str	r2, [sp, #36]	; 0x24
 8009348:	f89a 3000 	ldrb.w	r3, [sl]
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 80a1 	beq.w	8009494 <_vfiprintf_r+0x1f0>
 8009352:	2300      	movs	r3, #0
 8009354:	f04f 32ff 	mov.w	r2, #4294967295
 8009358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800935c:	f10a 0a01 	add.w	sl, sl, #1
 8009360:	9304      	str	r3, [sp, #16]
 8009362:	9307      	str	r3, [sp, #28]
 8009364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009368:	931a      	str	r3, [sp, #104]	; 0x68
 800936a:	4654      	mov	r4, sl
 800936c:	2205      	movs	r2, #5
 800936e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009372:	4854      	ldr	r0, [pc, #336]	; (80094c4 <_vfiprintf_r+0x220>)
 8009374:	f7f6 ff64 	bl	8000240 <memchr>
 8009378:	9a04      	ldr	r2, [sp, #16]
 800937a:	b9d8      	cbnz	r0, 80093b4 <_vfiprintf_r+0x110>
 800937c:	06d1      	lsls	r1, r2, #27
 800937e:	bf44      	itt	mi
 8009380:	2320      	movmi	r3, #32
 8009382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009386:	0713      	lsls	r3, r2, #28
 8009388:	bf44      	itt	mi
 800938a:	232b      	movmi	r3, #43	; 0x2b
 800938c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009390:	f89a 3000 	ldrb.w	r3, [sl]
 8009394:	2b2a      	cmp	r3, #42	; 0x2a
 8009396:	d015      	beq.n	80093c4 <_vfiprintf_r+0x120>
 8009398:	9a07      	ldr	r2, [sp, #28]
 800939a:	4654      	mov	r4, sl
 800939c:	2000      	movs	r0, #0
 800939e:	f04f 0c0a 	mov.w	ip, #10
 80093a2:	4621      	mov	r1, r4
 80093a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093a8:	3b30      	subs	r3, #48	; 0x30
 80093aa:	2b09      	cmp	r3, #9
 80093ac:	d94d      	bls.n	800944a <_vfiprintf_r+0x1a6>
 80093ae:	b1b0      	cbz	r0, 80093de <_vfiprintf_r+0x13a>
 80093b0:	9207      	str	r2, [sp, #28]
 80093b2:	e014      	b.n	80093de <_vfiprintf_r+0x13a>
 80093b4:	eba0 0308 	sub.w	r3, r0, r8
 80093b8:	fa09 f303 	lsl.w	r3, r9, r3
 80093bc:	4313      	orrs	r3, r2
 80093be:	9304      	str	r3, [sp, #16]
 80093c0:	46a2      	mov	sl, r4
 80093c2:	e7d2      	b.n	800936a <_vfiprintf_r+0xc6>
 80093c4:	9b03      	ldr	r3, [sp, #12]
 80093c6:	1d19      	adds	r1, r3, #4
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	9103      	str	r1, [sp, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	bfbb      	ittet	lt
 80093d0:	425b      	neglt	r3, r3
 80093d2:	f042 0202 	orrlt.w	r2, r2, #2
 80093d6:	9307      	strge	r3, [sp, #28]
 80093d8:	9307      	strlt	r3, [sp, #28]
 80093da:	bfb8      	it	lt
 80093dc:	9204      	strlt	r2, [sp, #16]
 80093de:	7823      	ldrb	r3, [r4, #0]
 80093e0:	2b2e      	cmp	r3, #46	; 0x2e
 80093e2:	d10c      	bne.n	80093fe <_vfiprintf_r+0x15a>
 80093e4:	7863      	ldrb	r3, [r4, #1]
 80093e6:	2b2a      	cmp	r3, #42	; 0x2a
 80093e8:	d134      	bne.n	8009454 <_vfiprintf_r+0x1b0>
 80093ea:	9b03      	ldr	r3, [sp, #12]
 80093ec:	1d1a      	adds	r2, r3, #4
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	9203      	str	r2, [sp, #12]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	bfb8      	it	lt
 80093f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80093fa:	3402      	adds	r4, #2
 80093fc:	9305      	str	r3, [sp, #20]
 80093fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80094d4 <_vfiprintf_r+0x230>
 8009402:	7821      	ldrb	r1, [r4, #0]
 8009404:	2203      	movs	r2, #3
 8009406:	4650      	mov	r0, sl
 8009408:	f7f6 ff1a 	bl	8000240 <memchr>
 800940c:	b138      	cbz	r0, 800941e <_vfiprintf_r+0x17a>
 800940e:	9b04      	ldr	r3, [sp, #16]
 8009410:	eba0 000a 	sub.w	r0, r0, sl
 8009414:	2240      	movs	r2, #64	; 0x40
 8009416:	4082      	lsls	r2, r0
 8009418:	4313      	orrs	r3, r2
 800941a:	3401      	adds	r4, #1
 800941c:	9304      	str	r3, [sp, #16]
 800941e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009422:	4829      	ldr	r0, [pc, #164]	; (80094c8 <_vfiprintf_r+0x224>)
 8009424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009428:	2206      	movs	r2, #6
 800942a:	f7f6 ff09 	bl	8000240 <memchr>
 800942e:	2800      	cmp	r0, #0
 8009430:	d03f      	beq.n	80094b2 <_vfiprintf_r+0x20e>
 8009432:	4b26      	ldr	r3, [pc, #152]	; (80094cc <_vfiprintf_r+0x228>)
 8009434:	bb1b      	cbnz	r3, 800947e <_vfiprintf_r+0x1da>
 8009436:	9b03      	ldr	r3, [sp, #12]
 8009438:	3307      	adds	r3, #7
 800943a:	f023 0307 	bic.w	r3, r3, #7
 800943e:	3308      	adds	r3, #8
 8009440:	9303      	str	r3, [sp, #12]
 8009442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009444:	443b      	add	r3, r7
 8009446:	9309      	str	r3, [sp, #36]	; 0x24
 8009448:	e768      	b.n	800931c <_vfiprintf_r+0x78>
 800944a:	fb0c 3202 	mla	r2, ip, r2, r3
 800944e:	460c      	mov	r4, r1
 8009450:	2001      	movs	r0, #1
 8009452:	e7a6      	b.n	80093a2 <_vfiprintf_r+0xfe>
 8009454:	2300      	movs	r3, #0
 8009456:	3401      	adds	r4, #1
 8009458:	9305      	str	r3, [sp, #20]
 800945a:	4619      	mov	r1, r3
 800945c:	f04f 0c0a 	mov.w	ip, #10
 8009460:	4620      	mov	r0, r4
 8009462:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009466:	3a30      	subs	r2, #48	; 0x30
 8009468:	2a09      	cmp	r2, #9
 800946a:	d903      	bls.n	8009474 <_vfiprintf_r+0x1d0>
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0c6      	beq.n	80093fe <_vfiprintf_r+0x15a>
 8009470:	9105      	str	r1, [sp, #20]
 8009472:	e7c4      	b.n	80093fe <_vfiprintf_r+0x15a>
 8009474:	fb0c 2101 	mla	r1, ip, r1, r2
 8009478:	4604      	mov	r4, r0
 800947a:	2301      	movs	r3, #1
 800947c:	e7f0      	b.n	8009460 <_vfiprintf_r+0x1bc>
 800947e:	ab03      	add	r3, sp, #12
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	462a      	mov	r2, r5
 8009484:	4b12      	ldr	r3, [pc, #72]	; (80094d0 <_vfiprintf_r+0x22c>)
 8009486:	a904      	add	r1, sp, #16
 8009488:	4630      	mov	r0, r6
 800948a:	f7fd fc21 	bl	8006cd0 <_printf_float>
 800948e:	4607      	mov	r7, r0
 8009490:	1c78      	adds	r0, r7, #1
 8009492:	d1d6      	bne.n	8009442 <_vfiprintf_r+0x19e>
 8009494:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009496:	07d9      	lsls	r1, r3, #31
 8009498:	d405      	bmi.n	80094a6 <_vfiprintf_r+0x202>
 800949a:	89ab      	ldrh	r3, [r5, #12]
 800949c:	059a      	lsls	r2, r3, #22
 800949e:	d402      	bmi.n	80094a6 <_vfiprintf_r+0x202>
 80094a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094a2:	f7fe f984 	bl	80077ae <__retarget_lock_release_recursive>
 80094a6:	89ab      	ldrh	r3, [r5, #12]
 80094a8:	065b      	lsls	r3, r3, #25
 80094aa:	f53f af1d 	bmi.w	80092e8 <_vfiprintf_r+0x44>
 80094ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094b0:	e71c      	b.n	80092ec <_vfiprintf_r+0x48>
 80094b2:	ab03      	add	r3, sp, #12
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	462a      	mov	r2, r5
 80094b8:	4b05      	ldr	r3, [pc, #20]	; (80094d0 <_vfiprintf_r+0x22c>)
 80094ba:	a904      	add	r1, sp, #16
 80094bc:	4630      	mov	r0, r6
 80094be:	f7fd fe8f 	bl	80071e0 <_printf_i>
 80094c2:	e7e4      	b.n	800948e <_vfiprintf_r+0x1ea>
 80094c4:	08009d0c 	.word	0x08009d0c
 80094c8:	08009d16 	.word	0x08009d16
 80094cc:	08006cd1 	.word	0x08006cd1
 80094d0:	08009281 	.word	0x08009281
 80094d4:	08009d12 	.word	0x08009d12

080094d8 <__swbuf_r>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	460e      	mov	r6, r1
 80094dc:	4614      	mov	r4, r2
 80094de:	4605      	mov	r5, r0
 80094e0:	b118      	cbz	r0, 80094ea <__swbuf_r+0x12>
 80094e2:	6a03      	ldr	r3, [r0, #32]
 80094e4:	b90b      	cbnz	r3, 80094ea <__swbuf_r+0x12>
 80094e6:	f7fe f817 	bl	8007518 <__sinit>
 80094ea:	69a3      	ldr	r3, [r4, #24]
 80094ec:	60a3      	str	r3, [r4, #8]
 80094ee:	89a3      	ldrh	r3, [r4, #12]
 80094f0:	071a      	lsls	r2, r3, #28
 80094f2:	d525      	bpl.n	8009540 <__swbuf_r+0x68>
 80094f4:	6923      	ldr	r3, [r4, #16]
 80094f6:	b31b      	cbz	r3, 8009540 <__swbuf_r+0x68>
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	6922      	ldr	r2, [r4, #16]
 80094fc:	1a98      	subs	r0, r3, r2
 80094fe:	6963      	ldr	r3, [r4, #20]
 8009500:	b2f6      	uxtb	r6, r6
 8009502:	4283      	cmp	r3, r0
 8009504:	4637      	mov	r7, r6
 8009506:	dc04      	bgt.n	8009512 <__swbuf_r+0x3a>
 8009508:	4621      	mov	r1, r4
 800950a:	4628      	mov	r0, r5
 800950c:	f7ff fd9e 	bl	800904c <_fflush_r>
 8009510:	b9e0      	cbnz	r0, 800954c <__swbuf_r+0x74>
 8009512:	68a3      	ldr	r3, [r4, #8]
 8009514:	3b01      	subs	r3, #1
 8009516:	60a3      	str	r3, [r4, #8]
 8009518:	6823      	ldr	r3, [r4, #0]
 800951a:	1c5a      	adds	r2, r3, #1
 800951c:	6022      	str	r2, [r4, #0]
 800951e:	701e      	strb	r6, [r3, #0]
 8009520:	6962      	ldr	r2, [r4, #20]
 8009522:	1c43      	adds	r3, r0, #1
 8009524:	429a      	cmp	r2, r3
 8009526:	d004      	beq.n	8009532 <__swbuf_r+0x5a>
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	07db      	lsls	r3, r3, #31
 800952c:	d506      	bpl.n	800953c <__swbuf_r+0x64>
 800952e:	2e0a      	cmp	r6, #10
 8009530:	d104      	bne.n	800953c <__swbuf_r+0x64>
 8009532:	4621      	mov	r1, r4
 8009534:	4628      	mov	r0, r5
 8009536:	f7ff fd89 	bl	800904c <_fflush_r>
 800953a:	b938      	cbnz	r0, 800954c <__swbuf_r+0x74>
 800953c:	4638      	mov	r0, r7
 800953e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009540:	4621      	mov	r1, r4
 8009542:	4628      	mov	r0, r5
 8009544:	f000 f806 	bl	8009554 <__swsetup_r>
 8009548:	2800      	cmp	r0, #0
 800954a:	d0d5      	beq.n	80094f8 <__swbuf_r+0x20>
 800954c:	f04f 37ff 	mov.w	r7, #4294967295
 8009550:	e7f4      	b.n	800953c <__swbuf_r+0x64>
	...

08009554 <__swsetup_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4b2a      	ldr	r3, [pc, #168]	; (8009600 <__swsetup_r+0xac>)
 8009558:	4605      	mov	r5, r0
 800955a:	6818      	ldr	r0, [r3, #0]
 800955c:	460c      	mov	r4, r1
 800955e:	b118      	cbz	r0, 8009568 <__swsetup_r+0x14>
 8009560:	6a03      	ldr	r3, [r0, #32]
 8009562:	b90b      	cbnz	r3, 8009568 <__swsetup_r+0x14>
 8009564:	f7fd ffd8 	bl	8007518 <__sinit>
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800956e:	0718      	lsls	r0, r3, #28
 8009570:	d422      	bmi.n	80095b8 <__swsetup_r+0x64>
 8009572:	06d9      	lsls	r1, r3, #27
 8009574:	d407      	bmi.n	8009586 <__swsetup_r+0x32>
 8009576:	2309      	movs	r3, #9
 8009578:	602b      	str	r3, [r5, #0]
 800957a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800957e:	81a3      	strh	r3, [r4, #12]
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	e034      	b.n	80095f0 <__swsetup_r+0x9c>
 8009586:	0758      	lsls	r0, r3, #29
 8009588:	d512      	bpl.n	80095b0 <__swsetup_r+0x5c>
 800958a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800958c:	b141      	cbz	r1, 80095a0 <__swsetup_r+0x4c>
 800958e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009592:	4299      	cmp	r1, r3
 8009594:	d002      	beq.n	800959c <__swsetup_r+0x48>
 8009596:	4628      	mov	r0, r5
 8009598:	f7fe fefe 	bl	8008398 <_free_r>
 800959c:	2300      	movs	r3, #0
 800959e:	6363      	str	r3, [r4, #52]	; 0x34
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095a6:	81a3      	strh	r3, [r4, #12]
 80095a8:	2300      	movs	r3, #0
 80095aa:	6063      	str	r3, [r4, #4]
 80095ac:	6923      	ldr	r3, [r4, #16]
 80095ae:	6023      	str	r3, [r4, #0]
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	f043 0308 	orr.w	r3, r3, #8
 80095b6:	81a3      	strh	r3, [r4, #12]
 80095b8:	6923      	ldr	r3, [r4, #16]
 80095ba:	b94b      	cbnz	r3, 80095d0 <__swsetup_r+0x7c>
 80095bc:	89a3      	ldrh	r3, [r4, #12]
 80095be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095c6:	d003      	beq.n	80095d0 <__swsetup_r+0x7c>
 80095c8:	4621      	mov	r1, r4
 80095ca:	4628      	mov	r0, r5
 80095cc:	f000 f884 	bl	80096d8 <__smakebuf_r>
 80095d0:	89a0      	ldrh	r0, [r4, #12]
 80095d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095d6:	f010 0301 	ands.w	r3, r0, #1
 80095da:	d00a      	beq.n	80095f2 <__swsetup_r+0x9e>
 80095dc:	2300      	movs	r3, #0
 80095de:	60a3      	str	r3, [r4, #8]
 80095e0:	6963      	ldr	r3, [r4, #20]
 80095e2:	425b      	negs	r3, r3
 80095e4:	61a3      	str	r3, [r4, #24]
 80095e6:	6923      	ldr	r3, [r4, #16]
 80095e8:	b943      	cbnz	r3, 80095fc <__swsetup_r+0xa8>
 80095ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095ee:	d1c4      	bne.n	800957a <__swsetup_r+0x26>
 80095f0:	bd38      	pop	{r3, r4, r5, pc}
 80095f2:	0781      	lsls	r1, r0, #30
 80095f4:	bf58      	it	pl
 80095f6:	6963      	ldrpl	r3, [r4, #20]
 80095f8:	60a3      	str	r3, [r4, #8]
 80095fa:	e7f4      	b.n	80095e6 <__swsetup_r+0x92>
 80095fc:	2000      	movs	r0, #0
 80095fe:	e7f7      	b.n	80095f0 <__swsetup_r+0x9c>
 8009600:	200000bc 	.word	0x200000bc

08009604 <_raise_r>:
 8009604:	291f      	cmp	r1, #31
 8009606:	b538      	push	{r3, r4, r5, lr}
 8009608:	4604      	mov	r4, r0
 800960a:	460d      	mov	r5, r1
 800960c:	d904      	bls.n	8009618 <_raise_r+0x14>
 800960e:	2316      	movs	r3, #22
 8009610:	6003      	str	r3, [r0, #0]
 8009612:	f04f 30ff 	mov.w	r0, #4294967295
 8009616:	bd38      	pop	{r3, r4, r5, pc}
 8009618:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800961a:	b112      	cbz	r2, 8009622 <_raise_r+0x1e>
 800961c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009620:	b94b      	cbnz	r3, 8009636 <_raise_r+0x32>
 8009622:	4620      	mov	r0, r4
 8009624:	f000 f830 	bl	8009688 <_getpid_r>
 8009628:	462a      	mov	r2, r5
 800962a:	4601      	mov	r1, r0
 800962c:	4620      	mov	r0, r4
 800962e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009632:	f000 b817 	b.w	8009664 <_kill_r>
 8009636:	2b01      	cmp	r3, #1
 8009638:	d00a      	beq.n	8009650 <_raise_r+0x4c>
 800963a:	1c59      	adds	r1, r3, #1
 800963c:	d103      	bne.n	8009646 <_raise_r+0x42>
 800963e:	2316      	movs	r3, #22
 8009640:	6003      	str	r3, [r0, #0]
 8009642:	2001      	movs	r0, #1
 8009644:	e7e7      	b.n	8009616 <_raise_r+0x12>
 8009646:	2400      	movs	r4, #0
 8009648:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800964c:	4628      	mov	r0, r5
 800964e:	4798      	blx	r3
 8009650:	2000      	movs	r0, #0
 8009652:	e7e0      	b.n	8009616 <_raise_r+0x12>

08009654 <raise>:
 8009654:	4b02      	ldr	r3, [pc, #8]	; (8009660 <raise+0xc>)
 8009656:	4601      	mov	r1, r0
 8009658:	6818      	ldr	r0, [r3, #0]
 800965a:	f7ff bfd3 	b.w	8009604 <_raise_r>
 800965e:	bf00      	nop
 8009660:	200000bc 	.word	0x200000bc

08009664 <_kill_r>:
 8009664:	b538      	push	{r3, r4, r5, lr}
 8009666:	4d07      	ldr	r5, [pc, #28]	; (8009684 <_kill_r+0x20>)
 8009668:	2300      	movs	r3, #0
 800966a:	4604      	mov	r4, r0
 800966c:	4608      	mov	r0, r1
 800966e:	4611      	mov	r1, r2
 8009670:	602b      	str	r3, [r5, #0]
 8009672:	f7f8 fa9b 	bl	8001bac <_kill>
 8009676:	1c43      	adds	r3, r0, #1
 8009678:	d102      	bne.n	8009680 <_kill_r+0x1c>
 800967a:	682b      	ldr	r3, [r5, #0]
 800967c:	b103      	cbz	r3, 8009680 <_kill_r+0x1c>
 800967e:	6023      	str	r3, [r4, #0]
 8009680:	bd38      	pop	{r3, r4, r5, pc}
 8009682:	bf00      	nop
 8009684:	200006cc 	.word	0x200006cc

08009688 <_getpid_r>:
 8009688:	f7f8 ba88 	b.w	8001b9c <_getpid>

0800968c <__swhatbuf_r>:
 800968c:	b570      	push	{r4, r5, r6, lr}
 800968e:	460c      	mov	r4, r1
 8009690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009694:	2900      	cmp	r1, #0
 8009696:	b096      	sub	sp, #88	; 0x58
 8009698:	4615      	mov	r5, r2
 800969a:	461e      	mov	r6, r3
 800969c:	da0d      	bge.n	80096ba <__swhatbuf_r+0x2e>
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80096a4:	f04f 0100 	mov.w	r1, #0
 80096a8:	bf0c      	ite	eq
 80096aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80096ae:	2340      	movne	r3, #64	; 0x40
 80096b0:	2000      	movs	r0, #0
 80096b2:	6031      	str	r1, [r6, #0]
 80096b4:	602b      	str	r3, [r5, #0]
 80096b6:	b016      	add	sp, #88	; 0x58
 80096b8:	bd70      	pop	{r4, r5, r6, pc}
 80096ba:	466a      	mov	r2, sp
 80096bc:	f000 f848 	bl	8009750 <_fstat_r>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	dbec      	blt.n	800969e <__swhatbuf_r+0x12>
 80096c4:	9901      	ldr	r1, [sp, #4]
 80096c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80096ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80096ce:	4259      	negs	r1, r3
 80096d0:	4159      	adcs	r1, r3
 80096d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096d6:	e7eb      	b.n	80096b0 <__swhatbuf_r+0x24>

080096d8 <__smakebuf_r>:
 80096d8:	898b      	ldrh	r3, [r1, #12]
 80096da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096dc:	079d      	lsls	r5, r3, #30
 80096de:	4606      	mov	r6, r0
 80096e0:	460c      	mov	r4, r1
 80096e2:	d507      	bpl.n	80096f4 <__smakebuf_r+0x1c>
 80096e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096e8:	6023      	str	r3, [r4, #0]
 80096ea:	6123      	str	r3, [r4, #16]
 80096ec:	2301      	movs	r3, #1
 80096ee:	6163      	str	r3, [r4, #20]
 80096f0:	b002      	add	sp, #8
 80096f2:	bd70      	pop	{r4, r5, r6, pc}
 80096f4:	ab01      	add	r3, sp, #4
 80096f6:	466a      	mov	r2, sp
 80096f8:	f7ff ffc8 	bl	800968c <__swhatbuf_r>
 80096fc:	9900      	ldr	r1, [sp, #0]
 80096fe:	4605      	mov	r5, r0
 8009700:	4630      	mov	r0, r6
 8009702:	f7fe febd 	bl	8008480 <_malloc_r>
 8009706:	b948      	cbnz	r0, 800971c <__smakebuf_r+0x44>
 8009708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800970c:	059a      	lsls	r2, r3, #22
 800970e:	d4ef      	bmi.n	80096f0 <__smakebuf_r+0x18>
 8009710:	f023 0303 	bic.w	r3, r3, #3
 8009714:	f043 0302 	orr.w	r3, r3, #2
 8009718:	81a3      	strh	r3, [r4, #12]
 800971a:	e7e3      	b.n	80096e4 <__smakebuf_r+0xc>
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	6020      	str	r0, [r4, #0]
 8009720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009724:	81a3      	strh	r3, [r4, #12]
 8009726:	9b00      	ldr	r3, [sp, #0]
 8009728:	6163      	str	r3, [r4, #20]
 800972a:	9b01      	ldr	r3, [sp, #4]
 800972c:	6120      	str	r0, [r4, #16]
 800972e:	b15b      	cbz	r3, 8009748 <__smakebuf_r+0x70>
 8009730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009734:	4630      	mov	r0, r6
 8009736:	f000 f81d 	bl	8009774 <_isatty_r>
 800973a:	b128      	cbz	r0, 8009748 <__smakebuf_r+0x70>
 800973c:	89a3      	ldrh	r3, [r4, #12]
 800973e:	f023 0303 	bic.w	r3, r3, #3
 8009742:	f043 0301 	orr.w	r3, r3, #1
 8009746:	81a3      	strh	r3, [r4, #12]
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	431d      	orrs	r5, r3
 800974c:	81a5      	strh	r5, [r4, #12]
 800974e:	e7cf      	b.n	80096f0 <__smakebuf_r+0x18>

08009750 <_fstat_r>:
 8009750:	b538      	push	{r3, r4, r5, lr}
 8009752:	4d07      	ldr	r5, [pc, #28]	; (8009770 <_fstat_r+0x20>)
 8009754:	2300      	movs	r3, #0
 8009756:	4604      	mov	r4, r0
 8009758:	4608      	mov	r0, r1
 800975a:	4611      	mov	r1, r2
 800975c:	602b      	str	r3, [r5, #0]
 800975e:	f7f8 fa84 	bl	8001c6a <_fstat>
 8009762:	1c43      	adds	r3, r0, #1
 8009764:	d102      	bne.n	800976c <_fstat_r+0x1c>
 8009766:	682b      	ldr	r3, [r5, #0]
 8009768:	b103      	cbz	r3, 800976c <_fstat_r+0x1c>
 800976a:	6023      	str	r3, [r4, #0]
 800976c:	bd38      	pop	{r3, r4, r5, pc}
 800976e:	bf00      	nop
 8009770:	200006cc 	.word	0x200006cc

08009774 <_isatty_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	4d06      	ldr	r5, [pc, #24]	; (8009790 <_isatty_r+0x1c>)
 8009778:	2300      	movs	r3, #0
 800977a:	4604      	mov	r4, r0
 800977c:	4608      	mov	r0, r1
 800977e:	602b      	str	r3, [r5, #0]
 8009780:	f7f8 fa83 	bl	8001c8a <_isatty>
 8009784:	1c43      	adds	r3, r0, #1
 8009786:	d102      	bne.n	800978e <_isatty_r+0x1a>
 8009788:	682b      	ldr	r3, [r5, #0]
 800978a:	b103      	cbz	r3, 800978e <_isatty_r+0x1a>
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	bd38      	pop	{r3, r4, r5, pc}
 8009790:	200006cc 	.word	0x200006cc

08009794 <_init>:
 8009794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009796:	bf00      	nop
 8009798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979a:	bc08      	pop	{r3}
 800979c:	469e      	mov	lr, r3
 800979e:	4770      	bx	lr

080097a0 <_fini>:
 80097a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a2:	bf00      	nop
 80097a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097a6:	bc08      	pop	{r3}
 80097a8:	469e      	mov	lr, r3
 80097aa:	4770      	bx	lr
